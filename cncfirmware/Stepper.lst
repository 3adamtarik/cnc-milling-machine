MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;********************************************************
                      00002 ;
                      00003 ;               Stepper Motor controller
                      00004 ;
                      00005 ;********************************************************
                      00006 
                      00007         list            p=pic16f877
                      00008         include         p16f877.inc
                      00001         LIST
                      00002 ; P16F877.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00373         LIST
                      00009 
                      00010                 radix dec
                      00011 
2007   3FF1           00012                 __CONFIG _CP_OFF & _XT_OSC & _PWRTE_ON  & _WDT_OFF & _BODEN_ON & _LVP_ON & _DEBUG_OFF & 
                            _WRT_ENABLE_ON & _CPD_OFF
                      00013 
                      00014 ;;;;;;;;;#DEFINE        Debug 1
                      00015 
                      00016 ; Version 1.1
                      00017 ;  - Send x,y,z to serial port for each step on moves
                      00018 ;  - Detect and report Brownout resets
                      00019 ;  - Allow calibration to a specific location
                      00020 ;  - Add an 'F' command to display firmware version
                      00021 ; Version 1.0 - Changes to match hardware pin swaps - Swap X/Y Axis.  Swap A with \A, B with \B
                      00022 ; Version 0.4 - Changes out X/Y step routines with a modified Bresenham algorithm that moves in straight
                             lines
                      00023 
                      00024 
  00000000            00025 RESET_V         EQU     0x0000
  00000004            00026 ISR_V           EQU     0x0004
  003D0900            00027 OSC_FREQ        EQU     D'4000000'      
                      00028 
                      00029 
                      00030 ; Hardware config:
                      00031 ; PortA = Z Motor Control & Limit Switches
                      00032 ;  RA5 = \Limit-Zmax
                      00033 ;  RA4 = \Limit-Zmin
                      00034 ;  RA3 = Z Coil A
                      00035 ;  RA2 = Z Coil \A
                      00036 ;  RA1 = Z Coil B
                      00037 ;  RA0 = Z Coil \B 
                      00038 
                      00039 
                      00040 ; PortB = Start/Stop - Reserved
                      00041 ;  LCD Later / Menu input
                      00042 
                      00043 ; PortC = Limit Switches, I2C & Serial
                      00044 ;  RC7 = Serial RX
                      00045 ;  RC6 = Serial TX
                      00046 ;  RC5 = \Limit-Ymax
                      00047 ;  RC4 = I2C (Reserved) - Not Connected
                      00048 ;  RC3 = I2C (Reserved) - Not Connected 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00049 ;  RC2 = \Limit-Ymin
                      00050 ;  RC1 = \Limit-Xmax
                      00051 ;  RC0 = \Limit-Xmin
                      00052 
                      00053 ; PortD = Motor Control
                      00054 ;  RD7 = Y Coil A  -- Change to X\A
                      00055 ;  RD6 = Y Coil \A -- Change to XA
                      00056 ;  RD5 = Y Coil B  -- Change to X\B
                      00057 ;  RD4 = Y Coil \B -- Change to XB
                      00058 ;  RD3 = X Coil A  -- Change to Y\A
                      00059 ;  RD2 = X Coil \A -- Change to YA
                      00060 ;  RD1 = X Coil B  -- Change to Y\B
                      00061 ;  RD0 = X Coil \B -- Change to YB
                      00062 
                      00063 
                      00064 ; PortE = Relay control & Start/Stop
                      00065 ;   RE2 = Not Connected
                      00066 ;   RE1 = Vacuum Relay
                      00067 ;   RE0 = Drill relay
                      00068 
                      00069 
                      00070 ; Step Sequence - CW: b'1010', b'0110', b'0101',b'1001'  - CCW: b'1001',b'0101',b'0110',b'1010'
                      00071 
                      00072 
                      00073 ; Constants
                      00074 #define rcvbuffer_size 14
                      00075 #define CR 0x0d
                      00076 #define LF 0x0a
                      00077 
                      00078 ; MacroSendTable
                      00079 ;  Wraps the call to the sendTable subroutine in all of the appropriate
                      00080 ;    code to set and reset the proper PCLATH register so it does not
                      00081 ;    fly off to never-never land accidently when crossing pages
                      00082 ;
                      00083 ; To use it, just code MacroSendTable myTable
                      00084 
                      00085 MacroSendTable  macro   tableLocation
                      00086                 movlw           HIGH tableLocation      
                      00087                 movwf           tableH
                      00088                 movlw           LOW     tableLocation
                      00089                 movwf           tableL
                      00090                 lcall           sendTable
                      00091                 movlw           HIGH $          ; restore the proper PCLATH
                      00092                 movwf           PCLATH
                      00093                 endm
                      00094 
                      00095 ; all bits are numbered starting at 0 on the right - 76543210
                      00096 ; TRIS bits on indicates input, 0 indicates output
                      00097 
                      00098 ; Define EEPROM locations
2100                  00099         org 0x2100
2100   0056 0069 006E 00100                         de "Vinces CNC Mill V1.1 - Vincent Greene", 0
       0063 0065 0073 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       0020 0043 004E 
       0043 0020 004D 
       0069 006C 006C 
       0020 0056 0031 
       002E 0031 0020 
       002D 0020 0056 
       0069 006E 0063 
       0065 006E 0074 
       0020 0047 0072 
       0065 0065 006E 
       0065 0000 
                      00101 
                      00102 
2126                  00103 pwrUpCfg
                      00104         ; speed (delay counter)
2126   001E           00105                         de      30              ; xdelay
2127   001E           00106                         de      30              ; ydelay
2128   000F           00107                         de      15              ; zdelay
                      00108         
                      00109         ; Steps per inch 
2129   00F0           00110                         de      240             ;xinch
212A   00F0           00111                         de      240             ;yinch
212B   00E6           00112                         de      230             ;zinch
                      00113         
                      00114         ; holding current on/off )0/1
212C   0000           00115                         de      0               ;xhold
212D   0000           00116                         de      0               ;yhold
212E   0000           00117                         de      0               ;zhold
212F                  00118 pwrUpCfgEnd
                      00119 
                      00120 
                      00121 
                      00122 ;****************  Label Definition  ********************
                      00123         cblock  h'20' ; bank 0
                      00124         
                      00125 ; Start of configuration - mirrored to EEPROM
                      00126 
                      00127         ; speed (delay counter)
  00000020            00128         xdelay
  00000021            00129         ydelay
  00000022            00130         zdelay
                      00131         
                      00132         ; Steps per inch 
  00000023            00133         xinch
  00000024            00134         yinch
  00000025            00135         zinch
                      00136         
                      00137         ; holding current on/off )0/1
  00000026            00138         xhold
  00000027            00139         yhold
  00000028            00140         zhold
                      00141 
                      00142         ; stores current settings of motor coils A,\A,B,\B in low bits
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000029            00143         xcoils
  0000002A            00144         ycoils
  0000002B            00145         zcoils
                      00146 
                      00147         ; Stores current location of an axis
  0000002C            00148         xlocation:2
  0000002E            00149         ylocation:2
  00000030            00150         zlocation:2
                      00151         
                      00152         ; steps to go in current movement
  00000032            00153         xstepstogo
  00000033            00154         ystepstogo
  00000034            00155         zstepstogo
                      00156         
                      00157         ; direction flag for current movement
  00000035            00158         xdirection
  00000036            00159         ydirection
  00000037            00160         zdirection
                      00161         
                      00162         ; motor state
  00000038            00163         drillRelay
  00000039            00164         vacuumRelay
                      00165 
                      00166         ; misc varaibles        
                      00167         
  0000003A            00168         count1                          ;Wait counter
  0000003B            00169         count2                          ;Wait counter(for 1msec)
  0000003C            00170         bounceCount                                             ; debounce Counter (used by debounce rou
                            tine only)
  0000003D            00171         numparm
  0000003E            00172         offset
  0000003F            00173         temp2
  00000040            00174         rcvbufoff
  00000041            00175         rcvchar
  00000042            00176         rcvbuffer:16
  00000052            00177         B1 ; scratch area for ascii btye conversion
  00000053            00178         tabofs ; Computed table offset used by DEFTAB macro
  00000054            00179         echochar ; what to echo for keys entered
  00000055            00180         axisOffset
  00000056            00181         whichMotors; bit field used to determine whihc motors to move
  00000057            00182         manualMode; 
                      00183         ; for straight line algorithm
  00000058            00184         errorFactor:2 ; cumulative error factor from best line (to determine parallel or diagonal step)
  0000005A            00185         eslow;          adjustment factor for movement in the slow direction (diagonal)
  0000005B            00186         efast;          adjustment factor for movement in the fast direction (parallel)
  0000005C            00187     xfast;              indicates if x is the fast axis, 255 means it is, 0 means it is not (y is fast a
                            xis instead)
  0000005D            00188         stepx;          should x axis be stepped (255 is yes, 0 is no)
  0000005E            00189         stepy;          should y axis be stepped (255 is yes, 0 is no)
                      00190 
                      00191         endc
                      00192 
                      00193         CBLOCK  0x70 ; used for bank-free variables
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000070            00194                 sign ; ascii '-' if the value is negative
  00000071            00195                 digits: 5 ; five ascii digits for conversion to/from/decimal
  00000076            00196                 known_zero: 1 ; Fixed value zero for many calcs
  00000077            00197                 temp: 1 ; working variable for puts and 16b2acsii
  00000078            00198                 HI: 1 ; high byte for conversion
  00000079            00199                 LO: 1 ; low byte for conversion
  0000007A            00200                 saveW ; temp storage for the W register
  0000007B            00201                 tableH ; PCLATH for a table lookup
  0000007C            00202                 tableL ; PCL for a table lookup
                      00203         ENDC
                      00204 
                      00205 
                      00206 debounce macro register,bit,mbypass,release
                      00207 
                      00208         local   mstart, mloop
                      00209 
                      00210 mstart
                      00211         btfsc   register,bit     ;ON (low)?
                      00212         goto    mbypass          ;No. Next
                      00213 
                      00214         ifndef  Debug
                      00215                 ; Wait 20 ms and check it again
                      00216                 movlw   d'20'
                      00217                 movwf   bounceCount
                      00218 mloop   call    timer
                      00219         decfsz  bounceCount,f        ;count - 1 = 0 ?
                      00220         goto    mloop            ;No. Continue
                      00221 
                      00222                 ; 20 ms have passed - is it still low?
                      00223         btfsc   register,bit     ;ON (low)?
                      00224         goto    mbypass          ;No. Next
                      00225         if release == 1
                      00226                 btfss   register,bit    ; Wait for a release
                      00227                 goto    $-1
                      00228         endif
                      00229         else
                      00230                 bsf             register,bit
                      00231                 nop
                      00232                 nop
                      00233                 nop
                      00234                 nop
                      00235                 nop
                      00236                 nop
                      00237                 nop
                      00238                 nop
                      00239         endif
                      00240 
                      00241         endm
                      00242 
                      00243         
                      00244 
                      00245 
                      00246 ;****************  Program Start  ***********************
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0000                  00247         org     RESET_V         ;Reset Vector
0000   2807           00248         goto    init_V
0004                  00249         org     ISR_V           ;Interrupt Vector
0004   2805           00250                 goto    interrupt
                      00251 
                      00252 
                      00253 ;**************** Interrupt Process *********************
0005                  00254 interrupt
0005   018B           00255                 clrf    INTCON
0006   0009           00256                 retfie
                      00257 
                      00258 
                      00259 ; Initialization is at the end because page 0 is the best place for common subroutines
Message[307]: Setting page bits.
0007   158A 120A 289D 00260 init_V  lgoto   init
                      00261 
                      00262 ; Subroutine SendTable
                      00263 ;  Dump a table address to the serial port (tables are NOT limited in size)
                      00264 ; table must end with a retlw 0
                      00265 ; Modifies varibles: tableH, tableL, temp
                      00266 ; input table location is: PCLATH in tableH, PCL in tableL - these will be modified by the process
                      00267 
                      00268 ; Macro MacroSendTable simplifies the calls by creating all of the needed setup and PCLATH reset code to
                      00269 ;   make the call completely safe.  Rather than calling SendTable directly, it is safer to use the macro
                      00270 
                      00271 ; It is WAY important that this is at the top of page 0 and 
                      00272 ;   not crossing any page boundarys
                      00273 
000A                  00274 sendTable
                      00275         ; get the character to send from the table
000A   201B           00276                 call            PRIVATEloadTableByte
                      00277         ; W contains the character - save it
000B   00F7           00278                 movwf           temp
                      00279         ; Put the PCLATH back to what it should be (or we will jump to nowhere on next goto
000C   3000           00280                 movlw           HIGH sendTable
000D   008A           00281                 movwf           PCLATH
                      00282 
000E   0877           00283                 movf            temp,w          ; pull the byte to send back into w
000F   3E00           00284                 addlw           0       
0010   1903           00285                 btfsc           STATUS,Z        ; is it zero (end of table)?
0011   0008           00286                 return                                  ;    if so, return from subroutine
                      00287 
0012   0099           00288                 movwf           TXREG           ; transmit it
0013   3098           00289                 movlw           TXSTA           ; check status with indirect because it is in another pa
                            ge
0014   0084           00290         movwf           FSR         ; FSR <= TXSTA
0015   1C80           00291 txwait  btfss           INDF,1      ; check TRMT bit in TXSTA (FSR)
0016   2815           00292         goto            txwait          ; TXREG full  or TRMT = 0 
                      00293                 
                      00294                 ; increment the table call location
0017   0FFC           00295                 incfsz          tableL,f
0018   280A           00296                 goto            sendTable
0019   0AFB           00297                 incf            tableH,f
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001A   280A           00298                 goto            sendTable
                      00299 
                      00300 
                      00301                 
                      00302 ; This ia calle by SendTable - don't use it directly or really ugly stuff will happen
001B                  00303 PRIVATEloadTableByte
001B   087B           00304                 movf            tableH,w
001C   008A           00305                 movwf           PCLATH
001D   087C           00306                 movf            tableL,w
001E   0082           00307                 movwf           PCL                     ; this is the eqivilent to the call to the table
001F   0008           00308                 return                                  ; This return should never be executed - return
                      00309                                                                 ;    will be to the location that dit th
                            e call the loadTableByte
                      00310 
                      00311 ; Subroutines go here so they are in page 0
                      00312 
                      00313 ; Subroutine ascii2byte 
                      00314 ; Reads exactly three ascii digits in the location pointed to by FSR,
                      00315 ;  FSR = 100s, FSR+1 = 10s, FSR+2 = 1s
                      00316 ; returns the value of the digits in variable numparm.  If the input is bad,
                      00317 ; variable FSR will contain the value 255 and numparm is undefined.
                      00318 ; If the input is good, numparm will contain the value of the input and 
                      00319 ; FSR will be zero.
                      00320 ; requires (and modifies):
                      00321 ;  temp2 - 1 byte
                      00322 ;  numparm - 1 byte
                      00323 
0020                  00324 ascii2byte
0020   01BD           00325                 clrf            numparm
                      00326 ; First extract out the value part
                      00327 ;  First digit
0021   3030           00328                 movlw           '0'                             ; sub ascii '0' = binary number
0022   0200           00329                 subwf           INDF,w
0023   00BF           00330                 movwf           temp2
                      00331                 
0024   3009           00332                 movlw           9
0025   1803           00333                 btfsc           STATUS,C
0026   282A           00334                 goto            $+4
Message[307]: Setting page bits.
0027   118A 120A 2854 00335                 lgoto           bad_input
                      00336 
002A   083F           00337                 movf            temp2,w
002B   07BD           00338                 addwf           numparm,f
                      00339 
                      00340                 ; multiply by 10 
002C   1003           00341                 bcf                     STATUS,C
002D   0DBD           00342                 rlf                     numparm,f               ; X 2
002E   1003           00343                 bcf                     STATUS,C
002F   0DBD           00344                 rlf                     numparm,f               ; x 4
0030   1003           00345                 bcf                     STATUS,C
0031   0DBD           00346                 rlf                     numparm,f               ; x 8
0032   083F           00347                 movf            temp2,w
0033   07BD           00348                 addwf           numparm,f                       ; x 9
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0034   07BD           00349                 addwf           numparm,f                       ; x 10
                      00350 
                      00351 ;  second digit
0035   0A84           00352                 incf            FSR,f
0036   3030           00353                 movlw           '0'                             ; sub ascii '0' = binary number
0037   0200           00354                 subwf           INDF,w
0038   00BF           00355                 movwf           temp2
                      00356                 
0039   3009           00357                 movlw           9
003A   1C03           00358                 btfss           STATUS,C
003B   2854           00359                 goto            bad_input
                      00360 
003C   083F           00361                 movf            temp2,w
003D   07BD           00362                 addwf           numparm,f
003E   083D           00363                 movf            numparm,w
003F   00BF           00364                 movwf           temp2
                      00365 
                      00366                 ; multiply by 10 
0040   1003           00367                 bcf                     STATUS,C
0041   0DBD           00368                 rlf                     numparm,f               ; X 2
0042   1003           00369                 bcf                     STATUS,C
0043   0DBD           00370                 rlf                     numparm,f               ; x 4
0044   1003           00371                 bcf                     STATUS,C
0045   0DBD           00372                 rlf                     numparm,f               ; x 8
0046   083F           00373                 movf            temp2,w
0047   07BD           00374                 addwf           numparm,f                       ; x 9
0048   07BD           00375                 addwf           numparm,f                       ; x 10
                      00376 
                      00377 ;  third digit
0049   0A84           00378                 incf            FSR,f
004A   3030           00379                 movlw           '0'                             ; sub ascii '0' = binary number
004B   0200           00380                 subwf           INDF,w
004C   00BF           00381                 movwf           temp2
                      00382                 
004D   3009           00383                 movlw           9
004E   1C03           00384                 btfss           STATUS,C
004F   2854           00385                 goto            bad_input
                      00386 
0050   083F           00387                 movf            temp2,w
0051   07BD           00388                 addwf           numparm,f
0052   0184           00389                 clrf            FSR
0053   0008           00390                 return
                      00391 
                      00392 ; jump point to return a bad input response
0054                  00393 bad_input
0054   30FF           00394                 movlw           255
0055   0084           00395                 movwf           FSR
0056   0008           00396                 return
                      00397                 
                      00398         
                      00399 ; gets subroutine to receive cr terminated string into buffer
                      00400 ;   if echochar is non-zero, it will be echoed instead of entered char
0057   01C0           00401 gets      clrf          rcvbufoff
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0058   1E8C           00402 wait2     btfss     PIR1,RCIF      ; Check RCIF  bit in PIR1 register
0059   2858           00403           goto      wait2          ; RCREG empty or RCIF = 0
005A   081A           00404           movf      RCREG,w        ; RCREG full or RCIF = 1
                      00405           ; store the received char 
005B   00C1           00406           movwf         rcvchar
                      00407           ; store the received char 
005C   00C1           00408           movwf         rcvchar
                      00409           ; check W for a CR - if found, get out
005D   3C0D           00410           sublw         CR
005E   1903           00411           btfsc         STATUS,Z
005F   2873           00412           goto          CRFound
                      00413 
                      00414                         ; echo either echochar (if non-zero), or actual char
0060   0854           00415                   movf          echochar,w
0061   1903           00416                   btfsc         STATUS,Z
0062   0841           00417                   movf          rcvchar,w
0063   0099           00418           movwf     TXREG
                      00419           
0064   0841           00420           movf          rcvchar,w
                      00421           ; check W for a LF - if found, skip it
0065   3C0A           00422           sublw         LF
0066   1903           00423           btfsc         STATUS,Z
0067   2858           00424           goto          wait2
                      00425           ; Store the received char into the buffer
0068   3042           00426           movlw         rcvbuffer
0069   0740           00427           addwf         rcvbufoff,w
006A   0084           00428           movwf         FSR
006B   0841           00429           movf          rcvchar,w
006C   0080           00430           movwf         INDF
006D   0AC0           00431           incf          rcvbufoff,f
                      00432           ; check recv buffer offset for max size - if so, start over
006E   0840           00433           movf          rcvbufoff,w
006F   3C0E           00434           sublw         rcvbuffer_size
0070   1D03           00435           btfss         STATUS,Z
0071   2858           00436           goto          wait2
                      00437          ; this is where we end up if at the end of the buffer
0072   2857           00438           goto          gets
                      00439           
                      00440                   ; when CR is found, write a 0 at buff position          
0073   3042           00441 CRFound   movlw         rcvbuffer
0074   0740           00442           addwf         rcvbufoff,w
0075   0084           00443           movwf         FSR
0076   0180           00444           clrf          INDF
                      00445           
                      00446 ; At this point, the entered string is in the buffer
                      00447 ;  ready to be tested.
                      00448 ;  on return, rcvbufoff 
                      00449 ;   contains the length of the received string
0077   0008           00450           return      
                      00451 
                      00452 ; subroutine serout - send the byte in W to serial port
0078   0099           00453 serout    movwf         TXREG
0079   3098           00454                   movlw         TXSTA
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007A   0084           00455           movwf     FSR            ; FSR <= TXSTA
007B   1C80           00456 wait1     btfss     INDF,1         ; check TRMT bit in TXSTA (FSR)
007C   287B           00457           goto      wait1          ; TXREG full  or TRMT = 0 
007D   0008           00458           return
                      00459 
                      00460 ; puts subroutine 
                      00461 ;   this will dump the 
                      00462 ;   null-terminated string at FSR to the serial port
                      00463                   
007E   0804           00464 puts      movf          FSR,w
007F   00F7           00465                   movwf         temp
0080   0800           00466 nextchar  movf          INDF,w
0081   1903           00467                   btfsc         STATUS,Z
0082   0008           00468                   return 
0083   2078           00469                   call          serout
0084   0AF7           00470                   incf          temp,f
0085   0877           00471                   movf          temp,w
0086   0084           00472                   movwf         FSR
0087   2880           00473                   goto          nextchar
                      00474 
                      00475 ;**********************************************************
                      00476 ; Convert time 1 byte to ASCII 2 bytes and send to display
                      00477 ; Input  : W - FSR points to 10s register
                      00478 ; Output : INDF 
                      00479 ;**********************************************************
0088   00D2           00480 BCD       movwf     B1             ; B1 = HHHH LLLL
0089   0E52           00481           swapf     B1,w           ; W  = LLLL HHHH
008A   390F           00482           andlw     0x0f           ; Mask upper four bits 0000 HHHH
008B   3E30           00483           addlw     0x30           ; convert to ASCII
008C   0080           00484           movwf         INDF           ; Store first digit
008D   0852           00485           movf      B1,w
008E   390F           00486           andlw     0x0f           ; w  = 0000 LLLL
008F   3E30           00487           addlw     0x30           ; convert to ASCII
0090   0A84           00488           incf          FSR,f
0091   0080           00489           movwf         INDF
0092   0008           00490           return
                      00491 
                      00492 
                      00493 ; 16 bits to Ascii 5 digits routine
                      00494 ; modified to write directly to digits in bank-free storage (0x70-0x7f)
                      00495 ; Input is HI and LO (destroyed!) output is digits+0 to digits+4
                      00496 
                      00497 ; by Rich Leggitt with tweaks by Scott Dattalo and bugfix by Dmitry Kiryashov and Nikolai Golovchenko
                      00498 ; given 16 bit data in HI and LO, extract decimal digits
                      00499 ; requires one Output register called temp, HI and LO are destroyed.
                      00500 ; 42 instructions and less than 269 (or 252 with known_zero) instructions executed
                      00501 
                      00502 ; use the s16b2ascii entry point for a signed -32767 to 32767 calculation
0093                  00503 s16b2ascii
                      00504 ; added sign logic
0093   1FF8           00505                 btfss   HI,7
0094   289E           00506                 goto    positive
                      00507                 ; negative if we get here
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0095   302D           00508                 movlw   '-'
0096   00F0           00509                 movwf   sign
0097   09F8           00510                 comf    HI,f
0098   09F9           00511                 comf    LO,f
                      00512                 
0099   3001           00513                 movlw   1
009A   07F9           00514                 addwf   LO,f
009B   1803           00515                 btfsc   STATUS,C
009C   0AF8           00516                 incf    HI,f
                      00517 
009D   28A0           00518                 goto    c16b2ascii
                      00519 
009E                  00520 positive
009E   3020           00521                 movlw   ' '
009F   00F0           00522                 movwf   sign
                      00523 
                      00524 ; entry point for an unsigned 0-65535 calculation
00A0                  00525 c16b2ascii 
00A0   01F7           00526                 clrf    temp
00A1   28A3           00527         goto $+2                ;[NG] was: skip
00A2   0AF7           00528 sub10k  incf temp,f
00A3   3010           00529                 movlw D'10000' & D'255'
00A4   02F9           00530         subwf LO,f
                      00531 
00A5   0D76           00532         rlf     known_zero,W
00A6   3C28           00533         sublw   (D'10000'>>8)+1    ;bugfix by Dmitry Kiryashov and Nikolai Golovchenko
00A7   02F8           00534         subwf   HI,F
                      00535         
00A8   1803 28A2      00536         bc sub10k               ;9*7=63/8*7=56 inst in loop for 60900 (worst)
00AA   0877           00537         movf    temp,w
00AB   00F1           00538         movwf   digits+0
                      00539 
00AC   300A           00540         movlw D'10'
00AD   00F7           00541         movwf temp
00AE   03F7           00542 add1K   decf temp,f
00AF   30E8           00543         movlw D'1000' & D'255'
00B0   07F9           00544         addwf LO,f
                      00545 
00B1   0D76           00546         rlf   known_zero,w
00B2   3E03           00547         addlw D'1000' >> 8
00B3   07F8           00548         addwf HI,f
                      00549         
00B4   1C03 28AE      00550         bnc add1K               ;9*10=90/8*10=80 inst in loop for 60900
00B6   0877           00551         movf    temp,w
00B7   00F2           00552         movwf   digits+1
                      00553 
                      00554 ;Scott takes over here
00B8   01F7           00555         clrf  temp
00B9   3064           00556         movlw D'100'
00BA   28BC           00557         goto $+2                ;[NG] was: skip
00BB                  00558 sub100
00BB   0AF7           00559         incf  temp,f
00BC   02F9           00560         subwf LO,f
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00BD   1803           00561         skpnc                   ;[NG] was: skpc
00BE   28BB           00562         goto sub100
                      00563 
00BF   03F8           00564         decf  HI,f
00C0   1FF8           00565         btfss HI,7      ;Check msb instead of carry for underflow.
00C1   28BB           00566         goto sub100     ;4 inst per loop to 200 then 7 per loop to 900. 
                      00567                         ;Total 64(?) in loop for worst case
                      00568 
                      00569 ;at this point, HI = 0xff, and  0 <= LO <= 99
                      00570 
00C2   0877           00571         movf    temp,w
00C3   00F3           00572         movwf   digits+2
                      00573 
00C4   300A           00574         movlw D'10'
00C5   00F7           00575         movwf temp
00C6   03F7           00576 add10   decf temp,f
00C7   07F9           00577         addwf LO,f
00C8   1C03 28C6      00578         bnc add10               ;40 inst in loop for worst case.
00CA   0877           00579         movf    temp,w
00CB   00F4           00580         movwf   digits+3
00CC   0879           00581         movf    LO,w
00CD   00F5           00582         movwf   digits+4
00CE   3030           00583                 movlw   '0'
00CF   07F1           00584                 addwf   digits+0,f              ; convert to ASCII
00D0   07F2           00585                 addwf   digits+1,f
00D1   07F3           00586                 addwf   digits+2,f
00D2   07F4           00587                 addwf   digits+3,f
00D3   07F5           00588                 addwf   digits+4,f
00D4   0008           00589         return
                      00590 
                      00591 ; Subroutine: calculateStep
                      00592 ;  in:   axisOffset = which axis to increment
                      00593 ;        xdirection+axisOffset = Direction (0=clockwise, 1=counterclockwise)
                      00594 ;  i/o:  xcoils+axisOffset = location of current motor coil controls
                      00595 ;  Temp Variables:
                      00596 ;        temp
                      00597 ;        FSR
                      00598 
00D5                  00599 calculateStep
                      00600         ; Step Sequence - CW: b'1010', b'0110', b'0101',b'1001'  - CCW: b'1001',b'0101',b'0110',b'1010'
                      00601 
00D5   3035           00602                 movlw   xdirection
00D6   0755           00603                 addwf   axisOffset,w
00D7   0084           00604                 movwf   FSR                             ; FSR = xdirection+axisOffset
00D8   0800           00605                 movf    INDF,w  
00D9   00F7           00606                 movwf   temp                    ; store the direction
                      00607 
00DA   3029           00608                 movlw   xcoils
00DB   0755           00609                 addwf   axisOffset,w
00DC   0084           00610                 movwf   FSR                             ; FSR = xcoils+axisOffset
                      00611 
00DD   0800           00612                 movf    INDF,w
                      00613 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00DE   3C0A           00614         sublw   b'1010'         ;Check motor position
00DF   1D03 28E7      00615         bnz     drive2          ;Unmatch
00E1   1877           00616         btfsc   temp,0                  ; Check direction
00E2   28E5           00617         goto    drive1          ;Set = CCW
00E3   3006           00618         movlw   b'0110'         ;No. Set CW data
00E4   2906           00619         goto    drive_end       ;Jump to write
00E5                  00620 drive1
00E5   3009           00621         movlw   b'1001'                 ;Set CCW data
00E6   2906           00622         goto    drive_end       ;Jump to write
                      00623 ;-------
00E7                  00624 drive2
00E7   0800           00625                 movf    INDF,w
00E8   3C06           00626         sublw   b'0110'                 ;Check motor position
00E9   1D03 28F1      00627         bnz     drive4          ;Unmatch
00EB   1877           00628         btfsc   temp,0                  ; Check direction
00EC   28EF           00629         goto    drive3          ;Set = CCW
00ED   3005           00630         movlw   b'0101'         ;No. Set CW data
00EE   2906           00631         goto    drive_end       ;Jump to write
00EF                  00632 drive3
00EF   300A           00633         movlw   b'1010'                 ;Set CCW data
00F0   2906           00634         goto    drive_end       ;Jump to write
                      00635 ;-------
00F1                  00636 drive4
00F1   0800           00637                 movf    INDF,w
00F2   3C05           00638         sublw   b'0101'             ;Check motor position
00F3   1D03 28FB      00639         bnz     drive6          ;Unmatch
00F5   1877           00640         btfsc   temp,0                  ; Check direction
00F6   28F9           00641         goto    drive5          ;Set = CCW
00F7   3009           00642         movlw   b'1001'         ;No. Set CW data
00F8   2906           00643         goto    drive_end       ;Jump to write
00F9                  00644 drive5
00F9   3006           00645         movlw   b'0110'                 ;Set CCW data
00FA   2906           00646         goto    drive_end       ;Jump to write
                      00647 ;-------
00FB                  00648 drive6
00FB   0800           00649                 movf    INDF,w
00FC   3C09           00650         sublw   b'1001'             ;Check motor position
00FD   1D03 2905      00651         bnz     drive8          ;Unmatch
00FF   1877           00652         btfsc   temp,0                  ; Check direction
0100   2903           00653         goto    drive7          ;Set = CCW
0101   300A           00654         movlw   b'1010'         ;No. Set CW data
0102   2906           00655         goto    drive_end       ;Jump to write
0103                  00656 drive7
0103   3005           00657         movlw   b'0101'                 ;Set CCW data
0104   2906           00658         goto    drive_end       ;Jump to write
                      00659 ;-------
0105                  00660 drive8
0105   300A           00661         movlw   b'1010'            ;Compulsion setting - when nothing else matches - set first step
                      00662 
0106                  00663 drive_end
                      00664                 
0106   0080           00665         movwf   INDF           ;Write PORTA
0107   0008           00666                 return
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00667 
                      00668 
                      00669 ; Thanks to Peter Hemsley for the following code - it would take me forever to
                      00670 ;  create anything that would do it, and it would not have been efficient
                      00671 ; My revisons just replace D0 to D4 and NUMHI and NUMLO with my existing variables
                      00672 ;  digits (0-4) and HI / LO with the following defines:
                      00673 
                      00674 #define NUMLO LO
                      00675 #define NUMHI HI
                      00676 #define D4 digits+0
                      00677 #define D3 digits+1
                      00678 #define D2 digits+2
                      00679 #define D1 digits+3
                      00680 #define D0 digits+4
                      00681 
                      00682 ; digits are in this order: d4,d3,d2,d1,d0
                      00683 
                      00684 ; 5 digit decimal to 16 (17) bit binary. By Peter Hemsley, March 2003.
                      00685 ; Input decimal digits in D0 (LSD) to D4 (MSD)
                      00686 ; Output 16 bit binary in NUMHI and NUMLO
                      00687 ; No temporary variables required
                      00688 ; Code size: 33 instructions
                      00689 ; Execution time: 33 cycles (excluding Call and Return)
                      00690 ; Returns carry set if > 65535 (and NUMHI-LO MOD 65536)
                      00691 
0108                  00692 dec2bin16
0108   0874           00693     movf  D1,W        ; (D1 + D3) * 2
0109   0772           00694     addwf D3,W
010A   00F9           00695     movwf NUMLO
010B   0DF9           00696     rlf   NUMLO,F
                      00697 
010C   0E73           00698     swapf D2,W        ; + D2 * 16 + D2
010D   0773           00699     addwf D2,W
010E   07F9           00700     addwf LO,F
                      00701 
010F   0D71           00702     rlf   D4,W        ; + (D4 * 2 + D3) * 256
0110   0772           00703     addwf D3,W
0111   00F8           00704     movwf NUMHI
                      00705 
0112   0DF9           00706     rlf   NUMLO,F     ; * 2
0113   0DF8           00707     rlf   NUMHI,F
                      00708 
0114   0E72           00709     swapf D3,W        ; - D3 * 16
0115   02F9           00710     subwf LO,F
0116   1C03           00711     skpc
0117   03F8           00712     decf  NUMHI,F
                      00713 
0118   0E73           00714     swapf D2,W        ; + D2 * 16 + D1
0119   0774           00715     addwf D1,W
011A   07F9           00716     addwf NUMLO,F
011B   1803           00717     skpnc
011C   0AF8           00718     incf  NUMHI,F
                      00719 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

011D   0E71           00720     swapf D4,W        ; + D4 * 16 + D0
011E   0775           00721     addwf D0,W
                      00722 
011F   0DF9           00723     rlf   NUMLO,F     ; * 2
0120   0DF8           00724     rlf   NUMHI,F
                      00725 
0121   07F9           00726     addwf NUMLO,F
0122   1803           00727     skpnc
0123   0AF8           00728     incf  NUMHI,F
                      00729 
0124   0871           00730     movf  D4,W        ; - D4 * 256
0125   02F8           00731     subwf NUMHI,F
                      00732 
0126   0E71           00733     swapf D4,W        ; + D4 * 16 * 256 * 2
0127   07F8           00734     addwf NUMHI,F
0128   07F8           00735     addwf NUMHI,F
                      00736 
0129   0008           00737     return            ; Q.E.D.
                      00738 
                      00739 
                      00740 ; digits are in this order: d4,d3,d2,d1,d0
                      00741 
                      00742 ; 5 ASCII digits to 16 (17) bit binary. Calls dec2bin16
                      00743 ;  to do the hard work.
                      00744 ; Input ASCII digits in D0 (LSD) to D4 (MSD)
                      00745 ; Output 16 bit binary in NUMHI and NUMLO
                      00746 ; Returns carry set if > 65535 (and NUMHI-LO MOD 65536)
                      00747 
012A                  00748 digit2bin16
012A   30D0           00749                 movlw           0xD0            ;constant for -30 in hex
012B   07F1           00750                 addwf           digits+0,f
012C   07F2           00751                 addwf           digits+1,f
012D   07F3           00752                 addwf           digits+2,f
012E   07F4           00753                 addwf           digits+3,f
012F   07F5           00754                 addwf           digits+4,f
0130   2908           00755                 goto            dec2bin16
                      00756                 
                      00757 
                      00758 
                      00759 ;**********************************************************************
                      00760 ; Mainline - start of command processing
                      00761 ;**********************************************************************
0131                  00762 ready     
                      00763 
                      00764                   MacroSendTable        ready_prompt_table
0131   3001               M                 movlw           HIGH ready_prompt_table 
0132   00FB               M                 movwf           tableH
0133   303B               M                 movlw           LOW     ready_prompt_table
0134   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0135   118A 120A 200A     M                 lcall           sendTable
0138   3001               M                 movlw           HIGH $          ; restore the proper PCLATH
0139   008A               M                 movwf           PCLATH
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

013A   2940           00765                   goto          getcmdinp
                      00766                 
013B                  00767 ready_prompt_table
013B   340D 340A 3424 00768          dt                     CR,LF,"$ "
       3420 
013F   3400           00769              retlw              0
                      00770 
0140                  00771 getcmdinp
0140   2057           00772           call          gets
                      00773 
                      00774 ; added a CR,LF output here
0141   300D           00775                 movlw           CR
Message[307]: Setting page bits.
0142   118A 120A 2078 00776                 lcall           serout
                      00777                 ; no PCLATH reset because next instruction is long
0145   300A           00778                 movlw           LF
Message[307]: Setting page bits.
0146   118A 120A 2078 00779                 lcall           serout
0149   3001           00780             movlw               HIGH $
014A   008A           00781                 movwf           PCLATH
                      00782           
                      00783 ; main command processing goes right here          
                      00784 
014B                  00785 cmdnext   
014B   304D           00786                   movlw         'M'
014C   0242           00787                   subwf         rcvbuffer,w
014D   1903           00788                   btfsc         STATUS,Z
014E   2CC4           00789                   goto          move_cmd
                      00790 
014F   3043           00791                   movlw         'C'
0150   0242           00792                   subwf         rcvbuffer,w
0151   1903           00793                   btfsc         STATUS,Z
0152   29D2           00794                   goto          calibrate_cmd
                      00795 
0153   3053           00796                   movlw         'S'
0154   0242           00797                   subwf         rcvbuffer,w
0155   1903           00798                   btfsc         STATUS,Z
0156   2A14           00799                   goto          set_cmd
                      00800 
0157   304C           00801                   movlw         'L'
0158   0242           00802                   subwf         rcvbuffer,w
0159   1903           00803                   btfsc         STATUS,Z
015A   2A49           00804                   goto          list_cmd
                      00805 
015B   3048           00806                   movlw         'H'
015C   0242           00807                   subwf         rcvbuffer,w
015D   1903           00808                   btfsc         STATUS,Z
015E   299D           00809                   goto          holdcurrent_cmd
                      00810 
015F   3044           00811                   movlw         'D'
0160   0242           00812                   subwf         rcvbuffer,w
0161   1903           00813                   btfsc         STATUS,Z
0162   29BA           00814                   goto          drill_cmd
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00815 
0163   3056           00816                   movlw         'V'
0164   0242           00817                   subwf         rcvbuffer,w
0165   1903           00818                   btfsc         STATUS,Z
0166   29C6           00819                   goto          vacuum_cmd
                      00820 
0167   3042           00821                   movlw         'B'
0168   0242           00822                   subwf         rcvbuffer,w
0169   1903           00823                   btfsc         STATUS,Z
016A   2E35           00824                   goto          save_cmd
                      00825 
016B   303F           00826                   movlw         '?'
016C   0242           00827                   subwf         rcvbuffer,w
016D   1903           00828                   btfsc         STATUS,Z
016E   2E8F           00829                   goto          help_cmd
                      00830 
016F   3046           00831                   movlw         'F'
0170   0242           00832                   subwf         rcvbuffer,w
0171   1903           00833                   btfsc         STATUS,Z
0172   299A           00834                   goto          version_cmd
                      00835 
                      00836 ; this is where we end up if the command is not in the table
0173                  00837 bad_cmd
                      00838           
0173   3042           00839           movlw         rcvbuffer
0174   0084           00840           movwf         FSR
Message[307]: Setting page bits.
0175   118A 120A 207E 00841           lcall         puts
0178   3001           00842                   movlw         HIGH $
0179   008A           00843                   movwf         PCLATH
                      00844           
                      00845                   MacroSendTable        badcmd_table
017A   3001               M                 movlw           HIGH badcmd_table       
017B   00FB               M                 movwf           tableH
017C   3084               M                 movlw           LOW     badcmd_table
017D   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
017E   118A 120A 200A     M                 lcall           sendTable
0181   3001               M                 movlw           HIGH $          ; restore the proper PCLATH
0182   008A               M                 movwf           PCLATH
0183   2931           00846           goto          ready
                      00847 
0184                  00848 badcmd_table
0184   3420 342D 3420 00849          dt                     " - Invalid Command!",CR,LF
       3449 346E 3476 
       3461 346C 3469 
       3464 3420 3443 
       346F 346D 346D 
       3461 346E 3464 
       3421 340D 340A 
0199   3400           00850              retlw              0
                      00851 
                      00852 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00853 ; Command implementations go here
                      00854 
019A                  00855 version_cmd
                      00856                 ; report the version of the firmware (the end of startup actually)
Message[307]: Setting page bits.
019A   158A 120A 28EA 00857                 lgoto           greet
                      00858 
019D                  00859 holdcurrent_cmd
                      00860         ; Evaluate common third character (on/off) first
                      00861 
019D   3030           00862                 movlw           '0'
019E   0244           00863                 subwf           rcvbuffer+2,w
019F   00BF           00864                 movwf           temp2                   ; temp2 is now the input char - '0'; 0 for off, 
                            1 for on, somthing else for invalid
                      00865         
01A0   3C01           00866                 sublw           1                               ; compare to 1
01A1   1C03           00867                 btfss           STATUS,C
01A2   2973           00868                 goto            bad_cmd                 ; if gt 1 it is bad
                      00869 
                      00870                 ; if you got here, temp2 has either a 0 or 1 (for on or off)
                      00871                 ; figure out which axis
                      00872 
                      00873                 ; same logic for the offset to the axis (x=0,y=1,z=2)
                      00874                 
01A3   3058           00875                 movlw           'X'
01A4   0243           00876                 subwf           rcvbuffer+1,w
01A5   00BE           00877                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      00878 
01A6   3C02           00879                 sublw           2                               ; compare to 2
01A7   1C03           00880                 btfss           STATUS,C
01A8   2973           00881                 goto            bad_cmd                 ; if gt 2 it is bad
                      00882 
                      00883                 ; at this point, offset has the offset to the axis, temp2 has what to set it to
                      00884 
01A9   3026           00885                 movlw           xhold                   ; FSR = xhold + offset
01AA   0084           00886                 movwf           FSR
01AB   083E           00887                 movf            offset,w
01AC   0784           00888                 addwf           FSR,f
                      00889 
01AD   083F           00890                 movf            temp2,w
01AE   0080           00891                 movwf           INDF                    ; ^FSR = temp2
                      00892 
                      00893                 ; Now make sure it is all set the way it should be.
                      00894 
                      00895                 ; check the hold flags, if they are 0, turn off that motor
01AF   1C28           00896                 btfss           zhold,0
                      00897                 ; z holding current is off, clear PORTA
01B0   0185           00898                 clrf            PORTA
                      00899 
01B1   1826           00900                 btfsc           xhold,0
01B2   29B5           00901                 goto            hold_checky
                      00902         
                      00903                 ; x holding current is off
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01B3   300F           00904                 movlw           b'00001111'
01B4   0588           00905                 andwf           PORTD,f
                      00906 
01B5                  00907 hold_checky
01B5   1827           00908                 btfsc           yhold,0
01B6   29B9           00909                 goto            hold_end
                      00910         
                      00911                 ; y holding current is off
01B7   30F0           00912                 movlw           b'11110000'
01B8   0588           00913                 andwf           PORTD,f
                      00914                 
01B9                  00915 hold_end
01B9   2931           00916                 goto            ready
                      00917 
                      00918 
01BA                  00919 drill_cmd
                      00920 
01BA   3030           00921                 movlw           '0'
01BB   0243           00922                 subwf           rcvbuffer+1,w
01BC   00BF           00923                 movwf           temp2                   ; temp2 is now the input char - '0'; 0 for off, 
                            1 for on, somthing else for invalid
                      00924         
01BD   3C01           00925                 sublw           1                               ; compare to 1
01BE   1C03           00926                 btfss           STATUS,C
01BF   2973           00927                 goto            bad_cmd                 ; if gt 1 it is bad
                      00928 
                      00929                 ; if you got here, temp2 has either a 0 or 1 (for on or off)
01C0   083F           00930                 movf            temp2,w
01C1   00B8           00931                 movwf           drillRelay
                      00932 
01C2   1009           00933                 bcf                     PORTE,0         ; turn it off
01C3   1838           00934                 btfsc           drillRelay,0
01C4   1409           00935                 bsf                     PORTE,0         ; turn it on
                      00936                 
01C5   2931           00937                 goto            ready
                      00938 
                      00939 
01C6                  00940 vacuum_cmd
01C6   3030           00941                 movlw           '0'
01C7   0243           00942                 subwf           rcvbuffer+1,w
01C8   00BF           00943                 movwf           temp2                   ; temp2 is now the input char - '0'; 0 for off, 
                            1 for on, somthing else for invalid
                      00944         
01C9   3C01           00945                 sublw           1                               ; compare to 1
01CA   1C03           00946                 btfss           STATUS,C
01CB   2973           00947                 goto            bad_cmd                 ; if gt 1 it is bad
                      00948 
                      00949                 ; if you got here, temp2 has either a 0 or 1 (for on or off)
01CC   083F           00950                 movf            temp2,w
01CD   00B9           00951                 movwf           vacuumRelay
                      00952 
01CE   1089           00953                 bcf                     PORTE,1         ; turn it off
01CF   1839           00954                 btfsc           vacuumRelay,0
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01D0   1489           00955                 bsf                     PORTE,1         ; turn it on
                      00956                                 
01D1   2931           00957                 goto            ready
                      00958 
01D2                  00959 calibrate_cmd
                      00960                 ; figure out which axis
                      00961                 ;                  0123456789
                      00962                 ; Modify this to:  Cx=+nnnnn<cr> = Calibrate axis x (reset to 0 or specified value)
                      00963 
01D2   3058           00964                 movlw           'X'
01D3   0243           00965                 subwf           rcvbuffer+1,w
01D4   00BE           00966                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      00967 
01D5   3C02           00968                 sublw           2                               ; compare to 2
01D6   1C03           00969                 btfss           STATUS,C
01D7   2973           00970                 goto            bad_cmd                 ; if gt 2 it is bad
                      00971 
                      00972                 ; at this point, offset has the index of the axis
                      00973                 ; multiply times two because the location is two bytes
01D8   1003           00974                 bcf                     STATUS,C
01D9   0DBE           00975                 rlf                     offset,f
01DA   302C           00976                 movlw           xlocation                       ; FSR = xlocation+ (offset*2)
01DB   0084           00977                 movwf           FSR
01DC   083E           00978                 movf            offset,w
01DD   0784           00979                 addwf           FSR,f
                      00980 
                      00981                 ; Okay - so now the location to update is in the FSR
                      00982                 ;  next step is to put the correct offset in the INDF and INDF+1
                      00983 
                      00984                 ; Start with HI and LO cleared to zero, just in case
01DE   01F9           00985                 clrf            LO
01DF   01F8           00986                 clrf            HI
                      00987 
                      00988                 ; Did we get a specific value to set? !@#
                      00989 
01E0   0844           00990                 movf            rcvbuffer+2,w
01E1   3C3D           00991                 sublw           '='
01E2   1D03           00992                 btfss           STATUS,Z
01E3   2A0E           00993                 goto            loadAxisLocation
                      00994 
                      00995                 ;set a sign
                      00996 
                      00997                 ; sign is going to contain a 1 for negative, 0 for positive
01E4   01F0           00998                 clrf            sign
                      00999 
01E5   0845           01000                 movf            rcvbuffer+3,w
01E6   3C2D           01001                 sublw           '-'
01E7   1D03           01002                 btfss           STATUS,Z
01E8   29EB           01003                 goto            calbCheckPlus
                      01004 
01E9   1470           01005                 bsf                     sign,0
01EA   29FA           01006                 goto            calbLoadDigits
                      01007 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01EB                  01008 calbCheckPlus
01EB   0845           01009                 movf            rcvbuffer+3,w
01EC   3C2B           01010                 sublw           '+'
01ED   1903           01011                 btfsc           STATUS,Z
01EE   29FA           01012                 goto            calbLoadDigits
                      01013 
                      01014                 ; Load the digits starting from rcvbuffer+3 (no sign)
01EF   0845           01015                 movf            rcvbuffer+3,w
01F0   00F1           01016                 movwf           digits+0
                      01017 
01F1   0846           01018                 movf            rcvbuffer+4,w
01F2   00F2           01019                 movwf           digits+1
                      01020 
01F3   0847           01021                 movf            rcvbuffer+5,w
01F4   00F3           01022                 movwf           digits+2
                      01023 
01F5   0848           01024                 movf            rcvbuffer+6,w
01F6   00F4           01025                 movwf           digits+3
                      01026 
01F7   0849           01027                 movf            rcvbuffer+7,w
01F8   00F5           01028                 movwf           digits+4
01F9   2A04           01029                 goto            calbdigits
                      01030 
                      01031                 ; Now load the digits from rcvbuffer+4 (there was a sign)
01FA                  01032 calbLoadDigits
                      01033 
01FA   0846           01034                 movf            rcvbuffer+4,w
01FB   00F1           01035                 movwf           digits+0
                      01036 
01FC   0847           01037                 movf            rcvbuffer+5,w
01FD   00F2           01038                 movwf           digits+1
                      01039 
01FE   0848           01040                 movf            rcvbuffer+6,w
01FF   00F3           01041                 movwf           digits+2
                      01042 
0200   0849           01043                 movf            rcvbuffer+7,w
0201   00F4           01044                 movwf           digits+3
                      01045 
0202   084A           01046                 movf            rcvbuffer+8,w
0203   00F5           01047                 movwf           digits+4
                      01048                 
0204                  01049 calbdigits
                      01050 
Message[307]: Setting page bits.
0204   118A 120A 212A 01051                 lcall           digit2bin16
                      01052 
                      01053                 ; now negate it if the sign is negative
0207   1C70           01054                 btfss           sign,0
0208   2A0E           01055                 goto            loadAxisLocation
                      01056 
0209   09F9           01057         comf            LO,f    ;Complement all bytes
020A   09F8           01058         comf            HI,f
                      01059 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

020B   0AF9           01060         incf            LO,f    ;Inc. low byte always
020C   1903           01061         skpnz                           ;Skip if no carry to higher bytes
020D   0AF8           01062         incf            HI,f    ;Carry to next byte
                      01063 
020E                  01064 loadAxisLocation
020E   0878           01065                 movf            HI,w
020F   0080           01066                 movwf           INDF
0210   0A84           01067                 incf            FSR,f
0211   0879           01068                 movf            LO,w
0212   0080           01069                 movwf           INDF
                      01070                 
0213   2931           01071                 goto            ready
                      01072 
                      01073 
0214                  01074 set_cmd
                      01075 ; Command processor for: " SDx+nnn<cr> = Set Delay for axis x +/-/= nnn delay",CR,LF
                      01076 ; and                    " SIx=nnn<cr> = Set Inch size on axis x to nnn steps",CR,LF
                      01077 
0214   3046           01078                 movlw           rcvbuffer+4
0215   0084           01079                 movwf           FSR
Message[307]: Setting page bits.
0216   118A 120A 2020 01080                 lcall           ascii2byte
0219   1804           01081                 btfsc           FSR,0
021A   2973           01082                 goto            bad_cmd
                      01083 
                      01084                 ; figure out which axis
                      01085 
021B   3058           01086                 movlw           'X'
021C   0244           01087                 subwf           rcvbuffer+2,w
021D   00BE           01088                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      01089 
021E   3C02           01090                 sublw           2                               ; compare to 2
021F   1C03           01091                 btfss           STATUS,C
0220   2973           01092                 goto            bad_cmd                 ; if gt 2 it is bad
                      01093 
                      01094                 ; at this point, offset has the index of the axis
                      01095 
                      01096                 ; now figure out which value should be changed (put it in FSR)
0221   0843           01097                 movf    rcvbuffer+1,w
0222   00BF           01098                 movwf   temp2
                      01099 
0223   3049           01100                 movlw   'I'
0224   023F           01101                 subwf   temp2,w
0225   1D03           01102                 btfss   STATUS,Z
0226   2A2A           01103                 goto    not_an_I
                      01104                 
0227   3023           01105                 movlw   xinch
0228   0084           01106                 movwf   FSR
0229   2A30           01107                 goto    set_value
                      01108 
022A                  01109 not_an_I
022A   3044           01110                 movlw   'D'
022B   023F           01111                 subwf   temp2,w
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

022C   1D03           01112                 btfss   STATUS,Z
022D   2973           01113                 goto    bad_cmd
                      01114                                 
022E   3020           01115                 movlw   xdelay
022F   0084           01116                 movwf   FSR
                      01117 
0230                  01118 set_value
                      01119 
0230   083E           01120                 movf    offset,w        ; FSR = FSR + offset
0231   0784           01121                 addwf   FSR,f
                      01122 
                      01123                 ; now deal with the value
0232   0845           01124                 movf    rcvbuffer+3,w
0233   00BF           01125                 movwf   temp2
                      01126 
0234   303D           01127                 movlw   '='
0235   023F           01128                 subwf   temp2,w
0236   1D03           01129                 btfss   STATUS,Z
0237   2A3B           01130                 goto    set_not_an_equal
                      01131 
                      01132         ; process = numparm
0238   083D           01133                 movf    numparm,w       ; ^FSR = numparm
0239   0080           01134                 movwf   INDF
023A   2931           01135                 goto    ready
                      01136                 
023B                  01137 set_not_an_equal
023B   302B           01138                 movlw   '+'
023C   023F           01139                 subwf   temp2,w
023D   1D03           01140                 btfss   STATUS,Z
023E   2A42           01141                 goto    set_not_a_plus
                      01142 
                      01143         ; process + numparm
023F   083D           01144                 movf    numparm,w       ; ^FSR += numparm
0240   0780           01145                 addwf   INDF,f
0241   2931           01146                 goto    ready
                      01147 
                      01148 
0242                  01149 set_not_a_plus
0242   302D           01150                 movlw   '-'
0243   023F           01151                 subwf   temp2,w
0244   1D03           01152                 btfss   STATUS,Z
0245   2973           01153                 goto    bad_cmd
                      01154 
                      01155         ; process - numparm
0246   083D           01156                 movf    numparm,w       ; ^FSR -= numparm
0247   0280           01157                 subwf   INDF,f
0248   2931           01158                 goto    ready
                      01159 
                      01160 
0249                  01161 list_cmd
                      01162 ; Dumps current status like:
                      01163 ;(X) Axis: Location: (xlocation)  Delay: (xdelay) Steps Per Inch: (xinch)  Holding Current: (xhold)
                      01164 ;Y Axis: Location: nnnnn  Delay: xxx  Steps Per Inch: xxx  Holding Current: 0
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01165 ;Z Axis: Location: nnnnn  Delay: xxx  Steps Per Inch: xxx  Holding Current: 0
                      01166 ;Drill=0
                      01167 ;Vacuum=0
                      01168 
0249   01D5           01169                 clrf            axisOffset
                      01170 
024A                  01171 list_next_axis
024A   3003           01172                 movlw           3
024B   0255           01173                 subwf           axisOffset,w
024C   1803           01174                 btfsc           STATUS,C
024D   2B0E           01175                 goto            list_axis_done
                      01176 
024E   3058           01177                 movlw           'X'
024F   0755           01178                 addwf           axisOffset,w    ; ' results in w = 'X','Y',or 'Z'
                      01179 
Message[307]: Setting page bits.
0250   118A 120A 2078 01180                 lcall           serout                  ; print the axis
0253   3002           01181                 movlw           HIGH $
0254   008A           01182                 movwf           PCLATH
                      01183                 
                      01184                 MacroSendTable  location_table
0255   3002               M                 movlw           HIGH location_table     
0256   00FB               M                 movwf           tableH
0257   3061               M                 movlw           LOW     location_table
0258   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0259   118A 120A 200A     M                 lcall           sendTable
025C   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
025D   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
025E   118A 120A 2A73 01185           lgoto         list_part2
                      01186 
0261                  01187 location_table
0261   3420 3441 3478 01188                 dt                      " Axis: Location: "
       3469 3473 343A 
       3420 344C 346F 
       3463 3461 3474 
       3469 346F 346E 
       343A 3420 
0272   3400           01189                 retlw           0
                      01190 
0273                  01191 list_part2
                      01192 
                      01193                 ; dump the location
0273   0855           01194                 movf            axisOffset,w
0274   0084           01195                 movwf           FSR
0275   1003           01196                 bcf                     STATUS,C
0276   0D84           01197                 rlf                     FSR,f                   ; FSR = axisOffset*2
0277   302C           01198                 movlw           xlocation               ; FSR += xlocation
0278   0784           01199                 addwf           FSR,f
                      01200 
0279   0800           01201                 movf            INDF,w
027A   00F8           01202                 movwf           HI
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01203 
027B   0A84           01204                 incf            FSR,f
027C   0800           01205                 movf            INDF,w
027D   00F9           01206                 movwf           LO
                      01207 
Message[307]: Setting page bits.
027E   118A 120A 2093 01208                 lcall           s16b2ascii      ; converts signed value to ascii in sign + digits:5
                      01209                 ; no PCLATH reset because next instruction is long
                      01210 
0281   3070           01211                 movlw           sign
0282   0084           01212                 movwf           FSR
Message[307]: Setting page bits.
0283   118A 120A 207E 01213                 lcall           puts            ; show the digits on the screen
                      01214                 ; no PCLATH reset because next instruction is long
                      01215                 
                      01216                 
                      01217                 MacroSendTable  delay_table
0286   3002               M                 movlw           HIGH delay_table        
0287   00FB               M                 movwf           tableH
0288   3092               M                 movlw           LOW     delay_table
0289   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
028A   118A 120A 200A     M                 lcall           sendTable
028D   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
028E   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
028F   118A 120A 2A9C 01218          lgoto          list_part3
                      01219 
0292                  01220 delay_table
0292   3420 3420 3444 01221                 dt                      "  Delay: "
       3465 346C 3461 
       3479 343A 3420 
029B   3400           01222                 retlw           0
                      01223 
029C                  01224 list_part3
                      01225 
                      01226 
                      01227                 ; dump the delay
029C   3020           01228                 movlw           xdelay
029D   0084           01229                 movwf           FSR
029E   0855           01230                 movf            axisOffset,w            ; FSR = xlocation+axisOffset
029F   0784           01231                 addwf           FSR,f
                      01232 
02A0   01F8           01233                 clrf            HI
                      01234 
02A1   0800           01235                 movf            INDF,w
02A2   00F9           01236                 movwf           LO
                      01237 
Message[307]: Setting page bits.
02A3   118A 120A 20A0 01238                 lcall           c16b2ascii      ; converts to ascii in digits:5
                      01239                 ; no PCLATH reset because next instruction is long
                      01240 
02A6   3073           01241                 movlw           digits+2        ; only use last three digits
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02A7   0084           01242                 movwf           FSR
Message[307]: Setting page bits.
02A8   118A 120A 207E 01243                 lcall           puts            ; show the digits on the screen
                      01244                 ; no PCLATH reset because next instruction is long
                      01245 
                      01246 
                      01247                 MacroSendTable  inch_table
02AB   3002               M                 movlw           HIGH inch_table         
02AC   00FB               M                 movwf           tableH
02AD   30B7               M                 movlw           LOW     inch_table
02AE   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
02AF   118A 120A 200A     M                 lcall           sendTable
02B2   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
02B3   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
02B4   118A 120A 2ACA 01248          lgoto          list_part4
                      01249 
02B7                  01250 inch_table
02B7   3420 3420 3453 01251                 dt                      "  Steps per Inch: "
       3474 3465 3470 
       3473 3420 3470 
       3465 3472 3420 
       3449 346E 3463 
       3468 343A 3420 
02C9   3400           01252                 retlw           0
                      01253 
02CA                  01254 list_part4
                      01255 
                      01256                 ; dump the steps per inch
02CA   3023           01257                 movlw           xinch
02CB   0084           01258                 movwf           FSR
02CC   0855           01259                 movf            axisOffset,w            ; FSR = xlocation+axisOffset
02CD   0784           01260                 addwf           FSR,f
                      01261 
02CE   01F8           01262                 clrf            HI
                      01263 
02CF   0800           01264                 movf            INDF,w
02D0   00F9           01265                 movwf           LO
                      01266 
Message[307]: Setting page bits.
02D1   118A 120A 20A0 01267                 lcall           c16b2ascii      ; converts to ascii in digits:5
                      01268                 ; no PCLATH reset because next instruction is long
                      01269 
02D4   3073           01270                 movlw           digits+2        ; only use last three digits
02D5   0084           01271                 movwf           FSR
Message[307]: Setting page bits.
02D6   118A 120A 207E 01272                 lcall           puts            ; show the digits on the screen
                      01273                 ; no PCLATH reset because next instruction is long
                      01274 
                      01275 
                      01276                 MacroSendTable  holding_table
02D9   3002               M                 movlw           HIGH holding_table      
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

02DA   00FB               M                 movwf           tableH
02DB   30E5               M                 movlw           LOW     holding_table
02DC   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
02DD   118A 120A 200A     M                 lcall           sendTable
02E0   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
02E1   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
02E2   118A 120A 2AF9 01277          lgoto          list_part5
                      01278 
02E5                  01279 holding_table
02E5   3420 3420 3448 01280                 dt                      "  Holding Current: "
       346F 346C 3464 
       3469 346E 3467 
       3420 3443 3475 
       3472 3472 3465 
       346E 3474 343A 
       3420 
02F8   3400           01281                 retlw           0
                      01282 
02F9                  01283 list_part5
                      01284                 ; Dump the holding current setting
02F9   3026           01285                 movlw           xhold
02FA   0084           01286                 movwf           FSR
02FB   0855           01287                 movf            axisOffset,w            ; FSR = xlocation+axisOffset
02FC   0784           01288                 addwf           FSR,f
                      01289 
02FD   3030           01290                 movlw           '0'                                     ; convert to ASCII number
02FE   0700           01291                 addwf           INDF,w
Message[307]: Setting page bits.
02FF   118A 120A 2078 01292                 lcall           serout
                      01293                 ; no PCLATH reset because next instruction is long
                      01294 
0302   300D           01295                 movlw           CR
Message[307]: Setting page bits.
0303   118A 120A 2078 01296                 lcall           serout
                      01297                 ; no PCLATH reset because next instruction is long
0306   300A           01298                 movlw           LF
Message[307]: Setting page bits.
0307   118A 120A 2078 01299                 lcall           serout
                      01300                 ; no PCLATH reset because next instruction is long
                      01301 
030A   0AD5           01302                 incf            axisOffset,f
Message[307]: Setting page bits.
030B   118A 120A 2A4A 01303                 lgoto           list_next_axis
                      01304 
030E                  01305 list_axis_done
                      01306 
                      01307                 MacroSendTable  drill_table
030E   3003               M                 movlw           HIGH drill_table        
030F   00FB               M                 movwf           tableH
0310   3018               M                 movlw           LOW     drill_table
0311   00FC               M                 movwf           tableL
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[307]: Setting page bits.
0312   118A 120A 200A     M                 lcall           sendTable
0315   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0316   008A               M                 movwf           PCLATH
0317   2B1F           01308          goto           list_part6
                      01309 
0318                  01310 drill_table
0318   3444 3472 3469 01311                 dt                      "Drill="
       346C 346C 343D 
031E   3400           01312                 retlw           0
                      01313 
031F                  01314 list_part6
                      01315                 ; Dump the drill relay status
031F   3030           01316                 movlw           '0'                                     ; convert to ASCII number
0320   0738           01317                 addwf           drillRelay,w
Message[307]: Setting page bits.
0321   118A 120A 2078 01318                 lcall           serout
                      01319                 ; no PCLATH reset because next instruction is long
                      01320 
                      01321                 MacroSendTable  vacuum_table
0324   3003               M                 movlw           HIGH vacuum_table       
0325   00FB               M                 movwf           tableH
0326   3030               M                 movlw           LOW     vacuum_table
0327   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0328   118A 120A 200A     M                 lcall           sendTable
032B   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
032C   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
032D   118A 120A 2B3A 01322          lgoto          list_part7
                      01323 
0330                  01324 vacuum_table
0330   340D 340A 3456 01325                 dt                      CR,LF,"Vacuum="
       3461 3463 3475 
       3475 346D 343D 
0339   3400           01326                 retlw           0
                      01327 
033A                  01328 list_part7
                      01329                 ; Dump the vacuum relay status
033A   3030           01330                 movlw           '0'                                     ; convert to ASCII number
033B   0739           01331                 addwf           vacuumRelay,w
Message[307]: Setting page bits.
033C   118A 120A 2078 01332                 lcall           serout
                      01333                 ; no PCLATH reset because next instruction is long
                      01334 
033F                  01335 dump_limits
                      01336 ; Dump X axis limit switches
                      01337 
                      01338                 MacroSendTable  limit_table
033F   3003               M                 movlw           HIGH limit_table        
0340   00FB               M                 movwf           tableH
0341   304B               M                 movlw           LOW     limit_table
0342   00FC               M                 movwf           tableL
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[307]: Setting page bits.
0343   118A 120A 200A     M                 lcall           sendTable
0346   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0347   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0348   118A 120A 2B5C 01339                 lgoto           list_part8
                      01340 
034B                  01341 limit_table
034B   340D 340A 344C 01342                 dt                      CR,LF,"Limit Switch: "
       3469 346D 3469 
       3474 3420 3453 
       3477 3469 3474 
       3463 3468 343A 
       3420 
035B   3400           01343                 retlw           0
                      01344 
035C                  01345 list_part8
035C   3058           01346                 movlw           'X'
Message[307]: Setting page bits.
035D   118A 120A 2078 01347                 lcall           serout
                      01348                 ; no PCLATH reset because next instruction is long
                      01349 
                      01350                 MacroSendTable  min_table
0360   3003               M                 movlw           HIGH min_table          
0361   00FB               M                 movwf           tableH
0362   306C               M                 movlw           LOW     min_table
0363   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0364   118A 120A 200A     M                 lcall           sendTable
0367   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0368   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0369   118A 120A 2B77 01351                 lgoto           list_part9
                      01352 
036C                  01353 min_table
036C   342D 3461 3478 01354                 dt                      "-axis min="
       3469 3473 3420 
       346D 3469 346E 
       343D 
0376   3400           01355                 retlw           0
                      01356 
0377                  01357 list_part9
0377   3030           01358                 movlw           '0'
0378   1C07           01359                 btfss           PORTC,0
0379   3031           01360                 movlw           '1'
Message[307]: Setting page bits.
037A   118A 120A 2078 01361                 lcall           serout
                      01362                 ; no PCLATH reset because next instruction is long
                      01363 
                      01364                 MacroSendTable  max_table
037D   3003               M                 movlw           HIGH max_table          
037E   00FB               M                 movwf           tableH
037F   3089               M                 movlw           LOW     max_table
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0380   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0381   118A 120A 200A     M                 lcall           sendTable
0384   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0385   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0386   118A 120A 2B8F 01365                 lgoto           list_part10
                      01366 
0389                  01367 max_table
0389   3420 346D 3461 01368                 dt                      " max="
       3478 343D 
038E   3400           01369                 retlw           0
                      01370 
038F                  01371 list_part10
038F   3030           01372                 movlw           '0'
0390   1C87           01373                 btfss           PORTC,1
0391   3031           01374                 movlw           '1'
Message[307]: Setting page bits.
0392   118A 120A 2078 01375                 lcall           serout
                      01376                 ; no PCLATH reset because next instruction is long
                      01377                 
                      01378 ; Dump Y axis limit switches
                      01379 
                      01380                 MacroSendTable  limit_table
0395   3003               M                 movlw           HIGH limit_table        
0396   00FB               M                 movwf           tableH
0397   304B               M                 movlw           LOW     limit_table
0398   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0399   118A 120A 200A     M                 lcall           sendTable
039C   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
039D   008A               M                 movwf           PCLATH
                      01381 
039E   3059           01382                 movlw           'Y'
Message[307]: Setting page bits.
039F   118A 120A 2078 01383                 lcall           serout
                      01384                 ; no PCLATH reset because next instruction is long
                      01385 
                      01386                 MacroSendTable  min_table
03A2   3003               M                 movlw           HIGH min_table          
03A3   00FB               M                 movwf           tableH
03A4   306C               M                 movlw           LOW     min_table
03A5   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
03A6   118A 120A 200A     M                 lcall           sendTable
03A9   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
03AA   008A               M                 movwf           PCLATH
                      01387 
03AB   3030           01388                 movlw           '0'
03AC   1D07           01389                 btfss           PORTC,2
03AD   3031           01390                 movlw           '1'
Message[307]: Setting page bits.
03AE   118A 120A 2078 01391                 lcall           serout
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01392                 ; no PCLATH reset because next instruction is long
                      01393 
                      01394                 MacroSendTable  max_table
03B1   3003               M                 movlw           HIGH max_table          
03B2   00FB               M                 movwf           tableH
03B3   3089               M                 movlw           LOW     max_table
03B4   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
03B5   118A 120A 200A     M                 lcall           sendTable
03B8   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
03B9   008A               M                 movwf           PCLATH
03BA   3030           01395                 movlw           '0'
03BB   1E87           01396                 btfss           PORTC,5
03BC   3031           01397                 movlw           '1'
Message[307]: Setting page bits.
03BD   118A 120A 2078 01398                 lcall           serout
                      01399                 ; no PCLATH reset because next instruction is long
                      01400                 
                      01401 ; Dump Z axis limit switches
                      01402 
                      01403                 MacroSendTable  limit_table
03C0   3003               M                 movlw           HIGH limit_table        
03C1   00FB               M                 movwf           tableH
03C2   304B               M                 movlw           LOW     limit_table
03C3   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
03C4   118A 120A 200A     M                 lcall           sendTable
03C7   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
03C8   008A               M                 movwf           PCLATH
                      01404 
03C9   305A           01405                 movlw           'Z'
Message[307]: Setting page bits.
03CA   118A 120A 2078 01406                 lcall           serout
                      01407                 ; no PCLATH reset because next instruction is long
                      01408 
                      01409                 MacroSendTable  min_table
03CD   3003               M                 movlw           HIGH min_table          
03CE   00FB               M                 movwf           tableH
03CF   306C               M                 movlw           LOW     min_table
03D0   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
03D1   118A 120A 200A     M                 lcall           sendTable
03D4   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
03D5   008A               M                 movwf           PCLATH
                      01410 
03D6   3030           01411                 movlw           '0'
03D7   1E05           01412                 btfss           PORTA,4
03D8   3031           01413                 movlw           '1'
Message[307]: Setting page bits.
03D9   118A 120A 2078 01414                 lcall           serout
                      01415                 ; no PCLATH reset because next instruction is long
                      01416 
                      01417                 MacroSendTable  max_table
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

03DC   3003               M                 movlw           HIGH max_table          
03DD   00FB               M                 movwf           tableH
03DE   3089               M                 movlw           LOW     max_table
03DF   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
03E0   118A 120A 200A     M                 lcall           sendTable
03E3   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
03E4   008A               M                 movwf           PCLATH
03E5   3030           01418                 movlw           '0'
03E6   1E85           01419                 btfss           PORTA,5
03E7   3031           01420                 movlw           '1'
Message[307]: Setting page bits.
03E8   118A 120A 2078 01421                 lcall           serout
                      01422                 ; no PCLATH reset because next instruction is long
                      01423 
Message[307]: Setting page bits.
03EB   118A 120A 2931 01424                 lgoto   ready
                      01425 
03EE                  01426 manual_cmd
                      01427 ; Implements: MN - Manual axis movement
                      01428 ;
                      01429 ; This starts moving any axis in any direction based on directional keystrokes.  Basically
                      01430 ;  each keystroke moves the specific axis and direction exactly one inch or until the 
                      01431 ;  next keystroke or a limit switch is activated.
                      01432 
03EE   1457           01433                 bsf                     manualMode,0    ; set manual mode on
                      01434 
                      01435                 MacroSendTable  manual_table
03EF   3003               M                 movlw           HIGH manual_table       
03F0   00FB               M                 movwf           tableH
03F1   30FB               M                 movlw           LOW     manual_table
03F2   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
03F3   118A 120A 200A     M                 lcall           sendTable
03F6   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
03F7   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
03F8   118A 120A 2C7A 01436          lgoto          manual_nextkey
                      01437 
03FB                  01438 manual_table
03FB   3455 3473 3465 01439                 dt                      "Use the following motion keys:",CR,LF,CR,LF
       3420 3474 3468 
       3465 3420 3466 
       346F 346C 346C 
       346F 3477 3469 
       346E 3467 3420 
       346D 346F 3474 
       3469 346F 346E 
       3420 346B 3465 
       3479 3473 343A 
       340D 340A 340D 
       340A 
041D   3420 3420 3451 01440                 dt                      "  Q(Z+)  W(Y+)",CR,LF
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3428 345A 342B 
       3429 3420 3420 
       3457 3428 3459 
       342B 3429 340D 
       340A 
042D   3420 3420 3441 01441                 dt                      "  A(X-)  S(Stop)   D(X+)",CR,LF
       3428 3458 342D 
       3429 3420 3420 
       3453 3428 3453 
       3474 346F 3470 
       3429 3420 3420 
       3420 3444 3428 
       3458 342B 3429 
       340D 340A 
0447   3420 3420 345A 01442                 dt                      "  Z(Z-)  X(Y-)",CR,LF,CR,LF
       3428 345A 342D 
       3429 3420 3420 
       3458 3428 3459 
       342D 3429 340D 
       340A 340D 340A 
0459   3450 3472 3465 01443                 dt                      "Press <sp> to exit manual mode",CR,LF
       3473 3473 3420 
       343C 3473 3470 
       343E 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3420 346D 3461 
       346E 3475 3461 
       346C 3420 346D 
       346F 3464 3465 
       340D 340A 
0479   3400           01444                 retlw           0
                      01445 
047A                  01446 manual_nextkey
                      01447         ; Make sure there is no overrun
047A   1C98           01448       btfss                     RCSTA,OERR              ; Check for an overrun
047B   2C7E           01449           goto                  manual_readkey
                      01450 
                      01451          ; Reset an overrun condition
047C   1218           01452           bcf                   RCSTA,CREN              ; Stop receiving
047D   1618           01453           bsf                   RCSTA,CREN          ; Re-start receiving
                      01454 
047E                  01455 manual_readkey
                      01456 
                      01457         ; get the next pressed key
047E   1E8C           01458        btfss            PIR1,RCIF      ; Check RCIF  bit in PIR1 register
047F   2C7A           01459        goto             manual_nextkey ; RCREG empty or RCIF = 0
                      01460 
0480                  01461 manual_keypress
                      01462         ; process the pressed key
0480   081A           01463        movf             RCREG,w        ; RCREG full or RCIF = 1
                      01464     ; store the received char 
0481   00C1           01465        movwf            rcvchar
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01466 
                      01467         ; Clear the movement registers
                      01468 
0482   01B2           01469                 clrf            xstepstogo
0483   01B3           01470                 clrf            ystepstogo
0484   01B4           01471                 clrf            zstepstogo
                      01472 
                      01473         ; process the instruction
                      01474 
0485   3053           01475                 movlw           'S'
0486   0241           01476                 subwf           rcvchar,w
0487   1903           01477                 btfsc           STATUS,Z
0488   2C7A           01478                 goto            manual_nextkey  ; S = stop and process next key
                      01479 
0489   3051           01480                 movlw           'Q'
048A   0241           01481                 subwf           rcvchar,w
048B   1903           01482                 btfsc           STATUS,Z
048C   2CA6           01483                 goto            manual_zplus
                      01484 
048D   305A           01485                 movlw           'Z'
048E   0241           01486                 subwf           rcvchar,w
048F   1903           01487                 btfsc           STATUS,Z
0490   2CAB           01488                 goto            manual_zminus
                      01489 
0491   3057           01490                 movlw           'W'
0492   0241           01491                 subwf           rcvchar,w
0493   1903           01492                 btfsc           STATUS,Z
0494   2CB0           01493                 goto            manual_yplus
                      01494 
0495   3058           01495                 movlw           'X'
0496   0241           01496                 subwf           rcvchar,w
0497   1903           01497                 btfsc           STATUS,Z
0498   2CB5           01498                 goto            manual_yminus
                      01499                 
0499   3041           01500                 movlw           'A'
049A   0241           01501                 subwf           rcvchar,w
049B   1903           01502                 btfsc           STATUS,Z
049C   2CBF           01503                 goto            manual_xminus
                      01504 
049D   3044           01505                 movlw           'D'
049E   0241           01506                 subwf           rcvchar,w
049F   1903           01507                 btfsc           STATUS,Z
04A0   2CBA           01508                 goto            manual_xplus
                      01509 
04A1   3020           01510                 movlw           ' '
04A2   0241           01511                 subwf           rcvchar,w
04A3   1903           01512                 btfsc           STATUS,Z
04A4   2931           01513                 goto            ready
                      01514 
04A5   2C7A           01515                 goto            manual_nextkey
                      01516 
                      01517 
                      01518 ; Now the specific directional moves
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01519 
04A6                  01520 manual_zplus
04A6   3000           01521                 movlw           0
04A7   00B7           01522                 movwf           zdirection
04A8   0825           01523                 movf            zinch,w
04A9   00B4           01524                 movwf           zstepstogo
04AA   2D18           01525                 goto            initXYMovement
                      01526 
04AB                  01527 manual_zminus
04AB   3001           01528                 movlw           1
04AC   00B7           01529                 movwf           zdirection
04AD   0825           01530                 movf            zinch,w
04AE   00B4           01531                 movwf           zstepstogo
04AF   2D18           01532                 goto            initXYMovement
                      01533 
04B0                  01534 manual_yplus
04B0   3000           01535                 movlw           0
04B1   00B6           01536                 movwf           ydirection
04B2   0824           01537                 movf            yinch,w
04B3   00B3           01538                 movwf           ystepstogo
04B4   2D18           01539                 goto            initXYMovement
                      01540 
04B5                  01541 manual_yminus
04B5   3001           01542                 movlw           1
04B6   00B6           01543                 movwf           ydirection
04B7   0824           01544                 movf            yinch,w
04B8   00B3           01545                 movwf           ystepstogo
04B9   2D18           01546                 goto            initXYMovement
                      01547 
04BA                  01548 manual_xplus
04BA   3000           01549                 movlw           0
04BB   00B5           01550                 movwf           xdirection
04BC   0823           01551                 movf            xinch,w
04BD   00B2           01552                 movwf           xstepstogo
04BE   2D18           01553                 goto            initXYMovement
                      01554 
04BF                  01555 manual_xminus
04BF   3001           01556                 movlw           1
04C0   00B5           01557                 movwf           xdirection
04C1   0823           01558                 movf            xinch,w
04C2   00B2           01559                 movwf           xstepstogo
04C3   2D18           01560                 goto            initXYMovement
                      01561 
                      01562 
04C4                  01563 move_cmd
                      01564 ;              012345678901
                      01565 ; Implements:  Mx+nnn[y+mmm]<cr> = Move axis x +/- nnn steps
                      01566 ;  the second axis is optional
                      01567 ;  and "MN<cr>", which goes to manual single axis controls
                      01568 
                      01569 ; First clear the axis movement counters
04C4   01B2           01570                 clrf            xstepstogo
04C5   01B3           01571                 clrf            ystepstogo
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04C6   01B4           01572                 clrf            zstepstogo
                      01573 ; and the direction flags (0=forward, 1=backwards)
04C7   01B5           01574                 clrf            xdirection
04C8   01B6           01575                 clrf            ydirection
04C9   01B7           01576                 clrf            zdirection
                      01577 
                      01578 ; Figure out if it is a fixed move or manual move
04CA   01D7           01579                 clrf            manualMode
                      01580 
04CB   304E           01581                 movlw           'N'
04CC   0243           01582                 subwf           rcvbuffer+1,w
04CD   1903           01583                 btfsc           STATUS,Z
04CE   2BEE           01584                 goto            manual_cmd
                      01585 
                      01586 ; Start by interpreting the number for the first axis
04CF   3045           01587                 movlw           rcvbuffer+3
04D0   0084           01588                 movwf           FSR
Message[307]: Setting page bits.
04D1   118A 120A 2020 01589                 lcall           ascii2byte
04D4   1804           01590                 btfsc           FSR,0
04D5   2973           01591                 goto            bad_cmd
                      01592 
                      01593                 ; figure out which axis
                      01594 
04D6   3058           01595                 movlw           'X'
04D7   0243           01596                 subwf           rcvbuffer+1,w
04D8   00BE           01597                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      01598 
04D9   3C02           01599                 sublw           2                               ; compare to 2
04DA   1C03           01600                 btfss           STATUS,C
04DB   2973           01601                 goto            bad_cmd                 ; if gt 2 it is bad
                      01602 
                      01603                 ; at this point, offset has the index of the axis
                      01604                 ; now figure out the direction
04DC   3035           01605                 movlw   xdirection
04DD   073E           01606                 addwf   offset,w
04DE   0084           01607                 movwf   FSR                                     ; FSR = xdirection+offset
                      01608 
04DF   0844           01609                 movf    rcvbuffer+2,w
04E0   00BF           01610                 movwf   temp2
                      01611 
04E1   302B           01612                 movlw   '+'
04E2   023F           01613                 subwf   temp2,w
04E3   1D03           01614                 btfss   STATUS,Z
04E4   2CE7           01615                 goto    move_not_plus
04E5   0180           01616                 clrf    INDF                            ; if '+', direction flag is 0
04E6   2CED           01617                 goto    direction_done
                      01618 
04E7                  01619 move_not_plus
04E7   302D           01620                 movlw   '-'
04E8   023F           01621                 subwf   temp2,w
04E9   1D03           01622                 btfss   STATUS,Z
04EA   2973           01623                 goto    bad_cmd                         ; if not '-' either, it is bad command
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01624 
                      01625                 ; direction is '-'
04EB   3001           01626                 movlw   1       
04EC   0080           01627                 movwf   INDF                            ; if '-', direction is 1
                      01628 
04ED                  01629 direction_done
                      01630                 ; now set the appropriate step counter
04ED   3032           01631                 movlw   xstepstogo
04EE   073E           01632                 addwf   offset,w
04EF   0084           01633                 movwf   FSR                                     ; FSR = xstepstogo + offset
                      01634                 
04F0   083D           01635                 movf    numparm,w
04F1   0080           01636                 movwf   INDF
                      01637                 
                      01638 
                      01639                 ; Check for a second axis in the command and process it if needed
                      01640 
04F2   08C8           01641                 movf            rcvbuffer+6,f
04F3   1903           01642                 btfsc           STATUS,Z        
04F4   2D18           01643                 goto            initXYMovement  ; If the command ends with null, get out                
                      01644 
                      01645                 ; If we get here, there is a second axis to process
                      01646 
04F5   304A           01647                 movlw           rcvbuffer+8
04F6   0084           01648                 movwf           FSR
Message[307]: Setting page bits.
04F7   118A 120A 2020 01649                 lcall           ascii2byte
04FA   1804           01650                 btfsc           FSR,0
04FB   2973           01651                 goto            bad_cmd
                      01652 
                      01653                 ; figure out which axis
                      01654 
04FC   3058           01655                 movlw           'X'
04FD   0248           01656                 subwf           rcvbuffer+6,w
04FE   00BE           01657                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      01658 
04FF   3C02           01659                 sublw           2                               ; compare to 2
0500   1C03           01660                 btfss           STATUS,C
0501   2973           01661                 goto            bad_cmd                 ; if gt 2 it is bad
                      01662 
                      01663                 ; at this point, offset has the index of the axis
                      01664                 ; now figure out the direction
0502   3035           01665                 movlw   xdirection
0503   073E           01666                 addwf   offset,w
0504   0084           01667                 movwf   FSR                                     ; FSR = xdirection+offset
                      01668 
0505   0849           01669                 movf    rcvbuffer+7,w
0506   00BF           01670                 movwf   temp2
                      01671 
0507   302B           01672                 movlw   '+'
0508   023F           01673                 subwf   temp2,w
0509   1D03           01674                 btfss   STATUS,Z
050A   2D0D           01675                 goto    move_not_plus2
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

050B   0180           01676                 clrf    INDF                            ; if '+', direction flag is 0
050C   2D13           01677                 goto    direction_done2
                      01678 
050D                  01679 move_not_plus2
050D   302D           01680                 movlw   '-'
050E   023F           01681                 subwf   temp2,w
050F   1D03           01682                 btfss   STATUS,Z
0510   2973           01683                 goto    bad_cmd                         ; if not '-' either, it is bad command
                      01684 
                      01685                 ; direction is '-'
0511   3001           01686                 movlw   1       
0512   0080           01687                 movwf   INDF                            ; if '-', direction is 1
                      01688 
0513                  01689 direction_done2
                      01690                 ; now set the appropriate step counter
0513   3032           01691                 movlw   xstepstogo
0514   073E           01692                 addwf   offset,w
0515   0084           01693                 movwf   FSR                                     ; FSR = xstepstogo + offset
                      01694                 
0516   083D           01695                 movf    numparm,w
0517   0080           01696                 movwf   INDF
                      01697 
                      01698 
0518                  01699 initXYMovement
                      01700 ;
                      01701 ; Initialize the factors for moving xy axis using a modified Bresenham's algorithm
                      01702 ;
0518   0832           01703                 movf    xstepstogo,w
0519   0233           01704                 subwf   ystepstogo,w    ; compare x and y steps to go - pick the highest
051A   1803           01705                 btfsc   STATUS,C
                      01706                 ; x is higher 
051B   2D23           01707                 goto    yisfast
                      01708 
051C                  01709 xisfast ; initialize for x as the fast axis
051C   30FF           01710                 movlw   255
051D   00DC           01711                 movwf   xfast   ; xfast is non-zero e.g. fast axis (parallel)
051E   0833           01712                 movf    ystepstogo,w
051F   00DB           01713                 movwf   efast   ; efast = ystepstogo (error for a step in the fast direction)
0520   0832           01714                 movf    xstepstogo,w
0521   00DA           01715                 movwf   eslow   ; eslow = xstepstogo (error for a step in the slow direction)
0522   2D28           01716                 goto    initErrorFactor
                      01717 
0523                  01718 yisfast ; initialize for y as the fast axis
0523   01DC           01719                 clrf    xfast   ; xfast is zero e.g slow axis so z is fast (diagonal)
0524   0832           01720                 movf    xstepstogo,w
0525   00DB           01721                 movwf   efast   ; efast = xstepstogo (error for a step in the fast direction)
0526   0833           01722                 movf    ystepstogo,w
0527   00DA           01723                 movwf   eslow   ; eslow = ystepstogo (error for a step in the slow direction)
                      01724 
                      01725 
0528                  01726 initErrorFactor 
0528   01D9           01727                 clrf    errorFactor+1   ; high byte  
0529   085A           01728                 movf    eslow,w
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

052A   00D8           01729                 movwf   errorFactor
052B   1003           01730                 bcf             STATUS,C
052C   0CD8           01731                 rrf             errorFactor,f   ; errorFactor starts as eslow / 2
                      01732 
                      01733 ;
                      01734 ; This is where all movement commands end up with the stepstogo and direction flags properly set
                      01735 ;
052D                  01736 move_the_steppers
052D   01BA           01737                 clrf            count1          ; start with no delay
052E   01D6           01738                 clrf            whichMotors ; start with no motors moving 0=PORTD, 2=PORTA
                      01739 
                      01740 ; start with x and y NOT stepping
052F   01DD           01741                 clrf            stepx
0530   01DE           01742                 clrf            stepy
                      01743 
                      01744 ; Skip the calculation of the x and y motors if there are no steps left for either
                      01745                 
0531   08B2           01746                 movf            xstepstogo,f
0532   1D03           01747                 btfss           STATUS,Z
0533   2D37           01748                 goto            whichXYStep
0534   08B3           01749                 movf            ystepstogo,f
0535   1903           01750                 btfsc           STATUS,Z
0536   2D4E           01751                 goto            processSteps
                      01752 
                      01753 ; should only get here if either x or y steps to go is non-zero - skip if both are zero
                      01754 
0537                  01755 whichXYStep
                      01756 ; 
                      01757 ; Determine x/y movement using the error factors
                      01758 ;
0537   3000           01759                 movlw           0x00                    ; high bit of eFast (always negative!)
0538   00F7           01760                 movwf           temp
0539   085B           01761                 movf            efast,w
053A   02D8           01762                 subwf           errorFactor,f   ; errorFactor -= efast
053B   0877           01763                 movf            temp,w                  ; high bit of source (always negative!)
053C   1C03           01764                 btfss           STATUS,C                ; check for a carry (borrow) (actaully borrow is
                             NOT carry, so logic is reversed)
053D   0F77           01765                 incfsz          temp,w                  ; sets carry/zero if not skipped (overflows)
053E   02D9           01766                 subwf           errorFactor+1,f ; 
                      01767 
053F   1BD9           01768                 btfsc           errorFactor+1,7 ; high bit is in the second byte
0540   2D46           01769                 goto            diagonalStep    ; diagonal if < 0
                      01770 
0541                  01771 parallelStep    ; should be here if the errorFactor >=0
                      01772                 ;; take one step in the fast direction
0541   085C           01773                 movf            xfast,w
0542   00DD           01774                 movwf           stepx   ; stepx = xfast
0543   00DE           01775                 movwf           stepy
0544   09DE           01776                 comf            stepy,f ; stepy is the opposite of xfast
0545   2D4E           01777                 goto            processSteps
                      01778 
0546                  01779 diagonalStep    ; should be here if the errorFactor < 0
0546   085A           01780                 movf            eslow,w
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0547   07D8           01781                 addwf           errorFactor,f   ; adjust errorFactor for the diagonal step
0548   1803           01782                 btfsc           STATUS,C                
0549   0AD9           01783                 incf            errorFactor+1,f ; clear the upper bit 
                      01784                 
054A   30FF           01785                 movlw           255             ; all bits on 
054B   00DD           01786                 movwf           stepx
054C   00DE           01787                 movwf           stepy
054D   2D4E           01788                 goto            processSteps
                      01789 
                      01790 
054E                  01791 processSteps
                      01792 ; process each axis
                      01793 
054E   08DD           01794                 movf            stepx,f
054F   1903 2D70      01795                 bz                      calcYaxis
                      01796 
                      01797                 ; safety catch - skip it if xstepstogo is zero
0551   08B2           01798                 movf            xstepstogo,f
0552   1903 2D70      01799                 bz                      calcYaxis
                      01800 
                      01801                 ; process X axis - it has some steps to do
0554   03B2           01802                 decf            xstepstogo,f
0555   1456           01803                 bsf                     whichMotors,0
                      01804 
                      01805                 ; Send an 'x' on the serial port (unless manual mode)
0556   1857           01806                 btfsc           manualMode,0
0557   2D5C           01807                 goto            nosendx
0558   3078           01808                 movlw           'x'
Message[307]: Setting page bits.
0559   118A 120A 2078 01809                 lcall           serout
055C                  01810 nosendx
                      01811 
                      01812                 ; update the location
                      01813 
055C   1835           01814                 btfsc           xdirection,0
055D   2D63           01815                 goto            decrx
                      01816 
055E   3001           01817                 movlw           1
055F   07AD           01818                 addwf           xlocation+1,f
0560   1803           01819                 btfsc           STATUS,C
0561   0AAC           01820                 incf            xlocation+0,f
0562   2D67           01821                 goto            calcx
                      01822 
0563                  01823 decrx   
0563   3001           01824                 movlw           1
0564   02AD           01825                 subwf           xlocation+1,f
0565   1C03           01826                 btfss           STATUS,C
0566   03AC           01827                 decf            xlocation+0,f
                      01828 
0567                  01829 calcx
                      01830                 ; calculate the values for the motor coils
0567   3000           01831                 movlw           0
0568   00D5           01832                 movwf           axisOffset
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[307]: Setting page bits.
0569   118A 120A 20D5 01833                 lcall           calculateStep
056C   3005           01834                 movlw           HIGH $
056D   008A           01835                 movwf           PCLATH
                      01836                 
056E   0820           01837                 movf            xdelay,w
056F   00BA           01838                 movwf           count1                          ; store the delay for x axis
                      01839 
0570                  01840 calcYaxis
0570   085E           01841                 movf            stepy,w
0571   1903 2D96      01842                 bz                      calcZaxis
                      01843 
                      01844                 ; safety catch - skip it if ystepstogo is zero
0573   08B3           01845                 movf            ystepstogo,f
0574   1903 2D96      01846                 bz                      calcZaxis
                      01847 
                      01848                 ; process Y axis - it has steps to go
0576   03B3           01849                 decf            ystepstogo,f
0577   1456           01850                 bsf                     whichMotors,0
                      01851 
                      01852                 ; Send an 'y' on the serial port (unless manual mode)
0578   1857           01853                 btfsc           manualMode,0
0579   2D7E           01854                 goto            nosendy
057A   3079           01855                 movlw           'y'
Message[307]: Setting page bits.
057B   118A 120A 2078 01856                 lcall           serout
057E                  01857 nosendy
                      01858 
                      01859                 ; update the location
                      01860 
057E   1836           01861                 btfsc           ydirection,0
057F   2D85           01862                 goto            decry
                      01863 
0580   3001           01864                 movlw           1
0581   07AF           01865                 addwf           ylocation+1,f
0582   1803           01866                 btfsc           STATUS,C
0583   0AAE           01867                 incf            ylocation+0,f
0584   2D89           01868                 goto            calcy
                      01869 
0585                  01870 decry   
0585   3001           01871                 movlw           1
0586   02AF           01872                 subwf           ylocation+1,f
0587   1C03           01873                 btfss           STATUS,C
0588   03AE           01874                 decf            ylocation+0,f
                      01875 
0589                  01876 calcy
                      01877                 ; calculate the values for the motor coils
0589   3001           01878                 movlw           1
058A   00D5           01879                 movwf           axisOffset
Message[307]: Setting page bits.
058B   118A 120A 20D5 01880                 lcall           calculateStep
058E   3005           01881                 movlw           HIGH $
058F   008A           01882                 movwf           PCLATH
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01883                 
0590   0821           01884                 movf            ydelay,w
0591   023A           01885                 subwf           count1,w
0592   1803           01886                 btfsc           STATUS,C
0593   2D96           01887                 goto            calcZaxis                       ; this means count1 is larger than ydela
                            y
                      01888 
0594   0821           01889                 movf            ydelay,w
0595   00BA           01890                 movwf           count1                          ; store the delay for y axis
                      01891 
0596                  01892 calcZaxis
0596   0834           01893                 movf            zstepstogo,w
0597   1903 2DB9      01894                 bz                      doMotors
                      01895 
                      01896                 ; process Z axis - it has steps to go
0599   03B4           01897                 decf            zstepstogo,f
059A   1556           01898                 bsf                     whichMotors,2
                      01899 
                      01900                 ; Send a 'z' on the serial port (unless manual mode)
059B   1857           01901                 btfsc           manualMode,0
059C   2DA1           01902                 goto            nosendz
059D   307A           01903                 movlw           'z'
Message[307]: Setting page bits.
059E   118A 120A 2078 01904                 lcall           serout
05A1                  01905 nosendz
                      01906 
                      01907                 ; update the location
                      01908 
05A1   1837           01909                 btfsc           zdirection,0
05A2   2DA8           01910                 goto            decrz
                      01911 
05A3   3001           01912                 movlw           1
05A4   07B1           01913                 addwf           zlocation+1,f
05A5   1803           01914                 btfsc           STATUS,C
05A6   0AB0           01915                 incf            zlocation+0,f
05A7   2DAC           01916                 goto            calcz
                      01917 
05A8                  01918 decrz   
05A8   3001           01919                 movlw           1
05A9   02B1           01920                 subwf           zlocation+1,f
05AA   1C03           01921                 btfss           STATUS,C
05AB   03B0           01922                 decf            zlocation+0,f
                      01923 
05AC                  01924 calcz
                      01925                 ; calculate the values for the motor coils
05AC   3002           01926                 movlw           2
05AD   00D5           01927                 movwf           axisOffset
Message[307]: Setting page bits.
05AE   118A 120A 20D5 01928                 lcall           calculateStep
05B1   3005           01929                 movlw           HIGH $
05B2   008A           01930                 movwf           PCLATH
                      01931                 
05B3   0822           01932                 movf            zdelay,w
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05B4   023A           01933                 subwf           count1,w
05B5   1803           01934                 btfsc           STATUS,C
05B6   2DB9           01935                 goto            doMotors                        ; this means count1 is larger than zdela
                            y
                      01936 
05B7   0822           01937                 movf            zdelay,w
05B8   00BA           01938                 movwf           count1                          ; store the delay for z axis
                      01939 
05B9                  01940 doMotors
                      01941                 ; move the actual motors and wait the delay time
                      01942                 ; probably should check for interupts here (serial, stop button, and limit switches)
                      01943 
                      01944 ; So, how to figure out which motors to move
                      01945 
                      01946 ; Move the ZAxis motor
                      01947 
                      01948 
05B9   08D6           01949                 movf            whichMotors,f
05BA   1903           01950                 btfsc           STATUS,Z
05BB   2E32           01951                 goto            doneMoving
                      01952 
05BC   1D56           01953                 btfss           whichMotors,2           ; move z axis?
05BD   2DC0           01954                 goto            xyMotors
                      01955 
                      01956                 ; set PORTA correctly
                      01957 
05BE   082B           01958                 movf            zcoils,w
05BF   0085           01959                 movwf           PORTA
                      01960 
                      01961 
05C0                  01962 xyMotors
                      01963 
05C0   1C56           01964                 btfss           whichMotors,0           ; move x or y axis?
05C1   2DC8           01965                 goto            pause
                      01966 
05C2   0829           01967                 movf            xcoils,w
05C3   00BF           01968                 movwf           temp2
05C4   0EBF           01969                 swapf           temp2,f                 ; x in high bits
                      01970 
05C5   082A           01971                 movf            ycoils,w
05C6   043F           01972                 iorwf           temp2,w                 ; y in low bits
                      01973 
05C7   0088           01974                 movwf           PORTD
                      01975                 
05C8                  01976 pause
05C8   08BA           01977         movf    count1,f
05C9   1903 2DD6      01978                 bz              checkHold
                      01979 
                      01980         ifndef  Debug
05CB   25CF           01981 loop    call    timer           ;Wait 1msec
05CC   0BBA           01982         decfsz  count1,f        ;count - 1 = 0 ?
05CD   2DCB           01983         goto    loop            ;No. Continue
                      01984         else
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01985                 nop
                      01986                 nop
                      01987                 nop
                      01988         endif
                      01989 
                      01990 
05CE   2DD6           01991                 goto    checkHold
                      01992 
                      01993 ; Putting the simple timer subroutine here so it is a short call
                      01994 ;*************  1msec Timer Subroutine  *****************
05CF                  01995 timer
                      01996         ifndef Debug
05CF   30C8           01997         movlw   d'200'          ;Set loop count
05D0   00BB           01998         movwf   count2          ;Save loop count
05D1   0000           01999 tmlp    nop                     ;Time adjust
05D2   0000           02000         nop                     ;Time adjust
05D3   0BBB           02001         decfsz  count2,f        ;count - 1 = 0 ?
05D4   2DD1           02002         goto    tmlp            ;No. Continue
                      02003         else
                      02004                 nop     
                      02005                 nop
                      02006                 nop
                      02007                 nop
                      02008                 nop     
                      02009                 nop
                      02010         endif
05D5   0008           02011         return                  ;Yes. Count end
                      02012 
                      02013 
                      02014 
05D6                  02015 checkHold
                      02016                 ; check the hold flags, if they are 0, turn off that motor
05D6   1C28           02017                 btfss           zhold,0
                      02018                 ; z holding current is off, clear PORTA
05D7   0185           02019                 clrf            PORTA
                      02020 
05D8   1826           02021                 btfsc           xhold,0
05D9   2DDC           02022                 goto            checkyhold
                      02023         
                      02024                 ; x holding current is off
05DA   300F           02025                 movlw           b'00001111'
05DB   0588           02026                 andwf           PORTD,f
                      02027 
05DC                  02028 checkyhold
05DC   1827           02029                 btfsc           yhold,0
05DD   2E0B           02030                 goto            check_limits
                      02031         
                      02032                 ; y holding current is off
05DE   30F0           02033                 movlw           b'11110000'
05DF   0588           02034                 andwf           PORTD,f
                      02035 
05E0                  02036 check_keypress
05E0   1E8C           02037                 btfss           PIR1,RCIF               ; Check for a serial receive
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05E1   2E0B           02038                 goto            check_limits
                      02039 
                      02040                 ; in manual mode, go back to key processing
05E2   1857           02041                 btfsc           manualMode,0
05E3   2C80           02042                 goto            manual_keypress
                      02043 
                      02044                 ; any keypress aborts in programmed move mode
                      02045 
                      02046                 ; read and discard the character
05E4   081A           02047           movf      RCREG,w
                      02048           ; store the received char 
05E5   00C1           02049           movwf         rcvchar
                      02050 
                      02051                 MacroSendTable  abort_table
05E6   3005               M                 movlw           HIGH abort_table        
05E7   00FB               M                 movwf           tableH
05E8   30F2               M                 movlw           LOW     abort_table
05E9   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
05EA   118A 120A 200A     M                 lcall           sendTable
05ED   3005               M                 movlw           HIGH $          ; restore the proper PCLATH
05EE   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
05EF   118A 120A 2E32 02052                 lgoto           doneMoving
                      02053 
05F2                  02054 abort_table
05F2   340D 340A 3453 02055                 dt                      CR,LF,"SERIAL RECEIVE ABORT",CR,LF
       3445 3452 3449 
       3441 344C 3420 
       3452 3445 3443 
       3445 3449 3456 
       3445 3420 3441 
       3442 344F 3452 
       3454 340D 340A 
060A   3400           02056                 retlw           0
                      02057 
060B                  02058 check_limits
                      02059 
060B   1C07           02060                 btfss           PORTC,0
060C   2E18           02061                 goto            limit_error
                      02062                 
060D   1C87           02063                 btfss           PORTC,1
060E   2E18           02064                 goto            limit_error
                      02065         
060F   1D07           02066                 btfss           PORTC,2
0610   2E18           02067                 goto            limit_error
                      02068 
0611   1E87           02069                 btfss           PORTC,5
0612   2E18           02070                 goto            limit_error
                      02071 
0613   1E05           02072                 btfss           PORTA,4
0614   2E18           02073                 goto            limit_error
                      02074                 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0615   1E85           02075                 btfss           PORTA,5
0616   2E18           02076                 goto            limit_error
                      02077 
0617   2D2D           02078                 goto            move_the_steppers
                      02079 
                      02080 
0618                  02081 limit_error
                      02082         ; if we get here, we have to stop stepping because a limit switch is activated
                      02083 
                      02084                 MacroSendTable  limit_error_table
0618   3006               M                 movlw           HIGH limit_error_table  
0619   00FB               M                 movwf           tableH
061A   3022               M                 movlw           LOW     limit_error_table
061B   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
061C   118A 120A 200A     M                 lcall           sendTable
061F   3006               M                 movlw           HIGH $          ; restore the proper PCLATH
0620   008A               M                 movwf           PCLATH
0621   2E32           02085                 goto            doneMoving
                      02086 
0622                  02087 limit_error_table
0622   340D 340A 344C 02088                 dt                      CR,LF,"LIMIT ERROR",CR,LF
       3449 344D 3449 
       3454 3420 3445 
       3452 3452 344F 
       3452 340D 340A 
0631   3400           02089                 retlw           0
                      02090 
0632                  02091 doneMoving
0632   1857           02092                 btfsc   manualMode,0
0633   2C7A           02093                 goto    manual_nextkey
                      02094 
0634   2931           02095                 goto    ready
                      02096 
                      02097 
0635                  02098 save_cmd
                      02099         ; EEPROM Read from power-up config - uses temp as the memory location
                      02100 
0635   3009           02101         movlw   pwrUpCfgEnd-pwrUpCfg    ; store them number of loops
0636   00F7           02102         movwf   temp
                      02103 
0637   1283 1703      02104         BANKSEL EEADR
0639   3026           02105         movlw   pwrUpCfg-0x2100
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
063A   008D           02106         movwf   EEADR                   ; store the start of EEPROM to write
063B   3020           02107         movlw   H'20'                   ; store the start of RAM to read
063C   0084           02108         movwf   FSR
                      02109         
063D   138B           02110         bcf             INTCON, GIE     ; no interrupts allowed
                      02111 
063E                  02112 eepromwrite
063E   1283 1303      02113         BANKSEL H'20'           ; select bank 0 for the ram
0640   0800           02114         movf    INDF,w          ; indirect load of the data to write
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0641   1283 1703      02115         BANKSEL EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0643   008C           02116         movwf   EEDATA          
0644   1283 1303      02117         BANKSEL PIR2
0646   120D           02118         bcf             PIR2,EEIF
0647   1683 1703      02119         BANKSEL EECON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0649   138C           02120         bcf             EECON1, EEPGD   ; not program memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064A   150C           02121         bsf             EECON1, WREN    ; Enable writes
                      02122         ; Required sequence
064B   3055           02123         movlw   55h
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064C   008D           02124         movwf   EECON2
064D   30AA           02125         movlw   0AAh
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064E   008D           02126         movwf   EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
064F   148C           02127         bsf             EECON1,WR
                      02128         ; end required sequence
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0650   110C           02129         bcf             EECON1,WREN
0651   1283 1303      02130         BANKSEL PIR2
0653                  02131 pollWR
0653   1E0D           02132         btfss   PIR2,EEIF       ; loop until the write is complete
0654   2E53           02133         goto    pollWR
                      02134 
0655   0A84           02135         incf    FSR,f           ; address of ram
0656   1283 1703      02136         BANKSEL EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0658   0A8D           02137         incf    EEADR,f         ; address of rom
0659   0BF7           02138         decfsz  temp,f  ; loop loopvar times 
065A   2E3E           02139         goto    eepromwrite
                      02140 
                      02141         ; done writing
                      02142 
065B   1283 1303      02143         BANKSEL H'20'           ; back to bank 0
                      02144 
065D   2931           02145         goto    ready
                      02146 
                      02147 
065E   3042           02148 notdone   movlw         rcvbuffer
065F   0084           02149           movwf         FSR
Message[307]: Setting page bits.
0660   118A 120A 207E 02150           lcall                 puts
                      02151           
                      02152                   MacroSendTable        notdone_table
0663   3006               M                 movlw           HIGH notdone_table      
0664   00FB               M                 movwf           tableH
0665   306D               M                 movlw           LOW     notdone_table
0666   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0667   118A 120A 200A     M                 lcall           sendTable
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

066A   3006               M                 movlw           HIGH $          ; restore the proper PCLATH
066B   008A               M                 movwf           PCLATH
066C   2E8F           02153                   goto          help_cmd
                      02154 
066D                  02155 notdone_table
066D   3420 342D 3420 02156          dt                     " - Command not implemented yet!",CR,LF
       3443 346F 346D 
       346D 3461 346E 
       3464 3420 346E 
       346F 3474 3420 
       3469 346D 3470 
       346C 3465 346D 
       3465 346E 3474 
       3465 3464 3420 
       3479 3465 3474 
       3421 340D 340A 
068E   3400           02157              retlw              0
                      02158 
                      02159        
068F                  02160 help_cmd  
                      02161                   MacroSendTable        help_table
068F   3006               M                 movlw           HIGH help_table         
0690   00FB               M                 movwf           tableH
0691   309B               M                 movlw           LOW     help_table
0692   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0693   118A 120A 200A     M                 lcall           sendTable
0696   3006               M                 movlw           HIGH $          ; restore the proper PCLATH
0697   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0698   118A 120A 2931 02162           lgoto         ready
                      02163 
069B                  02164 help_table
069B   3443 346F 346D 02165                 dt                      "Commands:",CR,LF
       346D 3461 346E 
       3464 3473 343A 
       340D 340A 
06A6   3420 344D 344E 02166                 dt                      " MN<cr> = Manual Control",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 344D 3461 
       346E 3475 3461 
       346C 3420 3443 
       346F 346E 3474 
       3472 346F 346C 
       340D 340A 
06C0   3420 344D 3478 02167                 dt                      " Mx+nnn[y+mmm]<cr> = Move axis x +/- nnn steps",CR,LF
       342B 346E 346E 
       346E 345B 3479 
       342B 346D 346D 
       346D 345D 343C 
       3463 3472 343E 
       3420 343D 3420 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       344D 346F 3476 
       3465 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       342B 342F 342D 
       3420 346E 346E 
       346E 3420 3473 
       3474 3465 3470 
       3473 340D 340A 
06F0   3420 3443 3478 02168                 dt                      " Cx[=+nnnnn]<cr> = Calibrate axis x (reset to 0 or specified va
                            lue)",CR,LF
       345B 343D 342B 
       346E 346E 346E 
       346E 346E 345D 
       343C 3463 3472 
       343E 3420 343D 
       3420 3443 3461 
       346C 3469 3462 
       3472 3461 3474 
       3465 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       3428 3472 3465 
       3473 3465 3474 
       3420 3474 346F 
       3420 3430 3420 
       346F 347
0735   3420 3453 3444 02169                 dt                      " SDx+nnn<cr> = Set Delay for axis x +/-/= nnn delay",CR,LF
       3478 342B 346E 
       346E 346E 343C 
       3463 3472 343E 
       3420 343D 3420 
       3453 3465 3474 
       3420 3444 3465 
       346C 3461 3479 
       3420 3466 346F 
       3472 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       342B 342F 342D 
       342F 343D 3420 
       346E 346E 346E 
       3420 3464 3465 
       346C 346
076A   3420 3453 3449 02170                 dt                      " SIx=nnn<cr> = Set Inch size on axis x to nnn steps",CR,LF
       3478 343D 346E 
       346E 346E 343C 
       3463 3472 343E 
       3420 343D 3420 
       3453 3465 3474 
       3420 3449 346E 
       3463 3468 3420 
       3473 3469 347A 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3465 3420 346F 
       346E 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       3474 346F 3420 
       346E 346E 346E 
       3420 3473 3474 
       3465 347
079F   3420 344C 343C 02171                 dt                      " L<cr> = Lists current settings and location",CR,LF
       3463 3472 343E 
       3420 343D 3420 
       344C 3469 3473 
       3474 3473 3420 
       3463 3475 3472 
       3472 3465 346E 
       3474 3420 3473 
       3465 3474 3474 
       3469 346E 3467 
       3473 3420 3461 
       346E 3464 3420 
       346C 346F 3463 
       3461 3474 3469 
       346F 346E 340D 
       340A 
07CD   3420 3448 3478 02172                 dt                      " Hx0 = Holding current for axis x Off (0) or On (1)",CR,LF
       3430 3420 343D 
       3420 3448 346F 
       346C 3464 3469 
       346E 3467 3420 
       3463 3475 3472 
       3472 3465 346E 
       3474 3420 3466 
       346F 3472 3420 
       3461 3478 3469 
       3473 3420 3478 
       3420 344F 3466 
       3466 3420 3428 
       3430 3429 3420 
       346F 3472 3420 
       344F 346E 3420 
       3428 343
0802   3420 3444 3430 02173                 dt                      " D0<cr> = Drill Off (0) or On (1)",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 3444 3472 
       3469 346C 346C 
       3420 344F 3466 
       3466 3420 3428 
       3430 3429 3420 
       346F 3472 3420 
       344F 346E 3420 
       3428 3431 3429 
       340D 340A 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 51


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0825   3420 3456 3430 02174                 dt                      " V0<cr> = Vacuum Off (0) or On (1)",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 3456 3461 
       3463 3475 3475 
       346D 3420 344F 
       3466 3466 3420 
       3428 3430 3429 
       3420 346F 3472 
       3420 344F 346E 
       3420 3428 3431 
       3429 340D 340A 
0849   3420 3442 343C 02175                 dt                      " B<cr> = Backup startup config",CR,LF
       3463 3472 343E 
       3420 343D 3420 
       3442 3461 3463 
       346B 3475 3470 
       3420 3473 3474 
       3461 3472 3474 
       3475 3470 3420 
       3463 346F 346E 
       3466 3469 3467 
       340D 340A 
0869   3420 3446 3420 02176                 dt                      " F = Firmware Version",CR,LF
       343D 3420 3446 
       3469 3472 346D 
       3477 3461 3472 
       3465 3420 3456 
       3465 3472 3473 
       3469 346F 346E 
       340D 340A 
0880   3420 343F 343C 02177                 dt                      " ?<cr> = Dump this message",CR,LF
       3463 3472 343E 
       3420 343D 3420 
       3444 3475 346D 
       3470 3420 3474 
       3468 3469 3473 
       3420 346D 3465 
       3473 3473 3461 
       3467 3465 340D 
       340A 
089C   3400           02178                 retlw           0
                      02179 
                      02180 
                      02181 
                      02182 ;****************  Initial Process  *********************
                      02183 ; Note that this is at the end because page 0 is the best place for subroutines
089D                  02184 init
089D   01F6           02185                 clrf            known_zero ; this MUST be zero 
                      02186 
                      02187 
                      02188 ; Initialize Bank 1 registers 
                      02189 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 52


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

089E   1683 1303      02190                 BANKSEL         TRISA
08A0   3080           02191                 movlw           b'10000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08A1   0081           02192                 movwf           OPTION_REG
                      02193 
08A2   3030           02194                 movlw           b'110000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08A3   0085           02195                 movwf           TRISA
                      02196 
08A4   30FF           02197                 movlw           b'11111111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08A5   0086           02198                 movwf           TRISB
                      02199 
08A6   30FF           02200                 movlw           b'11111111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08A7   0087           02201                 movwf           TRISC
                      02202 
08A8   3000           02203                 movlw           b'00000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08A9   0088           02204                 movwf           TRISD
                      02205 
08AA   3004           02206                 movlw           b'100'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08AB   0089           02207                 movwf           TRISE
                      02208 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08AC   018C           02209                 clrf            PIE1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08AD   018D           02210                 clrf            PIE2
                      02211 
08AE   3006           02212                 movlw           0x06
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08AF   009F           02213                 movwf           ADCON1
                      02214 
                      02215 
                      02216 ;       Bank 0 initialization
                      02217 
08B0   1283 1303      02218                 BANKSEL         PORTA           ; back to bank 0
                      02219 
08B2   018B           02220                 clrf            INTCON
                      02221 
08B3   018C           02222                 clrf            PIR1
08B4   018D           02223                 clrf            PIR2
                      02224 
08B5   019F           02225                 clrf            ADCON0
                      02226 
                      02227 ; clear Port Registers
                      02228 
08B6   0185           02229                 clrf            PORTA
08B7   0186           02230                 clrf            PORTB
08B8   0187           02231                 clrf            PORTC
08B9   0188           02232                 clrf            PORTD
08BA   0189           02233                 clrf            PORTE
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 53


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02234 
                      02235 ; clear all of page 0 RAM  X'20' to x'7F'
                      02236 
08BB   1283 1303      02237                 BANKSEL         H'20'
08BD   307F           02238                 movlw           H'7F'
08BE   0084           02239                 movwf           FSR
                      02240                 
08BF   3008           02241                 movlw           high $
08C0   008A           02242                 movwf           PCLATH
                      02243 
08C1                  02244 ramclrloop
08C1   0180           02245                 clrf            INDF
08C2   0384           02246                 decf            FSR,f
                      02247                 
08C3   0804           02248                 movf            FSR,w
08C4   3C20           02249                 sublw           H'20'
08C5   1D03 28C1      02250                 bnz                     ramclrloop
                      02251 
                      02252 ; load config area from EEPROM
                      02253 
08C7                  02254 loadConfig
                      02255         ; EEPROM Read from power-up config - uses temp as the memory location
                      02256 
08C7   3009           02257         movlw   pwrUpCfgEnd-pwrUpCfg    ; store the number of loops
08C8   00F7           02258         movwf   temp
                      02259 
08C9   1283 1703      02260         BANKSEL EEADR
08CB   3026           02261         movlw   pwrUpCfg-0x2100
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08CC   008D           02262         movwf   EEADR                   ; store the start of EEPROM to read
08CD   3020           02263         movlw   H'20'                   ; store the start of RAM to write
08CE   0084           02264         movwf   FSR
                      02265         
08CF                  02266 eepromread
08CF   1683 1703      02267         BANKSEL EECON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08D1   138C           02268         bcf             EECON1, EEPGD   ; not program memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08D2   140C           02269         bsf             EECON1, RD      ; EEPROM Read
08D3   1283 1703      02270         BANKSEL EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08D5   080C           02271         movf    EEDATA, W       ; W = the data read
08D6   0080           02272         movwf   INDF            ; store the EEPROM byte to ram
08D7   0A84           02273         incf    FSR,f           ; address of ram
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08D8   0A8D           02274         incf    EEADR,f         ; address of rom
08D9   0BF7           02275         decfsz  temp,f          ; loop temp times 
08DA   28CF           02276         goto    eepromread
                      02277 
                      02278 
                      02279 ; Serial port setup
                      02280 
08DB   1683 1303      02281                 BANKSEL         TXSTA
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 54


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08DD   0198           02282         clrf            TXSTA          ; 8 bits data ,no,1 stop
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08DE   1518           02283                 bsf                     TXSTA,BRGH         ; enable high speed BRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08DF   1698           02284         bsf             TXSTA,TXEN     ; Transmit enable
                      02285 
08E0   1683 1303      02286                 BANKSEL         SPBRG
08E2   300C           02287         movlw           12             ; BAUD rate 19.2k
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08E3   0099           02288         movwf           SPBRG
                      02289 
08E4   1283 1303      02290                 BANKSEL         RCSTA
08E6   1798           02291                 bsf             RCSTA,SPEN     ; Asynchronous serial port enable
08E7   1618           02292         bsf             RCSTA,CREN     ; continuous receive
                      02293 
08E8   1283 1303      02294                 BANKSEL         H'20'
                      02295 
08EA                  02296 greet     
                      02297                 MacroSendTable  greet_table
08EA   3009               M                 movlw           HIGH greet_table        
08EB   00FB               M                 movwf           tableH
08EC   300D               M                 movlw           LOW     greet_table
08ED   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
08EE   118A 120A 200A     M                 lcall           sendTable
08F1   3008               M                 movlw           HIGH $          ; restore the proper PCLATH
08F2   008A               M                 movwf           PCLATH
                      02298 
                      02299                 ; if it is a brown-out reset, report that as an error so the user-software can detect it
                            .
                      02300 
08F3   1683 1303      02301                 BANKSEL         PCON
                      02302 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08F5   1C8E           02303                 btfss           PCON,NOT_POR
08F6   2904           02304                 goto            normalStart
                      02305 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
08F7   180E           02306                 btfsc           PCON,NOT_BOR
08F8   2904           02307                 goto            normalStart
                      02308 
08F9   1283 1303      02309                 BANKSEL         H'20'
                      02310                 MacroSendTable  BOR_table
08FB   3009               M                 movlw           HIGH BOR_table          
08FC   00FB               M                 movwf           tableH
08FD   3027               M                 movlw           LOW     BOR_table
08FE   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
08FF   118A 120A 200A     M                 lcall           sendTable
0902   3009               M                 movlw           HIGH $          ; restore the proper PCLATH
0903   008A               M                 movwf           PCLATH
                      02311 
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 55


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02312 
0904                  02313 normalStart
0904   1683 1303      02314                 BANKSEL         PCON
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0906   140E           02315                 bsf                     PCON,NOT_BOR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0907   148E           02316                 bsf                     PCON,NOT_POR
0908   1283 1303      02317                 BANKSEL         H'20'
                      02318 
Message[307]: Setting page bits.
090A   118A 120A 2931 02319                 lgoto           ready
                      02320 
090D                  02321 greet_table
090D   340D 340A 3456 02322               dt                CR,LF,"Vince's CNC MILL V1.1",CR,LF
       3469 346E 3463 
       3465 3427 3473 
       3420 3443 344E 
       3443 3420 344D 
       3449 344C 344C 
       3420 3456 3431 
       342E 3431 340D 
       340A 
0926   3400           02323               retlw             0
                      02324 
                      02325 
0927                  02326 BOR_table
0927   340D 340A 3442 02327                 dt                      CR,LF,"BROWNOUT RESET",CR,LF
       3452 344F 3457 
       344E 344F 3455 
       3454 3420 3452 
       3445 3453 3445 
       3454 340D 340A 
0939   3400           02328                 retlw           0
                      02329 
                      02330 ;********************************************************
                      02331 ;             END of Stepper Motor controller
                      02332 ;********************************************************
                      02333         end
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
B1                                00000052
BCD                               00000088
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BOR_table                         00000927
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CR                                0x0d
CREN                              00000004
CRFound                           00000073
CSRC                              00000007
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

D                                 00000005
D0                                digits+4
D1                                digits+3
D2                                digits+2
D3                                digits+1
D4                                digits+0
DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
HI                                00000078
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
ISR_V                             00000004
LF                                0x0a
LO                                00000079
MacroSendTable                    
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
NUMHI                             HI
NUMLO                             LO
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
OSC_FREQ                          003D0900
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRIVATEloadTableByte              0000001B
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RESET_V                           00000000
RP0                               00000005
RP1                               00000006
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 60


SYMBOL TABLE
  LABEL                             VALUE 

TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRISD                             00000088
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
abort_table                       000005F2
add10                             000000C6
add1K                             000000AE
ascii2byte                        00000020
axisOffset                        00000055
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 61


SYMBOL TABLE
  LABEL                             VALUE 

bad_cmd                           00000173
bad_input                         00000054
badcmd_table                      00000184
bounceCount                       0000003C
c16b2ascii                        000000A0
calbCheckPlus                     000001EB
calbLoadDigits                    000001FA
calbdigits                        00000204
calcYaxis                         00000570
calcZaxis                         00000596
calculateStep                     000000D5
calcx                             00000567
calcy                             00000589
calcz                             000005AC
calibrate_cmd                     000001D2
checkHold                         000005D6
check_keypress                    000005E0
check_limits                      0000060B
checkyhold                        000005DC
cmdnext                           0000014B
count1                            0000003A
count2                            0000003B
debounce                          
dec2bin16                         00000108
decrx                             00000563
decry                             00000585
decrz                             000005A8
delay_table                       00000292
diagonalStep                      00000546
digit2bin16                       0000012A
digits                            00000071
direction_done                    000004ED
direction_done2                   00000513
doMotors                          000005B9
doneMoving                        00000632
drillRelay                        00000038
drill_cmd                         000001BA
drill_table                       00000318
drive1                            000000E5
drive2                            000000E7
drive3                            000000EF
drive4                            000000F1
drive5                            000000F9
drive6                            000000FB
drive7                            00000103
drive8                            00000105
drive_end                         00000106
dump_limits                       0000033F
echochar                          00000054
eepromread                        000008CF
eepromwrite                       0000063E
efast                             0000005B
errorFactor                       00000058
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 62


SYMBOL TABLE
  LABEL                             VALUE 

eslow                             0000005A
getcmdinp                         00000140
gets                              00000057
greet                             000008EA
greet_table                       0000090D
help_cmd                          0000068F
help_table                        0000069B
hold_checky                       000001B5
hold_end                          000001B9
holdcurrent_cmd                   0000019D
holding_table                     000002E5
inch_table                        000002B7
init                              0000089D
initErrorFactor                   00000528
initXYMovement                    00000518
init_V                            00000007
interrupt                         00000005
known_zero                        00000076
limit_error                       00000618
limit_error_table                 00000622
limit_table                       0000034B
list_axis_done                    0000030E
list_cmd                          00000249
list_next_axis                    0000024A
list_part10                       0000038F
list_part2                        00000273
list_part3                        0000029C
list_part4                        000002CA
list_part5                        000002F9
list_part6                        0000031F
list_part7                        0000033A
list_part8                        0000035C
list_part9                        00000377
loadAxisLocation                  0000020E
loadConfig                        000008C7
location_table                    00000261
loop                              000005CB
manualMode                        00000057
manual_cmd                        000003EE
manual_keypress                   00000480
manual_nextkey                    0000047A
manual_readkey                    0000047E
manual_table                      000003FB
manual_xminus                     000004BF
manual_xplus                      000004BA
manual_yminus                     000004B5
manual_yplus                      000004B0
manual_zminus                     000004AB
manual_zplus                      000004A6
max_table                         00000389
min_table                         0000036C
move_cmd                          000004C4
move_not_plus                     000004E7
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 63


SYMBOL TABLE
  LABEL                             VALUE 

move_not_plus2                    0000050D
move_the_steppers                 0000052D
nextchar                          00000080
normalStart                       00000904
nosendx                           0000055C
nosendy                           0000057E
nosendz                           000005A1
not_an_I                          0000022A
notdone                           0000065E
notdone_table                     0000066D
numparm                           0000003D
offset                            0000003E
parallelStep                      00000541
pause                             000005C8
pollWR                            00000653
positive                          0000009E
processSteps                      0000054E
puts                              0000007E
pwrUpCfg                          00002126
pwrUpCfgEnd                       0000212F
ramclrloop                        000008C1
rcvbuffer                         00000042
rcvbuffer_size                    14
rcvbufoff                         00000040
rcvchar                           00000041
ready                             00000131
ready_prompt_table                0000013B
s16b2ascii                        00000093
saveW                             0000007A
save_cmd                          00000635
sendTable                         0000000A
serout                            00000078
set_cmd                           00000214
set_not_a_plus                    00000242
set_not_an_equal                  0000023B
set_value                         00000230
sign                              00000070
stepx                             0000005D
stepy                             0000005E
sub100                            000000BB
sub10k                            000000A2
tableH                            0000007B
tableL                            0000007C
tabofs                            00000053
temp                              00000077
temp2                             0000003F
timer                             000005CF
tmlp                              000005D1
txwait                            00000015
vacuumRelay                       00000039
vacuum_cmd                        000001C6
vacuum_table                      00000330
version_cmd                       0000019A
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 64


SYMBOL TABLE
  LABEL                             VALUE 

wait1                             0000007B
wait2                             00000058
whichMotors                       00000056
whichXYStep                       00000537
xcoils                            00000029
xdelay                            00000020
xdirection                        00000035
xfast                             0000005C
xhold                             00000026
xinch                             00000023
xisfast                           0000051C
xlocation                         0000002C
xstepstogo                        00000032
xyMotors                          000005C0
ycoils                            0000002A
ydelay                            00000021
ydirection                        00000036
yhold                             00000027
yinch                             00000024
yisfast                           00000523
ylocation                         0000002E
ystepstogo                        00000033
zcoils                            0000002B
zdelay                            00000022
zdirection                        00000037
zhold                             00000028
zinch                             00000025
zlocation                         00000030
zstepstogo                        00000034


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.14                       STEPPER.ASM   4-25-2008  6:48:35         PAGE 65


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0880 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
08C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0900 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXX------
2000 : -------X-------- ---------------- ---------------- ----------------
2100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXX- ----------------

All other memory blocks unused.

Program Memory Words Used:  2359
Program Memory Words Free:  5833


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :   107 reported,     0 suppressed

