MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00001 ;********************************************************
                      00002 ;
                      00003 ;               Stepper Motor controller
                      00004 ;
                      00005 ;********************************************************
                      00006 
                      00007         list            p=pic16f877
                      00008         include         p16f877.inc
                      00001         LIST
                      00002 ; P16F877.INC  Standard Header File, Version 1.00    Microchip Technology, Inc.
                      00373         LIST
                      00009 
                      00010                 radix dec
                      00011 
2007   3FB1           00012                 __CONFIG _CP_OFF & _XT_OSC & _PWRTE_ON  & _WDT_OFF & _BODEN_OFF & _LVP_ON & _DEBUG_OFF &
                             _WRT_ENABLE_ON & _CPD_OFF
                      00013 
                      00014 ;;;;;;;;;#DEFINE        Debug 1
                      00015 
                      00016 ; Version 1.0 - Changes to match hardware pin swaps - Swap X/Y Axis.  Swap A with \A, B with \B
                      00017 ; Version 0.4 - Changes out X/Y step routines with a modified Bresenham algorithm that moves in straight
                             lines
                      00018 
                      00019 
  00000000            00020 RESET_V         EQU     0x0000
  00000004            00021 ISR_V           EQU     0x0004
  003D0900            00022 OSC_FREQ        EQU     D'4000000'      
                      00023 
                      00024 
                      00025 ; Hardware config:
                      00026 ; PortA = Z Motor Control & Limit Switches
                      00027 ;  RA5 = \Limit-Zmax
                      00028 ;  RA4 = \Limit-Zmin
                      00029 ;  RA3 = Z Coil A
                      00030 ;  RA2 = Z Coil \A
                      00031 ;  RA1 = Z Coil B
                      00032 ;  RA0 = Z Coil \B 
                      00033 
                      00034 
                      00035 ; PortB = Start/Stop - Reserved
                      00036 ;  LCD Later / Menu input
                      00037 
                      00038 ; PortC = Limit Switches, I2C & Serial
                      00039 ;  RC7 = Serial RX
                      00040 ;  RC6 = Serial TX
                      00041 ;  RC5 = \Limit-Ymax
                      00042 ;  RC4 = I2C (Reserved) - Not Connected
                      00043 ;  RC3 = I2C (Reserved) - Not Connected 
                      00044 ;  RC2 = \Limit-Ymin
                      00045 ;  RC1 = \Limit-Xmax
                      00046 ;  RC0 = \Limit-Xmin
                      00047 
                      00048 ; PortD = Motor Control
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00049 ;  RD7 = Y Coil A  -- Change to X\A
                      00050 ;  RD6 = Y Coil \A -- Change to XA
                      00051 ;  RD5 = Y Coil B  -- Change to X\B
                      00052 ;  RD4 = Y Coil \B -- Change to XB
                      00053 ;  RD3 = X Coil A  -- Change to Y\A
                      00054 ;  RD2 = X Coil \A -- Change to YA
                      00055 ;  RD1 = X Coil B  -- Change to Y\B
                      00056 ;  RD0 = X Coil \B -- Change to YB
                      00057 
                      00058 
                      00059 ; PortE = Relay control & Start/Stop
                      00060 ;   RE2 = Not Connected
                      00061 ;   RE1 = Vacuum Relay
                      00062 ;   RE0 = Drill relay
                      00063 
                      00064 
                      00065 ; Step Sequence - CW: b'1010', b'0110', b'0101',b'1001'  - CCW: b'1001',b'0101',b'0110',b'1010'
                      00066 
                      00067 
                      00068 ; Constants
                      00069 #define rcvbuffer_size 14
                      00070 #define CR 0x0d
                      00071 #define LF 0x0a
                      00072 
                      00073 ; MacroSendTable
                      00074 ;  Wraps the call to the sendTable subroutine in all of the appropriate
                      00075 ;    code to set and reset the proper PCLATH register so it does not
                      00076 ;    fly off to never-never land accidently when crossing pages
                      00077 ;
                      00078 ; To use it, just code MacroSendTable myTable
                      00079 
                      00080 MacroSendTable  macro   tableLocation
                      00081                 movlw           HIGH tableLocation      
                      00082                 movwf           tableH
                      00083                 movlw           LOW     tableLocation
                      00084                 movwf           tableL
                      00085                 lcall           sendTable
                      00086                 movlw           HIGH $          ; restore the proper PCLATH
                      00087                 movwf           PCLATH
                      00088                 endm
                      00089 
                      00090 ; all bits are numbered starting at 0 on the right - 76543210
                      00091 ; TRIS bits on indicates input, 0 indicates output
                      00092 
                      00093 ; Define EEPROM locations
2100                  00094         org 0x2100
2100   0056 0069 006E 00095                         de "Vinces CNC Mill V1.0 - Vincent Greene", 0
       0063 0065 0073 
       0020 0043 004E 
       0043 0020 004D 
       0069 006C 006C 
       0020 0056 0031 
       002E 0030 0020 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       002D 0020 0056 
       0069 006E 0063 
       0065 006E 0074 
       0020 0047 0072 
       0065 0065 006E 
       0065 0000 
                      00096 
                      00097 
2126                  00098 pwrUpCfg
                      00099         ; speed (delay counter)
2126   001E           00100                         de      30              ; xdelay
2127   001E           00101                         de      30              ; ydelay
2128   000F           00102                         de      15              ; zdelay
                      00103         
                      00104         ; Steps per inch 
2129   00F0           00105                         de      240             ;xinch
212A   00F0           00106                         de      240             ;yinch
212B   00E6           00107                         de      230             ;zinch
                      00108         
                      00109         ; holding current on/off )0/1
212C   0000           00110                         de      0               ;xhold
212D   0000           00111                         de      0               ;yhold
212E   0000           00112                         de      0               ;zhold
212F                  00113 pwrUpCfgEnd
                      00114 
                      00115 
                      00116 
                      00117 ;****************  Label Definition  ********************
                      00118         cblock  h'20' ; bank 0
                      00119         
                      00120 ; Start of configuration - mirrored to EEPROM
                      00121 
                      00122         ; speed (delay counter)
  00000020            00123         xdelay
  00000021            00124         ydelay
  00000022            00125         zdelay
                      00126         
                      00127         ; Steps per inch 
  00000023            00128         xinch
  00000024            00129         yinch
  00000025            00130         zinch
                      00131         
                      00132         ; holding current on/off )0/1
  00000026            00133         xhold
  00000027            00134         yhold
  00000028            00135         zhold
                      00136 
                      00137         ; stores current settings of motor coils A,\A,B,\B in low bits
  00000029            00138         xcoils
  0000002A            00139         ycoils
  0000002B            00140         zcoils
                      00141 
                      00142         ; Stores current location of an axis
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  0000002C            00143         xlocation:2
  0000002E            00144         ylocation:2
  00000030            00145         zlocation:2
                      00146         
                      00147         ; steps to go in current movement
  00000032            00148         xstepstogo
  00000033            00149         ystepstogo
  00000034            00150         zstepstogo
                      00151         
                      00152         ; direction flag for current movement
  00000035            00153         xdirection
  00000036            00154         ydirection
  00000037            00155         zdirection
                      00156         
                      00157         ; motor state
  00000038            00158         drillRelay
  00000039            00159         vacuumRelay
                      00160 
                      00161         ; misc varaibles        
                      00162         
  0000003A            00163         count1                          ;Wait counter
  0000003B            00164         count2                          ;Wait counter(for 1msec)
  0000003C            00165         bounceCount                                             ; debounce Counter (used by debounce rou
                            tine only)
  0000003D            00166         numparm
  0000003E            00167         offset
  0000003F            00168         temp2
  00000040            00169         rcvbufoff
  00000041            00170         rcvchar
  00000042            00171         rcvbuffer:16
  00000052            00172         B1 ; scratch area for ascii btye conversion
  00000053            00173         tabofs ; Computed table offset used by DEFTAB macro
  00000054            00174         echochar ; what to echo for keys entered
  00000055            00175         axisOffset
  00000056            00176         whichMotors; bit field used to determine whihc motors to move
  00000057            00177         manualMode; 
                      00178         ; for straight line algorithm
  00000058            00179         errorFactor:2 ; cumulative error factor from best line (to determine parallel or diagonal step)
  0000005A            00180         eslow;          adjustment factor for movement in the slow direction (diagonal)
  0000005B            00181         efast;          adjustment factor for movement in the fast direction (parallel)
  0000005C            00182     xfast;              indicates if x is the fast axis, 255 means it is, 0 means it is not (y is fast a
                            xis instead)
  0000005D            00183         stepx;          should x axis be stepped (255 is yes, 0 is no)
  0000005E            00184         stepy;          should y axis be stepped (255 is yes, 0 is no)
                      00185 
                      00186         endc
                      00187 
                      00188         CBLOCK  0x70 ; used for bank-free variables
  00000070            00189                 sign ; ascii '-' if the value is negative
  00000071            00190                 digits: 5 ; five ascii digits for conversion to/from/decimal
  00000076            00191                 known_zero: 1 ; Fixed value zero for many calcs
  00000077            00192                 temp: 1 ; working variable for puts and 16b2acsii
  00000078            00193                 HI: 1 ; high byte for conversion
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

  00000079            00194                 LO: 1 ; low byte for conversion
  0000007A            00195                 saveW ; temp storage for the W register
  0000007B            00196                 tableH ; PCLATH for a table lookup
  0000007C            00197                 tableL ; PCL for a table lookup
                      00198         ENDC
                      00199 
                      00200 
                      00201 debounce macro register,bit,mbypass,release
                      00202 
                      00203         local   mstart, mloop
                      00204 
                      00205 mstart
                      00206         btfsc   register,bit     ;ON (low)?
                      00207         goto    mbypass          ;No. Next
                      00208 
                      00209         ifndef  Debug
                      00210                 ; Wait 20 ms and check it again
                      00211                 movlw   d'20'
                      00212                 movwf   bounceCount
                      00213 mloop   call    timer
                      00214         decfsz  bounceCount,f        ;count - 1 = 0 ?
                      00215         goto    mloop            ;No. Continue
                      00216 
                      00217                 ; 20 ms have passed - is it still low?
                      00218         btfsc   register,bit     ;ON (low)?
                      00219         goto    mbypass          ;No. Next
                      00220         if release == 1
                      00221                 btfss   register,bit    ; Wait for a release
                      00222                 goto    $-1
                      00223         endif
                      00224         else
                      00225                 bsf             register,bit
                      00226                 nop
                      00227                 nop
                      00228                 nop
                      00229                 nop
                      00230                 nop
                      00231                 nop
                      00232                 nop
                      00233                 nop
                      00234         endif
                      00235 
                      00236         endm
                      00237 
                      00238         
                      00239 
                      00240 
                      00241 ;****************  Program Start  ***********************
0000                  00242         org     RESET_V         ;Reset Vector
0000   2807           00243         goto    init_V
0004                  00244         org     ISR_V           ;Interrupt Vector
0004   2805           00245                 goto    interrupt
                      00246 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00247 
                      00248 ;**************** Interrupt Process *********************
0005                  00249 interrupt
0005   018B           00250                 clrf    INTCON
0006   0009           00251                 retfie
                      00252 
                      00253 
                      00254 ; Initialization is at the end because page 0 is the best place for common subroutines
Message[307]: Setting page bits.
0007   118A 120A 2FF6 00255 init_V  lgoto   init
                      00256 
                      00257 ; Subroutine SendTable
                      00258 ;  Dump a table address to the serial port (tables are NOT limited in size)
                      00259 ; table must end with a retlw 0
                      00260 ; Modifies varibles: tableH, tableL, temp
                      00261 ; input table location is: PCLATH in tableH, PCL in tableL - these will be modified by the process
                      00262 
                      00263 ; Macro MacroSendTable simplifies the calls by creating all of the needed setup and PCLATH reset code to
                      00264 ;   make the call completely safe.  Rather than calling SendTable directly, it is safer to use the macro
                      00265 
                      00266 ; It is WAY important that this is at the top of page 0 and 
                      00267 ;   not crossing any page boundarys
                      00268 
000A                  00269 sendTable
                      00270         ; get the character to send from the table
000A   201B           00271                 call            PRIVATEloadTableByte
                      00272         ; W contains the character - save it
000B   00F7           00273                 movwf           temp
                      00274         ; Put the PCLATH back to what it should be (or we will jump to nowhere on next goto
000C   3000           00275                 movlw           HIGH sendTable
000D   008A           00276                 movwf           PCLATH
                      00277 
000E   0877           00278                 movf            temp,w          ; pull the byte to send back into w
000F   3E00           00279                 addlw           0       
0010   1903           00280                 btfsc           STATUS,Z        ; is it zero (end of table)?
0011   0008           00281                 return                                  ;    if so, return from subroutine
                      00282 
0012   0099           00283                 movwf           TXREG           ; transmit it
0013   3098           00284                 movlw           TXSTA           ; check status with indirect because it is in another pa
                            ge
0014   0084           00285         movwf           FSR         ; FSR <= TXSTA
0015   1C80           00286 txwait  btfss           INDF,1      ; check TRMT bit in TXSTA (FSR)
0016   2815           00287         goto            txwait          ; TXREG full  or TRMT = 0 
                      00288                 
                      00289                 ; increment the table call location
0017   0FFC           00290                 incfsz          tableL,f
0018   280A           00291                 goto            sendTable
0019   0AFB           00292                 incf            tableH,f
001A   280A           00293                 goto            sendTable
                      00294 
                      00295 
                      00296                 
                      00297 ; This ia calle by SendTable - don't use it directly or really ugly stuff will happen
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

001B                  00298 PRIVATEloadTableByte
001B   087B           00299                 movf            tableH,w
001C   008A           00300                 movwf           PCLATH
001D   087C           00301                 movf            tableL,w
001E   0082           00302                 movwf           PCL                     ; this is the eqivilent to the call to the table
001F   0008           00303                 return                                  ; This return should never be executed - return
                      00304                                                                 ;    will be to the location that dit th
                            e call the loadTableByte
                      00305 
                      00306 ; Subroutines go here so they are in page 0
                      00307 
                      00308 ; Subroutine ascii2byte 
                      00309 ; Reads exactly three ascii digits in the location pointed to by FSR,
                      00310 ;  FSR = 100s, FSR+1 = 10s, FSR+2 = 1s
                      00311 ; returns the value of the digits in variable numparm.  If the input is bad,
                      00312 ; variable FSR will contain the value 255 and numparm is undefined.
                      00313 ; If the input is good, numparm will contain the value of the input and 
                      00314 ; FSR will be zero.
                      00315 ; requires (and modifies):
                      00316 ;  temp2 - 1 byte
                      00317 ;  numparm - 1 byte
                      00318 
0020                  00319 ascii2byte
0020   01BD           00320                 clrf            numparm
                      00321 ; First extract out the value part
                      00322 ;  First digit
0021   3030           00323                 movlw           '0'                             ; sub ascii '0' = binary number
0022   0200           00324                 subwf           INDF,w
0023   00BF           00325                 movwf           temp2
                      00326                 
0024   3009           00327                 movlw           9
0025   1803           00328                 btfsc           STATUS,C
0026   282A           00329                 goto            $+4
Message[307]: Setting page bits.
0027   118A 120A 2854 00330                 lgoto           bad_input
                      00331 
002A   083F           00332                 movf            temp2,w
002B   07BD           00333                 addwf           numparm,f
                      00334 
                      00335                 ; multiply by 10 
002C   1003           00336                 bcf                     STATUS,C
002D   0DBD           00337                 rlf                     numparm,f               ; X 2
002E   1003           00338                 bcf                     STATUS,C
002F   0DBD           00339                 rlf                     numparm,f               ; x 4
0030   1003           00340                 bcf                     STATUS,C
0031   0DBD           00341                 rlf                     numparm,f               ; x 8
0032   083F           00342                 movf            temp2,w
0033   07BD           00343                 addwf           numparm,f                       ; x 9
0034   07BD           00344                 addwf           numparm,f                       ; x 10
                      00345 
                      00346 ;  second digit
0035   0A84           00347                 incf            FSR,f
0036   3030           00348                 movlw           '0'                             ; sub ascii '0' = binary number
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0037   0200           00349                 subwf           INDF,w
0038   00BF           00350                 movwf           temp2
                      00351                 
0039   3009           00352                 movlw           9
003A   1C03           00353                 btfss           STATUS,C
003B   2854           00354                 goto            bad_input
                      00355 
003C   083F           00356                 movf            temp2,w
003D   07BD           00357                 addwf           numparm,f
003E   083D           00358                 movf            numparm,w
003F   00BF           00359                 movwf           temp2
                      00360 
                      00361                 ; multiply by 10 
0040   1003           00362                 bcf                     STATUS,C
0041   0DBD           00363                 rlf                     numparm,f               ; X 2
0042   1003           00364                 bcf                     STATUS,C
0043   0DBD           00365                 rlf                     numparm,f               ; x 4
0044   1003           00366                 bcf                     STATUS,C
0045   0DBD           00367                 rlf                     numparm,f               ; x 8
0046   083F           00368                 movf            temp2,w
0047   07BD           00369                 addwf           numparm,f                       ; x 9
0048   07BD           00370                 addwf           numparm,f                       ; x 10
                      00371 
                      00372 ;  third digit
0049   0A84           00373                 incf            FSR,f
004A   3030           00374                 movlw           '0'                             ; sub ascii '0' = binary number
004B   0200           00375                 subwf           INDF,w
004C   00BF           00376                 movwf           temp2
                      00377                 
004D   3009           00378                 movlw           9
004E   1C03           00379                 btfss           STATUS,C
004F   2854           00380                 goto            bad_input
                      00381 
0050   083F           00382                 movf            temp2,w
0051   07BD           00383                 addwf           numparm,f
0052   0184           00384                 clrf            FSR
0053   0008           00385                 return
                      00386 
                      00387 ; jump point to return a bad input response
0054                  00388 bad_input
0054   30FF           00389                 movlw           255
0055   0084           00390                 movwf           FSR
0056   0008           00391                 return
                      00392                 
                      00393         
                      00394 ; gets subroutine to receive cr terminated string into buffer
                      00395 ;   if echochar is non-zero, it will be echoed instead of entered char
0057   01C0           00396 gets      clrf          rcvbufoff
0058   1E8C           00397 wait2     btfss     PIR1,RCIF      ; Check RCIF  bit in PIR1 register
0059   2858           00398           goto      wait2          ; RCREG empty or RCIF = 0
005A   081A           00399           movf      RCREG,w        ; RCREG full or RCIF = 1
                      00400           ; store the received char 
005B   00C1           00401           movwf         rcvchar
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00402           ; store the received char 
005C   00C1           00403           movwf         rcvchar
                      00404           ; check W for a CR - if found, get out
005D   3C0D           00405           sublw         CR
005E   1903           00406           btfsc         STATUS,Z
005F   2873           00407           goto          CRFound
                      00408 
                      00409                         ; echo either echochar (if non-zero), or actual char
0060   0854           00410                   movf          echochar,w
0061   1903           00411                   btfsc         STATUS,Z
0062   0841           00412                   movf          rcvchar,w
0063   0099           00413           movwf     TXREG
                      00414           
0064   0841           00415           movf          rcvchar,w
                      00416           ; check W for a LF - if found, skip it
0065   3C0A           00417           sublw         LF
0066   1903           00418           btfsc         STATUS,Z
0067   2858           00419           goto          wait2
                      00420           ; Store the received char into the buffer
0068   3042           00421           movlw         rcvbuffer
0069   0740           00422           addwf         rcvbufoff,w
006A   0084           00423           movwf         FSR
006B   0841           00424           movf          rcvchar,w
006C   0080           00425           movwf         INDF
006D   0AC0           00426           incf          rcvbufoff,f
                      00427           ; check recv buffer offset for max size - if so, start over
006E   0840           00428           movf          rcvbufoff,w
006F   3C0E           00429           sublw         rcvbuffer_size
0070   1D03           00430           btfss         STATUS,Z
0071   2858           00431           goto          wait2
                      00432          ; this is where we end up if at the end of the buffer
0072   2857           00433           goto          gets
                      00434           
                      00435                   ; when CR is found, write a 0 at buff position          
0073   3042           00436 CRFound   movlw         rcvbuffer
0074   0740           00437           addwf         rcvbufoff,w
0075   0084           00438           movwf         FSR
0076   0180           00439           clrf          INDF
                      00440           
                      00441 ; At this point, the entered string is in the buffer
                      00442 ;  ready to be tested.
                      00443 ;  on return, rcvbufoff 
                      00444 ;   contains the length of the received string
0077   0008           00445           return      
                      00446 
                      00447 ; subroutine serout - send the byte in W to serial port
0078   0099           00448 serout    movwf         TXREG
0079   3098           00449                   movlw         TXSTA
007A   0084           00450           movwf     FSR            ; FSR <= TXSTA
007B   1C80           00451 wait1     btfss     INDF,1         ; check TRMT bit in TXSTA (FSR)
007C   287B           00452           goto      wait1          ; TXREG full  or TRMT = 0 
007D   0008           00453           return
                      00454 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 10


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00455 ; puts subroutine 
                      00456 ;   this will dump the 
                      00457 ;   null-terminated string at FSR to the serial port
                      00458                   
007E   0804           00459 puts      movf          FSR,w
007F   00F7           00460                   movwf         temp
0080   0800           00461 nextchar  movf          INDF,w
0081   1903           00462                   btfsc         STATUS,Z
0082   0008           00463                   return 
0083   2078           00464                   call          serout
0084   0AF7           00465                   incf          temp,f
0085   0877           00466                   movf          temp,w
0086   0084           00467                   movwf         FSR
0087   2880           00468                   goto          nextchar
                      00469 
                      00470 ;**********************************************************
                      00471 ; Convert time 1 byte to ASCII 2 bytes and send to display
                      00472 ; Input  : W - FSR points to 10s register
                      00473 ; Output : INDF 
                      00474 ;**********************************************************
0088   00D2           00475 BCD       movwf     B1             ; B1 = HHHH LLLL
0089   0E52           00476           swapf     B1,w           ; W  = LLLL HHHH
008A   390F           00477           andlw     0x0f           ; Mask upper four bits 0000 HHHH
008B   3E30           00478           addlw     0x30           ; convert to ASCII
008C   0080           00479           movwf         INDF           ; Store first digit
008D   0852           00480           movf      B1,w
008E   390F           00481           andlw     0x0f           ; w  = 0000 LLLL
008F   3E30           00482           addlw     0x30           ; convert to ASCII
0090   0A84           00483           incf          FSR,f
0091   0080           00484           movwf         INDF
0092   0008           00485           return
                      00486 
                      00487 
                      00488 ; 16 bits to Ascii 5 digits routine
                      00489 ; modified to write directly to digits in bank-free storage (0x70-0x7f)
                      00490 ; Input is HI and LO (destroyed!) output is digits+0 to digits+4
                      00491 
                      00492 ; by Rich Leggitt with tweaks by Scott Dattalo and bugfix by Dmitry Kiryashov and Nikolai Golovchenko
                      00493 ; given 16 bit data in HI and LO, extract decimal digits
                      00494 ; requires one Output register called temp, HI and LO are destroyed.
                      00495 ; 42 instructions and less than 269 (or 252 with known_zero) instructions executed
                      00496 
                      00497 ; use the s16b2ascii entry point for a signed -32767 to 32767 calculation
0093                  00498 s16b2ascii
                      00499 ; added sign logic
0093   1FF8           00500                 btfss   HI,7
0094   289E           00501                 goto    positive
                      00502                 ; negative if we get here
0095   302D           00503                 movlw   '-'
0096   00F0           00504                 movwf   sign
0097   09F8           00505                 comf    HI,f
0098   09F9           00506                 comf    LO,f
                      00507                 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 11


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0099   3001           00508                 movlw   1
009A   07F9           00509                 addwf   LO,f
009B   1803           00510                 btfsc   STATUS,C
009C   0AF8           00511                 incf    HI,f
                      00512 
009D   28A0           00513                 goto    c16b2ascii
                      00514 
009E                  00515 positive
009E   3020           00516                 movlw   ' '
009F   00F0           00517                 movwf   sign
                      00518 
                      00519 ; entry point for an unsigned 0-65535 calculation
00A0                  00520 c16b2ascii 
00A0   01F7           00521                 clrf    temp
00A1   28A3           00522         goto $+2                ;[NG] was: skip
00A2   0AF7           00523 sub10k  incf temp,f
00A3   3010           00524                 movlw D'10000' & D'255'
00A4   02F9           00525         subwf LO,f
                      00526 
00A5   0D76           00527         rlf     known_zero,W
00A6   3C28           00528         sublw   (D'10000'>>8)+1    ;bugfix by Dmitry Kiryashov and Nikolai Golovchenko
00A7   02F8           00529         subwf   HI,F
                      00530         
00A8   1803 28A2      00531         bc sub10k               ;9*7=63/8*7=56 inst in loop for 60900 (worst)
00AA   0877           00532         movf    temp,w
00AB   00F1           00533         movwf   digits+0
                      00534 
00AC   300A           00535         movlw D'10'
00AD   00F7           00536         movwf temp
00AE   03F7           00537 add1K   decf temp,f
00AF   30E8           00538         movlw D'1000' & D'255'
00B0   07F9           00539         addwf LO,f
                      00540 
00B1   0D76           00541         rlf   known_zero,w
00B2   3E03           00542         addlw D'1000' >> 8
00B3   07F8           00543         addwf HI,f
                      00544         
00B4   1C03 28AE      00545         bnc add1K               ;9*10=90/8*10=80 inst in loop for 60900
00B6   0877           00546         movf    temp,w
00B7   00F2           00547         movwf   digits+1
                      00548 
                      00549 ;Scott takes over here
00B8   01F7           00550         clrf  temp
00B9   3064           00551         movlw D'100'
00BA   28BC           00552         goto $+2                ;[NG] was: skip
00BB                  00553 sub100
00BB   0AF7           00554         incf  temp,f
00BC   02F9           00555         subwf LO,f
00BD   1803           00556         skpnc                   ;[NG] was: skpc
00BE   28BB           00557         goto sub100
                      00558 
00BF   03F8           00559         decf  HI,f
00C0   1FF8           00560         btfss HI,7      ;Check msb instead of carry for underflow.
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 12


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00C1   28BB           00561         goto sub100     ;4 inst per loop to 200 then 7 per loop to 900. 
                      00562                         ;Total 64(?) in loop for worst case
                      00563 
                      00564 ;at this point, HI = 0xff, and  0 <= LO <= 99
                      00565 
00C2   0877           00566         movf    temp,w
00C3   00F3           00567         movwf   digits+2
                      00568 
00C4   300A           00569         movlw D'10'
00C5   00F7           00570         movwf temp
00C6   03F7           00571 add10   decf temp,f
00C7   07F9           00572         addwf LO,f
00C8   1C03 28C6      00573         bnc add10               ;40 inst in loop for worst case.
00CA   0877           00574         movf    temp,w
00CB   00F4           00575         movwf   digits+3
00CC   0879           00576         movf    LO,w
00CD   00F5           00577         movwf   digits+4
00CE   3030           00578                 movlw   '0'
00CF   07F1           00579                 addwf   digits+0,f              ; convert to ASCII
00D0   07F2           00580                 addwf   digits+1,f
00D1   07F3           00581                 addwf   digits+2,f
00D2   07F4           00582                 addwf   digits+3,f
00D3   07F5           00583                 addwf   digits+4,f
00D4   0008           00584         return
                      00585 
                      00586 ; Subroutine: calculateStep
                      00587 ;  in:   axisOffset = which axis to increment
                      00588 ;        xdirection+axisOffset = Direction (0=clockwise, 1=counterclockwise)
                      00589 ;  i/o:  xcoils+axisOffset = location of current motor coil controls
                      00590 ;  Temp Variables:
                      00591 ;        temp
                      00592 ;        FSR
                      00593 
00D5                  00594 calculateStep
                      00595         ; Step Sequence - CW: b'1010', b'0110', b'0101',b'1001'  - CCW: b'1001',b'0101',b'0110',b'1010'
                      00596 
00D5   3035           00597                 movlw   xdirection
00D6   0755           00598                 addwf   axisOffset,w
00D7   0084           00599                 movwf   FSR                             ; FSR = xdirection+axisOffset
00D8   0800           00600                 movf    INDF,w  
00D9   00F7           00601                 movwf   temp                    ; store the direction
                      00602 
00DA   3029           00603                 movlw   xcoils
00DB   0755           00604                 addwf   axisOffset,w
00DC   0084           00605                 movwf   FSR                             ; FSR = xcoils+axisOffset
                      00606 
00DD   0800           00607                 movf    INDF,w
                      00608 
00DE   3C0A           00609         sublw   b'1010'         ;Check motor position
00DF   1D03 28E7      00610         bnz     drive2          ;Unmatch
00E1   1877           00611         btfsc   temp,0                  ; Check direction
00E2   28E5           00612         goto    drive1          ;Set = CCW
00E3   3006           00613         movlw   b'0110'         ;No. Set CW data
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 13


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00E4   2906           00614         goto    drive_end       ;Jump to write
00E5                  00615 drive1
00E5   3009           00616         movlw   b'1001'                 ;Set CCW data
00E6   2906           00617         goto    drive_end       ;Jump to write
                      00618 ;-------
00E7                  00619 drive2
00E7   0800           00620                 movf    INDF,w
00E8   3C06           00621         sublw   b'0110'                 ;Check motor position
00E9   1D03 28F1      00622         bnz     drive4          ;Unmatch
00EB   1877           00623         btfsc   temp,0                  ; Check direction
00EC   28EF           00624         goto    drive3          ;Set = CCW
00ED   3005           00625         movlw   b'0101'         ;No. Set CW data
00EE   2906           00626         goto    drive_end       ;Jump to write
00EF                  00627 drive3
00EF   300A           00628         movlw   b'1010'                 ;Set CCW data
00F0   2906           00629         goto    drive_end       ;Jump to write
                      00630 ;-------
00F1                  00631 drive4
00F1   0800           00632                 movf    INDF,w
00F2   3C05           00633         sublw   b'0101'             ;Check motor position
00F3   1D03 28FB      00634         bnz     drive6          ;Unmatch
00F5   1877           00635         btfsc   temp,0                  ; Check direction
00F6   28F9           00636         goto    drive5          ;Set = CCW
00F7   3009           00637         movlw   b'1001'         ;No. Set CW data
00F8   2906           00638         goto    drive_end       ;Jump to write
00F9                  00639 drive5
00F9   3006           00640         movlw   b'0110'                 ;Set CCW data
00FA   2906           00641         goto    drive_end       ;Jump to write
                      00642 ;-------
00FB                  00643 drive6
00FB   0800           00644                 movf    INDF,w
00FC   3C09           00645         sublw   b'1001'             ;Check motor position
00FD   1D03 2905      00646         bnz     drive8          ;Unmatch
00FF   1877           00647         btfsc   temp,0                  ; Check direction
0100   2903           00648         goto    drive7          ;Set = CCW
0101   300A           00649         movlw   b'1010'         ;No. Set CW data
0102   2906           00650         goto    drive_end       ;Jump to write
0103                  00651 drive7
0103   3005           00652         movlw   b'0101'                 ;Set CCW data
0104   2906           00653         goto    drive_end       ;Jump to write
                      00654 ;-------
0105                  00655 drive8
0105   300A           00656         movlw   b'1010'            ;Compulsion setting - when nothing else matches - set first step
                      00657 
0106                  00658 drive_end
                      00659                 
0106   0080           00660         movwf   INDF           ;Write PORTA
0107   0008           00661                 return
                      00662 
                      00663 
                      00664 
                      00665 ;**********************************************************************
                      00666 ; Mainline - start of command processing
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 14


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00667 ;**********************************************************************
0108                  00668 ready     
                      00669 
                      00670                   MacroSendTable        ready_prompt_table
0108   3001               M                 movlw           HIGH ready_prompt_table 
0109   00FB               M                 movwf           tableH
010A   3012               M                 movlw           LOW     ready_prompt_table
010B   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
010C   118A 120A 200A     M                 lcall           sendTable
010F   3001               M                 movlw           HIGH $          ; restore the proper PCLATH
0110   008A               M                 movwf           PCLATH
0111   2917           00671                   goto          getcmdinp
                      00672                 
0112                  00673 ready_prompt_table
0112   340D 340A 3424 00674          dt                     CR,LF,"$ "
       3420 
0116   3400           00675              retlw              0
                      00676 
0117                  00677 getcmdinp
0117   2057           00678           call          gets
                      00679 
                      00680 ; added a CR,LF output here
0118   300D           00681                 movlw           CR
Message[307]: Setting page bits.
0119   118A 120A 2078 00682                 lcall           serout
                      00683                 ; no PCLATH reset because next instruction is long
011C   300A           00684                 movlw           LF
Message[307]: Setting page bits.
011D   118A 120A 2078 00685                 lcall           serout
0120   3001           00686             movlw               HIGH $
0121   008A           00687                 movwf           PCLATH
                      00688           
                      00689 ; main command processing goes right here          
                      00690 
0122                  00691 cmdnext   
0122   304D           00692                   movlw         'M'
0123   0242           00693                   subwf         rcvbuffer,w
0124   1903           00694                   btfsc         STATUS,Z
0125   2C62           00695                   goto          move_cmd
                      00696 
0126   3043           00697                   movlw         'C'
0127   0242           00698                   subwf         rcvbuffer,w
0128   1903           00699                   btfsc         STATUS,Z
0129   29A2           00700                   goto          calibrate_cmd
                      00701 
012A   3053           00702                   movlw         'S'
012B   0242           00703                   subwf         rcvbuffer,w
012C   1903           00704                   btfsc         STATUS,Z
012D   29B2           00705                   goto          set_cmd
                      00706 
012E   304C           00707                   movlw         'L'
012F   0242           00708                   subwf         rcvbuffer,w
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 15


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0130   1903           00709                   btfsc         STATUS,Z
0131   29E7           00710                   goto          list_cmd
                      00711 
0132   3048           00712                   movlw         'H'
0133   0242           00713                   subwf         rcvbuffer,w
0134   1903           00714                   btfsc         STATUS,Z
0135   296D           00715                   goto          holdcurrent_cmd
                      00716 
0136   3044           00717                   movlw         'D'
0137   0242           00718                   subwf         rcvbuffer,w
0138   1903           00719                   btfsc         STATUS,Z
0139   298A           00720                   goto          drill_cmd
                      00721 
013A   3056           00722                   movlw         'V'
013B   0242           00723                   subwf         rcvbuffer,w
013C   1903           00724                   btfsc         STATUS,Z
013D   2996           00725                   goto          vacuum_cmd
                      00726 
013E   3042           00727                   movlw         'B'
013F   0242           00728                   subwf         rcvbuffer,w
0140   1903           00729                   btfsc         STATUS,Z
0141   2DC1           00730                   goto          save_cmd
                      00731 
0142   303F           00732                   movlw         '?'
0143   0242           00733                   subwf         rcvbuffer,w
0144   1903           00734                   btfsc         STATUS,Z
0145   2E1B           00735                   goto          help_cmd
                      00736 
                      00737 ; this is where we end up if the command is not in the table
0146                  00738 bad_cmd
                      00739           
0146   3042           00740           movlw         rcvbuffer
0147   0084           00741           movwf         FSR
Message[307]: Setting page bits.
0148   118A 120A 207E 00742           lcall         puts
014B   3001           00743                   movlw         HIGH $
014C   008A           00744                   movwf         PCLATH
                      00745           
                      00746                   MacroSendTable        badcmd_table
014D   3001               M                 movlw           HIGH badcmd_table       
014E   00FB               M                 movwf           tableH
014F   3057               M                 movlw           LOW     badcmd_table
0150   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0151   118A 120A 200A     M                 lcall           sendTable
0154   3001               M                 movlw           HIGH $          ; restore the proper PCLATH
0155   008A               M                 movwf           PCLATH
0156   2908           00747           goto          ready
                      00748 
0157                  00749 badcmd_table
0157   3420 342D 3420 00750          dt                     " - Invalid Command!",CR,LF
       3449 346E 3476 
       3461 346C 3469 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 16


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3464 3420 3443 
       346F 346D 346D 
       3461 346E 3464 
       3421 340D 340A 
016C   3400           00751              retlw              0
                      00752 
                      00753 
                      00754 ; Command implementations go here
                      00755 
016D                  00756 holdcurrent_cmd
                      00757         ; Evaluate common third character (on/off) first
                      00758 
016D   3030           00759                 movlw           '0'
016E   0244           00760                 subwf           rcvbuffer+2,w
016F   00BF           00761                 movwf           temp2                   ; temp2 is now the input char - '0'; 0 for off, 
                            1 for on, somthing else for invalid
                      00762         
0170   3C01           00763                 sublw           1                               ; compare to 1
0171   1C03           00764                 btfss           STATUS,C
0172   2946           00765                 goto            bad_cmd                 ; if gt 1 it is bad
                      00766 
                      00767                 ; if you got here, temp2 has either a 0 or 1 (for on or off)
                      00768                 ; figure out which axis
                      00769 
                      00770                 ; same logic for the offset to the axis (x=0,y=1,z=2)
                      00771                 
0173   3058           00772                 movlw           'X'
0174   0243           00773                 subwf           rcvbuffer+1,w
0175   00BE           00774                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      00775 
0176   3C02           00776                 sublw           2                               ; compare to 2
0177   1C03           00777                 btfss           STATUS,C
0178   2946           00778                 goto            bad_cmd                 ; if gt 2 it is bad
                      00779 
                      00780                 ; at this point, offset has the offset to the axis, temp2 has what to set it to
                      00781 
0179   3026           00782                 movlw           xhold                   ; FSR = xhold + offset
017A   0084           00783                 movwf           FSR
017B   083E           00784                 movf            offset,w
017C   0784           00785                 addwf           FSR,f
                      00786 
017D   083F           00787                 movf            temp2,w
017E   0080           00788                 movwf           INDF                    ; ^FSR = temp2
                      00789 
                      00790                 ; Now make sure it is all set the way it should be.
                      00791 
                      00792                 ; check the hold flags, if they are 0, turn off that motor
017F   1C28           00793                 btfss           zhold,0
                      00794                 ; z holding current is off, clear PORTA
0180   0185           00795                 clrf            PORTA
                      00796 
0181   1826           00797                 btfsc           xhold,0
0182   2985           00798                 goto            hold_checky
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 17


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00799         
                      00800                 ; x holding current is off
0183   300F           00801                 movlw           b'00001111'
0184   0588           00802                 andwf           PORTD,f
                      00803 
0185                  00804 hold_checky
0185   1827           00805                 btfsc           yhold,0
0186   2989           00806                 goto            hold_end
                      00807         
                      00808                 ; y holding current is off
0187   30F0           00809                 movlw           b'11110000'
0188   0588           00810                 andwf           PORTD,f
                      00811                 
0189                  00812 hold_end
0189   2908           00813                 goto            ready
                      00814 
                      00815 
018A                  00816 drill_cmd
                      00817 
018A   3030           00818                 movlw           '0'
018B   0243           00819                 subwf           rcvbuffer+1,w
018C   00BF           00820                 movwf           temp2                   ; temp2 is now the input char - '0'; 0 for off, 
                            1 for on, somthing else for invalid
                      00821         
018D   3C01           00822                 sublw           1                               ; compare to 1
018E   1C03           00823                 btfss           STATUS,C
018F   2946           00824                 goto            bad_cmd                 ; if gt 1 it is bad
                      00825 
                      00826                 ; if you got here, temp2 has either a 0 or 1 (for on or off)
0190   083F           00827                 movf            temp2,w
0191   00B8           00828                 movwf           drillRelay
                      00829 
0192   1009           00830                 bcf                     PORTE,0         ; turn it off
0193   1838           00831                 btfsc           drillRelay,0
0194   1409           00832                 bsf                     PORTE,0         ; turn it on
                      00833                 
0195   2908           00834                 goto            ready
                      00835 
                      00836 
0196                  00837 vacuum_cmd
0196   3030           00838                 movlw           '0'
0197   0243           00839                 subwf           rcvbuffer+1,w
0198   00BF           00840                 movwf           temp2                   ; temp2 is now the input char - '0'; 0 for off, 
                            1 for on, somthing else for invalid
                      00841         
0199   3C01           00842                 sublw           1                               ; compare to 1
019A   1C03           00843                 btfss           STATUS,C
019B   2946           00844                 goto            bad_cmd                 ; if gt 1 it is bad
                      00845 
                      00846                 ; if you got here, temp2 has either a 0 or 1 (for on or off)
019C   083F           00847                 movf            temp2,w
019D   00B9           00848                 movwf           vacuumRelay
                      00849 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 18


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

019E   1089           00850                 bcf                     PORTE,1         ; turn it off
019F   1839           00851                 btfsc           vacuumRelay,0
01A0   1489           00852                 bsf                     PORTE,1         ; turn it on
                      00853                                 
01A1   2908           00854                 goto            ready
                      00855 
01A2                  00856 calibrate_cmd
                      00857                 ; figure out which axis
                      00858 
01A2   3058           00859                 movlw           'X'
01A3   0243           00860                 subwf           rcvbuffer+1,w
01A4   00BE           00861                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      00862 
01A5   3C02           00863                 sublw           2                               ; compare to 2
01A6   1C03           00864                 btfss           STATUS,C
01A7   2946           00865                 goto            bad_cmd                 ; if gt 2 it is bad
                      00866 
                      00867                 ; at this point, offset has the index of the axis
                      00868                 ; multiply times two because the location is two bytes
01A8   1003           00869                 bcf                     STATUS,C
01A9   0DBE           00870                 rlf                     offset,f
01AA   302C           00871                 movlw           xlocation                       ; FSR = xlocation+ (offset*2)
01AB   0084           00872                 movwf           FSR
01AC   083E           00873                 movf            offset,w
01AD   0784           00874                 addwf           FSR,f
                      00875 
01AE   0180           00876                 clrf            INDF
01AF   0A84           00877                 incf            FSR,f
01B0   0180           00878                 clrf            INDF
                      00879                 
01B1   2908           00880                 goto            ready
                      00881 
                      00882 
01B2                  00883 set_cmd
                      00884 ; Command processor for: " SDx+nnn<cr> = Set Delay for axis x +/-/= nnn delay",CR,LF
                      00885 ; and                    " SIx=nnn<cr> = Set Inch size on axis x to nnn steps",CR,LF
                      00886 
01B2   3046           00887                 movlw           rcvbuffer+4
01B3   0084           00888                 movwf           FSR
Message[307]: Setting page bits.
01B4   118A 120A 2020 00889                 lcall           ascii2byte
01B7   1804           00890                 btfsc           FSR,0
01B8   2946           00891                 goto            bad_cmd
                      00892 
                      00893                 ; figure out which axis
                      00894 
01B9   3058           00895                 movlw           'X'
01BA   0244           00896                 subwf           rcvbuffer+2,w
01BB   00BE           00897                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      00898 
01BC   3C02           00899                 sublw           2                               ; compare to 2
01BD   1C03           00900                 btfss           STATUS,C
01BE   2946           00901                 goto            bad_cmd                 ; if gt 2 it is bad
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 19


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      00902 
                      00903                 ; at this point, offset has the index of the axis
                      00904 
                      00905                 ; now figure out which value should be changed (put it in FSR)
01BF   0843           00906                 movf    rcvbuffer+1,w
01C0   00BF           00907                 movwf   temp2
                      00908 
01C1   3049           00909                 movlw   'I'
01C2   023F           00910                 subwf   temp2,w
01C3   1D03           00911                 btfss   STATUS,Z
01C4   29C8           00912                 goto    not_an_I
                      00913                 
01C5   3023           00914                 movlw   xinch
01C6   0084           00915                 movwf   FSR
01C7   29CE           00916                 goto    set_value
                      00917 
01C8                  00918 not_an_I
01C8   3044           00919                 movlw   'D'
01C9   023F           00920                 subwf   temp2,w
01CA   1D03           00921                 btfss   STATUS,Z
01CB   2946           00922                 goto    bad_cmd
                      00923                                 
01CC   3020           00924                 movlw   xdelay
01CD   0084           00925                 movwf   FSR
                      00926 
01CE                  00927 set_value
                      00928 
01CE   083E           00929                 movf    offset,w        ; FSR = FSR + offset
01CF   0784           00930                 addwf   FSR,f
                      00931 
                      00932                 ; now deal with the value
01D0   0845           00933                 movf    rcvbuffer+3,w
01D1   00BF           00934                 movwf   temp2
                      00935 
01D2   303D           00936                 movlw   '='
01D3   023F           00937                 subwf   temp2,w
01D4   1D03           00938                 btfss   STATUS,Z
01D5   29D9           00939                 goto    set_not_an_equal
                      00940 
                      00941         ; process = numparm
01D6   083D           00942                 movf    numparm,w       ; ^FSR = numparm
01D7   0080           00943                 movwf   INDF
01D8   2908           00944                 goto    ready
                      00945                 
01D9                  00946 set_not_an_equal
01D9   302B           00947                 movlw   '+'
01DA   023F           00948                 subwf   temp2,w
01DB   1D03           00949                 btfss   STATUS,Z
01DC   29E0           00950                 goto    set_not_a_plus
                      00951 
                      00952         ; process + numparm
01DD   083D           00953                 movf    numparm,w       ; ^FSR += numparm
01DE   0780           00954                 addwf   INDF,f
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 20


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

01DF   2908           00955                 goto    ready
                      00956 
                      00957 
01E0                  00958 set_not_a_plus
01E0   302D           00959                 movlw   '-'
01E1   023F           00960                 subwf   temp2,w
01E2   1D03           00961                 btfss   STATUS,Z
01E3   2946           00962                 goto    bad_cmd
                      00963 
                      00964         ; process - numparm
01E4   083D           00965                 movf    numparm,w       ; ^FSR -= numparm
01E5   0280           00966                 subwf   INDF,f
01E6   2908           00967                 goto    ready
                      00968 
                      00969 
01E7                  00970 list_cmd
                      00971 ; Dumps current status like:
                      00972 ;(X) Axis: Location: (xlocation)  Delay: (xdelay) Steps Per Inch: (xinch)  Holding Current: (xhold)
                      00973 ;Y Axis: Location: nnnnn  Delay: xxx  Steps Per Inch: xxx  Holding Current: 0
                      00974 ;Z Axis: Location: nnnnn  Delay: xxx  Steps Per Inch: xxx  Holding Current: 0
                      00975 ;Drill=0
                      00976 ;Vacuum=0
                      00977 
01E7   01D5           00978                 clrf            axisOffset
                      00979 
01E8                  00980 list_next_axis
01E8   3003           00981                 movlw           3
01E9   0255           00982                 subwf           axisOffset,w
01EA   1803           00983                 btfsc           STATUS,C
01EB   2AAC           00984                 goto            list_axis_done
                      00985 
01EC   3058           00986                 movlw           'X'
01ED   0755           00987                 addwf           axisOffset,w    ; ' results in w = 'X','Y',or 'Z'
                      00988 
Message[307]: Setting page bits.
01EE   118A 120A 2078 00989                 lcall           serout                  ; print the axis
01F1   3001           00990                 movlw           HIGH $
01F2   008A           00991                 movwf           PCLATH
                      00992                 
                      00993                 MacroSendTable  location_table
01F3   3001               M                 movlw           HIGH location_table     
01F4   00FB               M                 movwf           tableH
01F5   30FF               M                 movlw           LOW     location_table
01F6   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
01F7   118A 120A 200A     M                 lcall           sendTable
01FA   3001               M                 movlw           HIGH $          ; restore the proper PCLATH
01FB   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
01FC   118A 120A 2A11 00994           lgoto         list_part2
                      00995 
01FF                  00996 location_table
01FF   3420 3441 3478 00997                 dt                      " Axis: Location: "
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 21


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3469 3473 343A 
       3420 344C 346F 
       3463 3461 3474 
       3469 346F 346E 
       343A 3420 
0210   3400           00998                 retlw           0
                      00999 
0211                  01000 list_part2
                      01001 
                      01002                 ; dump the location
0211   0855           01003                 movf            axisOffset,w
0212   0084           01004                 movwf           FSR
0213   1003           01005                 bcf                     STATUS,C
0214   0D84           01006                 rlf                     FSR,f                   ; FSR = axisOffset*2
0215   302C           01007                 movlw           xlocation               ; FSR += xlocation
0216   0784           01008                 addwf           FSR,f
                      01009 
0217   0800           01010                 movf            INDF,w
0218   00F8           01011                 movwf           HI
                      01012 
0219   0A84           01013                 incf            FSR,f
021A   0800           01014                 movf            INDF,w
021B   00F9           01015                 movwf           LO
                      01016 
Message[307]: Setting page bits.
021C   118A 120A 2093 01017                 lcall           s16b2ascii      ; converts signed value to ascii in sign + digits:5
                      01018                 ; no PCLATH reset because next instruction is long
                      01019 
021F   3070           01020                 movlw           sign
0220   0084           01021                 movwf           FSR
Message[307]: Setting page bits.
0221   118A 120A 207E 01022                 lcall           puts            ; show the digits on the screen
                      01023                 ; no PCLATH reset because next instruction is long
                      01024                 
                      01025                 
                      01026                 MacroSendTable  delay_table
0224   3002               M                 movlw           HIGH delay_table        
0225   00FB               M                 movwf           tableH
0226   3030               M                 movlw           LOW     delay_table
0227   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0228   118A 120A 200A     M                 lcall           sendTable
022B   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
022C   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
022D   118A 120A 2A3A 01027          lgoto          list_part3
                      01028 
0230                  01029 delay_table
0230   3420 3420 3444 01030                 dt                      "  Delay: "
       3465 346C 3461 
       3479 343A 3420 
0239   3400           01031                 retlw           0
                      01032 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 22


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

023A                  01033 list_part3
                      01034 
                      01035 
                      01036                 ; dump the delay
023A   3020           01037                 movlw           xdelay
023B   0084           01038                 movwf           FSR
023C   0855           01039                 movf            axisOffset,w            ; FSR = xlocation+axisOffset
023D   0784           01040                 addwf           FSR,f
                      01041 
023E   01F8           01042                 clrf            HI
                      01043 
023F   0800           01044                 movf            INDF,w
0240   00F9           01045                 movwf           LO
                      01046 
Message[307]: Setting page bits.
0241   118A 120A 20A0 01047                 lcall           c16b2ascii      ; converts to ascii in digits:5
                      01048                 ; no PCLATH reset because next instruction is long
                      01049 
0244   3073           01050                 movlw           digits+2        ; only use last three digits
0245   0084           01051                 movwf           FSR
Message[307]: Setting page bits.
0246   118A 120A 207E 01052                 lcall           puts            ; show the digits on the screen
                      01053                 ; no PCLATH reset because next instruction is long
                      01054 
                      01055 
                      01056                 MacroSendTable  inch_table
0249   3002               M                 movlw           HIGH inch_table         
024A   00FB               M                 movwf           tableH
024B   3055               M                 movlw           LOW     inch_table
024C   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
024D   118A 120A 200A     M                 lcall           sendTable
0250   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
0251   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0252   118A 120A 2A68 01057          lgoto          list_part4
                      01058 
0255                  01059 inch_table
0255   3420 3420 3453 01060                 dt                      "  Steps per Inch: "
       3474 3465 3470 
       3473 3420 3470 
       3465 3472 3420 
       3449 346E 3463 
       3468 343A 3420 
0267   3400           01061                 retlw           0
                      01062 
0268                  01063 list_part4
                      01064 
                      01065                 ; dump the steps per inch
0268   3023           01066                 movlw           xinch
0269   0084           01067                 movwf           FSR
026A   0855           01068                 movf            axisOffset,w            ; FSR = xlocation+axisOffset
026B   0784           01069                 addwf           FSR,f
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 23


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01070 
026C   01F8           01071                 clrf            HI
                      01072 
026D   0800           01073                 movf            INDF,w
026E   00F9           01074                 movwf           LO
                      01075 
Message[307]: Setting page bits.
026F   118A 120A 20A0 01076                 lcall           c16b2ascii      ; converts to ascii in digits:5
                      01077                 ; no PCLATH reset because next instruction is long
                      01078 
0272   3073           01079                 movlw           digits+2        ; only use last three digits
0273   0084           01080                 movwf           FSR
Message[307]: Setting page bits.
0274   118A 120A 207E 01081                 lcall           puts            ; show the digits on the screen
                      01082                 ; no PCLATH reset because next instruction is long
                      01083 
                      01084 
                      01085                 MacroSendTable  holding_table
0277   3002               M                 movlw           HIGH holding_table      
0278   00FB               M                 movwf           tableH
0279   3083               M                 movlw           LOW     holding_table
027A   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
027B   118A 120A 200A     M                 lcall           sendTable
027E   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
027F   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0280   118A 120A 2A97 01086          lgoto          list_part5
                      01087 
0283                  01088 holding_table
0283   3420 3420 3448 01089                 dt                      "  Holding Current: "
       346F 346C 3464 
       3469 346E 3467 
       3420 3443 3475 
       3472 3472 3465 
       346E 3474 343A 
       3420 
0296   3400           01090                 retlw           0
                      01091 
0297                  01092 list_part5
                      01093                 ; Dump the holding current setting
0297   3026           01094                 movlw           xhold
0298   0084           01095                 movwf           FSR
0299   0855           01096                 movf            axisOffset,w            ; FSR = xlocation+axisOffset
029A   0784           01097                 addwf           FSR,f
                      01098 
029B   3030           01099                 movlw           '0'                                     ; convert to ASCII number
029C   0700           01100                 addwf           INDF,w
Message[307]: Setting page bits.
029D   118A 120A 2078 01101                 lcall           serout
                      01102                 ; no PCLATH reset because next instruction is long
                      01103 
02A0   300D           01104                 movlw           CR
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 24


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[307]: Setting page bits.
02A1   118A 120A 2078 01105                 lcall           serout
                      01106                 ; no PCLATH reset because next instruction is long
02A4   300A           01107                 movlw           LF
Message[307]: Setting page bits.
02A5   118A 120A 2078 01108                 lcall           serout
                      01109                 ; no PCLATH reset because next instruction is long
                      01110 
02A8   0AD5           01111                 incf            axisOffset,f
Message[307]: Setting page bits.
02A9   118A 120A 29E8 01112                 lgoto           list_next_axis
                      01113 
02AC                  01114 list_axis_done
                      01115 
                      01116                 MacroSendTable  drill_table
02AC   3002               M                 movlw           HIGH drill_table        
02AD   00FB               M                 movwf           tableH
02AE   30B6               M                 movlw           LOW     drill_table
02AF   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
02B0   118A 120A 200A     M                 lcall           sendTable
02B3   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
02B4   008A               M                 movwf           PCLATH
02B5   2ABD           01117          goto           list_part6
                      01118 
02B6                  01119 drill_table
02B6   3444 3472 3469 01120                 dt                      "Drill="
       346C 346C 343D 
02BC   3400           01121                 retlw           0
                      01122 
02BD                  01123 list_part6
                      01124                 ; Dump the drill relay status
02BD   3030           01125                 movlw           '0'                                     ; convert to ASCII number
02BE   0738           01126                 addwf           drillRelay,w
Message[307]: Setting page bits.
02BF   118A 120A 2078 01127                 lcall           serout
                      01128                 ; no PCLATH reset because next instruction is long
                      01129 
                      01130                 MacroSendTable  vacuum_table
02C2   3002               M                 movlw           HIGH vacuum_table       
02C3   00FB               M                 movwf           tableH
02C4   30CE               M                 movlw           LOW     vacuum_table
02C5   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
02C6   118A 120A 200A     M                 lcall           sendTable
02C9   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
02CA   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
02CB   118A 120A 2AD8 01131          lgoto          list_part7
                      01132 
02CE                  01133 vacuum_table
02CE   340D 340A 3456 01134                 dt                      CR,LF,"Vacuum="
       3461 3463 3475 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 25


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3475 346D 343D 
02D7   3400           01135                 retlw           0
                      01136 
02D8                  01137 list_part7
                      01138                 ; Dump the vacuum relay status
02D8   3030           01139                 movlw           '0'                                     ; convert to ASCII number
02D9   0739           01140                 addwf           vacuumRelay,w
Message[307]: Setting page bits.
02DA   118A 120A 2078 01141                 lcall           serout
                      01142                 ; no PCLATH reset because next instruction is long
                      01143 
02DD                  01144 dump_limits
                      01145 ; Dump X axis limit switches
                      01146 
                      01147                 MacroSendTable  limit_table
02DD   3002               M                 movlw           HIGH limit_table        
02DE   00FB               M                 movwf           tableH
02DF   30E9               M                 movlw           LOW     limit_table
02E0   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
02E1   118A 120A 200A     M                 lcall           sendTable
02E4   3002               M                 movlw           HIGH $          ; restore the proper PCLATH
02E5   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
02E6   118A 120A 2AFA 01148                 lgoto           list_part8
                      01149 
02E9                  01150 limit_table
02E9   340D 340A 344C 01151                 dt                      CR,LF,"Limit Switch: "
       3469 346D 3469 
       3474 3420 3453 
       3477 3469 3474 
       3463 3468 343A 
       3420 
02F9   3400           01152                 retlw           0
                      01153 
02FA                  01154 list_part8
02FA   3058           01155                 movlw           'X'
Message[307]: Setting page bits.
02FB   118A 120A 2078 01156                 lcall           serout
                      01157                 ; no PCLATH reset because next instruction is long
                      01158 
                      01159                 MacroSendTable  min_table
02FE   3003               M                 movlw           HIGH min_table          
02FF   00FB               M                 movwf           tableH
0300   300A               M                 movlw           LOW     min_table
0301   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0302   118A 120A 200A     M                 lcall           sendTable
0305   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0306   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0307   118A 120A 2B15 01160                 lgoto           list_part9
                      01161 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 26


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

030A                  01162 min_table
030A   342D 3461 3478 01163                 dt                      "-axis min="
       3469 3473 3420 
       346D 3469 346E 
       343D 
0314   3400           01164                 retlw           0
                      01165 
0315                  01166 list_part9
0315   3030           01167                 movlw           '0'
0316   1C07           01168                 btfss           PORTC,0
0317   3031           01169                 movlw           '1'
Message[307]: Setting page bits.
0318   118A 120A 2078 01170                 lcall           serout
                      01171                 ; no PCLATH reset because next instruction is long
                      01172 
                      01173                 MacroSendTable  max_table
031B   3003               M                 movlw           HIGH max_table          
031C   00FB               M                 movwf           tableH
031D   3027               M                 movlw           LOW     max_table
031E   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
031F   118A 120A 200A     M                 lcall           sendTable
0322   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0323   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0324   118A 120A 2B2D 01174                 lgoto           list_part10
                      01175 
0327                  01176 max_table
0327   3420 346D 3461 01177                 dt                      " max="
       3478 343D 
032C   3400           01178                 retlw           0
                      01179 
032D                  01180 list_part10
032D   3030           01181                 movlw           '0'
032E   1C87           01182                 btfss           PORTC,1
032F   3031           01183                 movlw           '1'
Message[307]: Setting page bits.
0330   118A 120A 2078 01184                 lcall           serout
                      01185                 ; no PCLATH reset because next instruction is long
                      01186                 
                      01187 ; Dump Y axis limit switches
                      01188 
                      01189                 MacroSendTable  limit_table
0333   3002               M                 movlw           HIGH limit_table        
0334   00FB               M                 movwf           tableH
0335   30E9               M                 movlw           LOW     limit_table
0336   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0337   118A 120A 200A     M                 lcall           sendTable
033A   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
033B   008A               M                 movwf           PCLATH
                      01190 
033C   3059           01191                 movlw           'Y'
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 27


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

Message[307]: Setting page bits.
033D   118A 120A 2078 01192                 lcall           serout
                      01193                 ; no PCLATH reset because next instruction is long
                      01194 
                      01195                 MacroSendTable  min_table
0340   3003               M                 movlw           HIGH min_table          
0341   00FB               M                 movwf           tableH
0342   300A               M                 movlw           LOW     min_table
0343   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0344   118A 120A 200A     M                 lcall           sendTable
0347   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0348   008A               M                 movwf           PCLATH
                      01196 
0349   3030           01197                 movlw           '0'
034A   1D07           01198                 btfss           PORTC,2
034B   3031           01199                 movlw           '1'
Message[307]: Setting page bits.
034C   118A 120A 2078 01200                 lcall           serout
                      01201                 ; no PCLATH reset because next instruction is long
                      01202 
                      01203                 MacroSendTable  max_table
034F   3003               M                 movlw           HIGH max_table          
0350   00FB               M                 movwf           tableH
0351   3027               M                 movlw           LOW     max_table
0352   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0353   118A 120A 200A     M                 lcall           sendTable
0356   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0357   008A               M                 movwf           PCLATH
0358   3030           01204                 movlw           '0'
0359   1E87           01205                 btfss           PORTC,5
035A   3031           01206                 movlw           '1'
Message[307]: Setting page bits.
035B   118A 120A 2078 01207                 lcall           serout
                      01208                 ; no PCLATH reset because next instruction is long
                      01209                 
                      01210 ; Dump Z axis limit switches
                      01211 
                      01212                 MacroSendTable  limit_table
035E   3002               M                 movlw           HIGH limit_table        
035F   00FB               M                 movwf           tableH
0360   30E9               M                 movlw           LOW     limit_table
0361   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0362   118A 120A 200A     M                 lcall           sendTable
0365   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0366   008A               M                 movwf           PCLATH
                      01213 
0367   305A           01214                 movlw           'Z'
Message[307]: Setting page bits.
0368   118A 120A 2078 01215                 lcall           serout
                      01216                 ; no PCLATH reset because next instruction is long
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 28


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01217 
                      01218                 MacroSendTable  min_table
036B   3003               M                 movlw           HIGH min_table          
036C   00FB               M                 movwf           tableH
036D   300A               M                 movlw           LOW     min_table
036E   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
036F   118A 120A 200A     M                 lcall           sendTable
0372   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0373   008A               M                 movwf           PCLATH
                      01219 
0374   3030           01220                 movlw           '0'
0375   1E05           01221                 btfss           PORTA,4
0376   3031           01222                 movlw           '1'
Message[307]: Setting page bits.
0377   118A 120A 2078 01223                 lcall           serout
                      01224                 ; no PCLATH reset because next instruction is long
                      01225 
                      01226                 MacroSendTable  max_table
037A   3003               M                 movlw           HIGH max_table          
037B   00FB               M                 movwf           tableH
037C   3027               M                 movlw           LOW     max_table
037D   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
037E   118A 120A 200A     M                 lcall           sendTable
0381   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0382   008A               M                 movwf           PCLATH
0383   3030           01227                 movlw           '0'
0384   1E85           01228                 btfss           PORTA,5
0385   3031           01229                 movlw           '1'
Message[307]: Setting page bits.
0386   118A 120A 2078 01230                 lcall           serout
                      01231                 ; no PCLATH reset because next instruction is long
                      01232 
Message[307]: Setting page bits.
0389   118A 120A 2908 01233                 lgoto   ready
                      01234 
038C                  01235 manual_cmd
                      01236 ; Implements: MN - Manual axis movement
                      01237 ;
                      01238 ; This starts moving any axis in any direction based on directional keystrokes.  Basically
                      01239 ;  each keystroke moves the specific axis and direction exactly one inch or until the 
                      01240 ;  next keystroke or a limit switch is activated.
                      01241 
038C   1457           01242                 bsf                     manualMode,0    ; set manual mode on
                      01243 
                      01244                 MacroSendTable  manual_table
038D   3003               M                 movlw           HIGH manual_table       
038E   00FB               M                 movwf           tableH
038F   3099               M                 movlw           LOW     manual_table
0390   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0391   118A 120A 200A     M                 lcall           sendTable
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 29


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0394   3003               M                 movlw           HIGH $          ; restore the proper PCLATH
0395   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0396   118A 120A 2C18 01245          lgoto          manual_nextkey
                      01246 
0399                  01247 manual_table
0399   3455 3473 3465 01248                 dt                      "Use the following motion keys:",CR,LF,CR,LF
       3420 3474 3468 
       3465 3420 3466 
       346F 346C 346C 
       346F 3477 3469 
       346E 3467 3420 
       346D 346F 3474 
       3469 346F 346E 
       3420 346B 3465 
       3479 3473 343A 
       340D 340A 340D 
       340A 
03BB   3420 3420 3451 01249                 dt                      "  Q(Z+)  W(Y+)",CR,LF
       3428 345A 342B 
       3429 3420 3420 
       3457 3428 3459 
       342B 3429 340D 
       340A 
03CB   3420 3420 3441 01250                 dt                      "  A(X-)  S(Stop)   D(X+)",CR,LF
       3428 3458 342D 
       3429 3420 3420 
       3453 3428 3453 
       3474 346F 3470 
       3429 3420 3420 
       3420 3444 3428 
       3458 342B 3429 
       340D 340A 
03E5   3420 3420 345A 01251                 dt                      "  Z(Z-)  X(Y-)",CR,LF,CR,LF
       3428 345A 342D 
       3429 3420 3420 
       3458 3428 3459 
       342D 3429 340D 
       340A 340D 340A 
03F7   3450 3472 3465 01252                 dt                      "Press <sp> to exit manual mode",CR,LF
       3473 3473 3420 
       343C 3473 3470 
       343E 3420 3474 
       346F 3420 3465 
       3478 3469 3474 
       3420 346D 3461 
       346E 3475 3461 
       346C 3420 346D 
       346F 3464 3465 
       340D 340A 
0417   3400           01253                 retlw           0
                      01254 
0418                  01255 manual_nextkey
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 30


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01256         ; Make sure there is no overrun
0418   1C98           01257       btfss                     RCSTA,OERR              ; Check for an overrun
0419   2C1C           01258           goto                  manual_readkey
                      01259 
                      01260          ; Reset an overrun condition
041A   1218           01261           bcf                   RCSTA,CREN              ; Stop receiving
041B   1618           01262           bsf                   RCSTA,CREN          ; Re-start receiving
                      01263 
041C                  01264 manual_readkey
                      01265 
                      01266         ; get the next pressed key
041C   1E8C           01267        btfss            PIR1,RCIF      ; Check RCIF  bit in PIR1 register
041D   2C18           01268        goto             manual_nextkey ; RCREG empty or RCIF = 0
                      01269 
041E                  01270 manual_keypress
                      01271         ; process the pressed key
041E   081A           01272        movf             RCREG,w        ; RCREG full or RCIF = 1
                      01273     ; store the received char 
041F   00C1           01274        movwf            rcvchar
                      01275 
                      01276         ; Clear the movement registers
                      01277 
0420   01B2           01278                 clrf            xstepstogo
0421   01B3           01279                 clrf            ystepstogo
0422   01B4           01280                 clrf            zstepstogo
                      01281 
                      01282         ; process the instruction
                      01283 
0423   3053           01284                 movlw           'S'
0424   0241           01285                 subwf           rcvchar,w
0425   1903           01286                 btfsc           STATUS,Z
0426   2C18           01287                 goto            manual_nextkey  ; S = stop and process next key
                      01288 
0427   3051           01289                 movlw           'Q'
0428   0241           01290                 subwf           rcvchar,w
0429   1903           01291                 btfsc           STATUS,Z
042A   2C44           01292                 goto            manual_zplus
                      01293 
042B   305A           01294                 movlw           'Z'
042C   0241           01295                 subwf           rcvchar,w
042D   1903           01296                 btfsc           STATUS,Z
042E   2C49           01297                 goto            manual_zminus
                      01298 
042F   3057           01299                 movlw           'W'
0430   0241           01300                 subwf           rcvchar,w
0431   1903           01301                 btfsc           STATUS,Z
0432   2C4E           01302                 goto            manual_yplus
                      01303 
0433   3058           01304                 movlw           'X'
0434   0241           01305                 subwf           rcvchar,w
0435   1903           01306                 btfsc           STATUS,Z
0436   2C53           01307                 goto            manual_yminus
                      01308                 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 31


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0437   3041           01309                 movlw           'A'
0438   0241           01310                 subwf           rcvchar,w
0439   1903           01311                 btfsc           STATUS,Z
043A   2C5D           01312                 goto            manual_xminus
                      01313 
043B   3044           01314                 movlw           'D'
043C   0241           01315                 subwf           rcvchar,w
043D   1903           01316                 btfsc           STATUS,Z
043E   2C58           01317                 goto            manual_xplus
                      01318 
043F   3020           01319                 movlw           ' '
0440   0241           01320                 subwf           rcvchar,w
0441   1903           01321                 btfsc           STATUS,Z
0442   2908           01322                 goto            ready
                      01323 
0443   2C18           01324                 goto            manual_nextkey
                      01325 
                      01326 
                      01327 ; Now the specific directional moves
                      01328 
0444                  01329 manual_zplus
0444   3000           01330                 movlw           0
0445   00B7           01331                 movwf           zdirection
0446   0825           01332                 movf            zinch,w
0447   00B4           01333                 movwf           zstepstogo
0448   2CB6           01334                 goto            initXYMovement
                      01335 
0449                  01336 manual_zminus
0449   3001           01337                 movlw           1
044A   00B7           01338                 movwf           zdirection
044B   0825           01339                 movf            zinch,w
044C   00B4           01340                 movwf           zstepstogo
044D   2CB6           01341                 goto            initXYMovement
                      01342 
044E                  01343 manual_yplus
044E   3000           01344                 movlw           0
044F   00B6           01345                 movwf           ydirection
0450   0824           01346                 movf            yinch,w
0451   00B3           01347                 movwf           ystepstogo
0452   2CB6           01348                 goto            initXYMovement
                      01349 
0453                  01350 manual_yminus
0453   3001           01351                 movlw           1
0454   00B6           01352                 movwf           ydirection
0455   0824           01353                 movf            yinch,w
0456   00B3           01354                 movwf           ystepstogo
0457   2CB6           01355                 goto            initXYMovement
                      01356 
0458                  01357 manual_xplus
0458   3000           01358                 movlw           0
0459   00B5           01359                 movwf           xdirection
045A   0823           01360                 movf            xinch,w
045B   00B2           01361                 movwf           xstepstogo
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 32


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

045C   2CB6           01362                 goto            initXYMovement
                      01363 
045D                  01364 manual_xminus
045D   3001           01365                 movlw           1
045E   00B5           01366                 movwf           xdirection
045F   0823           01367                 movf            xinch,w
0460   00B2           01368                 movwf           xstepstogo
0461   2CB6           01369                 goto            initXYMovement
                      01370 
                      01371 
0462                  01372 move_cmd
                      01373 ;              012345678901
                      01374 ; Implements:  Mx+nnn[y+mmm]<cr> = Move axis x +/- nnn steps
                      01375 ;  the second axis is optional
                      01376 ;  and "MN<cr>", which goes to manual single axis controls
                      01377 
                      01378 ; First clear the axis movement counters
0462   01B2           01379                 clrf            xstepstogo
0463   01B3           01380                 clrf            ystepstogo
0464   01B4           01381                 clrf            zstepstogo
                      01382 ; and the direction flags (0=forward, 1=backwards)
0465   01B5           01383                 clrf            xdirection
0466   01B6           01384                 clrf            ydirection
0467   01B7           01385                 clrf            zdirection
                      01386 
                      01387 ; Figure out if it is a fixed move or manual move
0468   01D7           01388                 clrf            manualMode
                      01389 
0469   304E           01390                 movlw           'N'
046A   0243           01391                 subwf           rcvbuffer+1,w
046B   1903           01392                 btfsc           STATUS,Z
046C   2B8C           01393                 goto            manual_cmd
                      01394 
                      01395 ; Start by interpreting the number for the first axis
046D   3045           01396                 movlw           rcvbuffer+3
046E   0084           01397                 movwf           FSR
Message[307]: Setting page bits.
046F   118A 120A 2020 01398                 lcall           ascii2byte
0472   1804           01399                 btfsc           FSR,0
0473   2946           01400                 goto            bad_cmd
                      01401 
                      01402                 ; figure out which axis
                      01403 
0474   3058           01404                 movlw           'X'
0475   0243           01405                 subwf           rcvbuffer+1,w
0476   00BE           01406                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      01407 
0477   3C02           01408                 sublw           2                               ; compare to 2
0478   1C03           01409                 btfss           STATUS,C
0479   2946           01410                 goto            bad_cmd                 ; if gt 2 it is bad
                      01411 
                      01412                 ; at this point, offset has the index of the axis
                      01413                 ; now figure out the direction
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 33


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

047A   3035           01414                 movlw   xdirection
047B   073E           01415                 addwf   offset,w
047C   0084           01416                 movwf   FSR                                     ; FSR = xdirection+offset
                      01417 
047D   0844           01418                 movf    rcvbuffer+2,w
047E   00BF           01419                 movwf   temp2
                      01420 
047F   302B           01421                 movlw   '+'
0480   023F           01422                 subwf   temp2,w
0481   1D03           01423                 btfss   STATUS,Z
0482   2C85           01424                 goto    move_not_plus
0483   0180           01425                 clrf    INDF                            ; if '+', direction flag is 0
0484   2C8B           01426                 goto    direction_done
                      01427 
0485                  01428 move_not_plus
0485   302D           01429                 movlw   '-'
0486   023F           01430                 subwf   temp2,w
0487   1D03           01431                 btfss   STATUS,Z
0488   2946           01432                 goto    bad_cmd                         ; if not '-' either, it is bad command
                      01433 
                      01434                 ; direction is '-'
0489   3001           01435                 movlw   1       
048A   0080           01436                 movwf   INDF                            ; if '-', direction is 1
                      01437 
048B                  01438 direction_done
                      01439                 ; now set the appropriate step counter
048B   3032           01440                 movlw   xstepstogo
048C   073E           01441                 addwf   offset,w
048D   0084           01442                 movwf   FSR                                     ; FSR = xstepstogo + offset
                      01443                 
048E   083D           01444                 movf    numparm,w
048F   0080           01445                 movwf   INDF
                      01446                 
                      01447 
                      01448                 ; Check for a second axis in the command and process it if needed
                      01449 
0490   08C8           01450                 movf            rcvbuffer+6,f
0491   1903           01451                 btfsc           STATUS,Z        
0492   2CB6           01452                 goto            initXYMovement  ; If the command ends with null, get out                
                      01453 
                      01454                 ; If we get here, there is a second axis to process
                      01455 
0493   304A           01456                 movlw           rcvbuffer+8
0494   0084           01457                 movwf           FSR
Message[307]: Setting page bits.
0495   118A 120A 2020 01458                 lcall           ascii2byte
0498   1804           01459                 btfsc           FSR,0
0499   2946           01460                 goto            bad_cmd
                      01461 
                      01462                 ; figure out which axis
                      01463 
049A   3058           01464                 movlw           'X'
049B   0248           01465                 subwf           rcvbuffer+6,w
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 34


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

049C   00BE           01466                 movwf           offset                  ; offset has 0=x,1=y,2=z or something bad
                      01467 
049D   3C02           01468                 sublw           2                               ; compare to 2
049E   1C03           01469                 btfss           STATUS,C
049F   2946           01470                 goto            bad_cmd                 ; if gt 2 it is bad
                      01471 
                      01472                 ; at this point, offset has the index of the axis
                      01473                 ; now figure out the direction
04A0   3035           01474                 movlw   xdirection
04A1   073E           01475                 addwf   offset,w
04A2   0084           01476                 movwf   FSR                                     ; FSR = xdirection+offset
                      01477 
04A3   0849           01478                 movf    rcvbuffer+7,w
04A4   00BF           01479                 movwf   temp2
                      01480 
04A5   302B           01481                 movlw   '+'
04A6   023F           01482                 subwf   temp2,w
04A7   1D03           01483                 btfss   STATUS,Z
04A8   2CAB           01484                 goto    move_not_plus2
04A9   0180           01485                 clrf    INDF                            ; if '+', direction flag is 0
04AA   2CB1           01486                 goto    direction_done2
                      01487 
04AB                  01488 move_not_plus2
04AB   302D           01489                 movlw   '-'
04AC   023F           01490                 subwf   temp2,w
04AD   1D03           01491                 btfss   STATUS,Z
04AE   2946           01492                 goto    bad_cmd                         ; if not '-' either, it is bad command
                      01493 
                      01494                 ; direction is '-'
04AF   3001           01495                 movlw   1       
04B0   0080           01496                 movwf   INDF                            ; if '-', direction is 1
                      01497 
04B1                  01498 direction_done2
                      01499                 ; now set the appropriate step counter
04B1   3032           01500                 movlw   xstepstogo
04B2   073E           01501                 addwf   offset,w
04B3   0084           01502                 movwf   FSR                                     ; FSR = xstepstogo + offset
                      01503                 
04B4   083D           01504                 movf    numparm,w
04B5   0080           01505                 movwf   INDF
                      01506 
                      01507 
04B6                  01508 initXYMovement
                      01509 ;
                      01510 ; Initialize the factors for moving xy axis using a modified Bresenham's algorithm
                      01511 ;
04B6   0832           01512                 movf    xstepstogo,w
04B7   0233           01513                 subwf   ystepstogo,w    ; compare x and y steps to go - pick the highest
04B8   1803           01514                 btfsc   STATUS,C
                      01515                 ; x is higher 
04B9   2CC1           01516                 goto    yisfast
                      01517 
04BA                  01518 xisfast ; initialize for x as the fast axis
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 35


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04BA   30FF           01519                 movlw   255
04BB   00DC           01520                 movwf   xfast   ; xfast is non-zero e.g. fast axis (parallel)
04BC   0833           01521                 movf    ystepstogo,w
04BD   00DB           01522                 movwf   efast   ; efast = ystepstogo (error for a step in the fast direction)
04BE   0832           01523                 movf    xstepstogo,w
04BF   00DA           01524                 movwf   eslow   ; eslow = xstepstogo (error for a step in the slow direction)
04C0   2CC6           01525                 goto    initErrorFactor
                      01526 
04C1                  01527 yisfast ; initialize for y as the fast axis
04C1   01DC           01528                 clrf    xfast   ; xfast is zero e.g slow axis so z is fast (diagonal)
04C2   0832           01529                 movf    xstepstogo,w
04C3   00DB           01530                 movwf   efast   ; efast = xstepstogo (error for a step in the fast direction)
04C4   0833           01531                 movf    ystepstogo,w
04C5   00DA           01532                 movwf   eslow   ; eslow = ystepstogo (error for a step in the slow direction)
                      01533 
                      01534 
04C6                  01535 initErrorFactor 
04C6   01D9           01536                 clrf    errorFactor+1   ; high byte  //TODO remove this???
04C7   085A           01537                 movf    eslow,w
04C8   00D8           01538                 movwf   errorFactor
04C9   1003           01539                 bcf             STATUS,C
04CA   0CD8           01540                 rrf             errorFactor,f   ; errorFactor starts as eslow / 2
                      01541 
                      01542 ;
                      01543 ; This is where all movement commands end up with the stepstogo and direction flags properly set
                      01544 ;
04CB                  01545 move_the_steppers
04CB   01BA           01546                 clrf            count1          ; start with no delay
04CC   01D6           01547                 clrf            whichMotors ; start with no motors moving 0=PORTD, 2=PORTA
                      01548 
                      01549 ; start with x and y NOT stepping
04CD   01DD           01550                 clrf            stepx
04CE   01DE           01551                 clrf            stepy
                      01552 
                      01553 ; Skip the calculation of the x and y motors if there are no steps left for either
                      01554                 
04CF   08B2           01555                 movf            xstepstogo,f
04D0   1D03           01556                 btfss           STATUS,Z
04D1   2CD5           01557                 goto            whichXYStep
04D2   08B3           01558                 movf            ystepstogo,f
04D3   1903           01559                 btfsc           STATUS,Z
04D4   2CEC           01560                 goto            processSteps
                      01561 
                      01562 ; should only get here if either x or y steps to go is non-zero - skip if both are zero
                      01563 
04D5                  01564 whichXYStep
                      01565 ; 
                      01566 ; Determine x/y movement using the error factors
                      01567 ;
04D5   3000           01568                 movlw           0x00                    ; high bit of eFast (always negative!)
04D6   00F7           01569                 movwf           temp
04D7   085B           01570                 movf            efast,w
04D8   02D8           01571                 subwf           errorFactor,f   ; errorFactor -= efast
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 36


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

04D9   0877           01572                 movf            temp,w                  ; high bit of source (always negative!)
04DA   1C03           01573                 btfss           STATUS,C                ; check for a carry (borrow) (actaully borrow is
                             NOT carry, so logic is reversed)
04DB   0F77           01574                 incfsz          temp,w                  ; sets carry/zero if not skipped (overflows)
04DC   02D9           01575                 subwf           errorFactor+1,f ; 
                      01576 
04DD   1BD9           01577                 btfsc           errorFactor+1,7 ; high bit is in the second byte
04DE   2CE4           01578                 goto            diagonalStep    ; diagonal if < 0
                      01579 
04DF                  01580 parallelStep    ; should be here if the errorFactor >=0
                      01581                 ;; take one step in the fast direction
04DF   085C           01582                 movf            xfast,w
04E0   00DD           01583                 movwf           stepx   ; stepx = xfast
04E1   00DE           01584                 movwf           stepy
04E2   09DE           01585                 comf            stepy,f ; stepy is the opposite of xfast
04E3   2CEC           01586                 goto            processSteps
                      01587 
04E4                  01588 diagonalStep    ; should be here if the errorFactor < 0
04E4   085A           01589                 movf            eslow,w
04E5   07D8           01590                 addwf           errorFactor,f   ; adjust errorFactor for the diagonal step
04E6   1803           01591                 btfsc           STATUS,C                
04E7   0AD9           01592                 incf            errorFactor+1,f ; clear the upper bit 
                      01593                 
04E8   30FF           01594                 movlw           255             ; all bits on 
04E9   00DD           01595                 movwf           stepx
04EA   00DE           01596                 movwf           stepy
04EB   2CEC           01597                 goto            processSteps
                      01598 
                      01599 
04EC                  01600 processSteps
                      01601 ; process each axis
                      01602 
04EC   08DD           01603                 movf            stepx,f
04ED   1903 2D08      01604                 bz                      calcYaxis
                      01605 
                      01606                 ; safety catch - skip it if xstepstogo is zero
04EF   08B2           01607                 movf            xstepstogo,f
04F0   1903 2D08      01608                 bz                      calcYaxis
                      01609 
                      01610                 ; process X axis - it has some steps to do
04F2   03B2           01611                 decf            xstepstogo,f
04F3   1456           01612                 bsf                     whichMotors,0
                      01613 
                      01614                 ; update the location
                      01615 
04F4   1835           01616                 btfsc           xdirection,0
04F5   2CFB           01617                 goto            decrx
                      01618 
04F6   3001           01619                 movlw           1
04F7   07AD           01620                 addwf           xlocation+1,f
04F8   1803           01621                 btfsc           STATUS,C
04F9   0AAC           01622                 incf            xlocation+0,f
04FA   2CFF           01623                 goto            calcx
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 37


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01624 
04FB                  01625 decrx   
04FB   3001           01626                 movlw           1
04FC   02AD           01627                 subwf           xlocation+1,f
04FD   1C03           01628                 btfss           STATUS,C
04FE   03AC           01629                 decf            xlocation+0,f
                      01630 
                      01631 
04FF                  01632 calcx
                      01633                 ; calculate the values for the motor coils
04FF   3000           01634                 movlw           0
0500   00D5           01635                 movwf           axisOffset
Message[307]: Setting page bits.
0501   118A 120A 20D5 01636                 lcall           calculateStep
0504   3005           01637                 movlw           HIGH $
0505   008A           01638                 movwf           PCLATH
                      01639                 
0506   0820           01640                 movf            xdelay,w
0507   00BA           01641                 movwf           count1                          ; store the delay for x axis
                      01642 
0508                  01643 calcYaxis
0508   085E           01644                 movf            stepy,w
0509   1903 2D28      01645                 bz                      calcZaxis
                      01646 
                      01647                 ; safety catch - skip it if ystepstogo is zero
050B   08B3           01648                 movf            ystepstogo,f
050C   1903 2D28      01649                 bz                      calcZaxis
                      01650 
                      01651                 ; process Y axis - it has steps to go
050E   03B3           01652                 decf            ystepstogo,f
050F   1456           01653                 bsf                     whichMotors,0
                      01654 
                      01655                 ; update the location
                      01656 
0510   1836           01657                 btfsc           ydirection,0
0511   2D17           01658                 goto            decry
                      01659 
0512   3001           01660                 movlw           1
0513   07AF           01661                 addwf           ylocation+1,f
0514   1803           01662                 btfsc           STATUS,C
0515   0AAE           01663                 incf            ylocation+0,f
0516   2D1B           01664                 goto            calcy
                      01665 
0517                  01666 decry   
0517   3001           01667                 movlw           1
0518   02AF           01668                 subwf           ylocation+1,f
0519   1C03           01669                 btfss           STATUS,C
051A   03AE           01670                 decf            ylocation+0,f
                      01671 
                      01672 
051B                  01673 calcy
                      01674                 ; calculate the values for the motor coils
051B   3001           01675                 movlw           1
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 38


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

051C   00D5           01676                 movwf           axisOffset
Message[307]: Setting page bits.
051D   118A 120A 20D5 01677                 lcall           calculateStep
0520   3005           01678                 movlw           HIGH $
0521   008A           01679                 movwf           PCLATH
                      01680                 
0522   0821           01681                 movf            ydelay,w
0523   023A           01682                 subwf           count1,w
0524   1803           01683                 btfsc           STATUS,C
0525   2D28           01684                 goto            calcZaxis                       ; this means count1 is larger than ydela
                            y
                      01685 
0526   0821           01686                 movf            ydelay,w
0527   00BA           01687                 movwf           count1                          ; store the delay for y axis
                      01688 
0528                  01689 calcZaxis
0528   0834           01690                 movf            zstepstogo,w
0529   1903 2D45      01691                 bz                      doMotors
                      01692 
                      01693                 ; process Z axis - it has steps to go
052B   03B4           01694                 decf            zstepstogo,f
052C   1556           01695                 bsf                     whichMotors,2
                      01696 
                      01697                 ; update the location
                      01698 
052D   1837           01699                 btfsc           zdirection,0
052E   2D34           01700                 goto            decrz
                      01701 
052F   3001           01702                 movlw           1
0530   07B1           01703                 addwf           zlocation+1,f
0531   1803           01704                 btfsc           STATUS,C
0532   0AB0           01705                 incf            zlocation+0,f
0533   2D38           01706                 goto            calcz
                      01707 
0534                  01708 decrz   
0534   3001           01709                 movlw           1
0535   02B1           01710                 subwf           zlocation+1,f
0536   1C03           01711                 btfss           STATUS,C
0537   03B0           01712                 decf            zlocation+0,f
                      01713 
0538                  01714 calcz
                      01715                 ; calculate the values for the motor coils
0538   3002           01716                 movlw           2
0539   00D5           01717                 movwf           axisOffset
Message[307]: Setting page bits.
053A   118A 120A 20D5 01718                 lcall           calculateStep
053D   3005           01719                 movlw           HIGH $
053E   008A           01720                 movwf           PCLATH
                      01721                 
053F   0822           01722                 movf            zdelay,w
0540   023A           01723                 subwf           count1,w
0541   1803           01724                 btfsc           STATUS,C
0542   2D45           01725                 goto            doMotors                        ; this means count1 is larger than zdela
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 39


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                            y
                      01726 
0543   0822           01727                 movf            zdelay,w
0544   00BA           01728                 movwf           count1                          ; store the delay for z axis
                      01729 
0545                  01730 doMotors
                      01731                 ; move the actual motors and wait the delay time
                      01732                 ; probably should check for interupts here (serial, stop button, and limit switches)
                      01733 
                      01734 ; So, how to figure out which motors to move
                      01735 
                      01736 ; Move the ZAxis motor
                      01737 
                      01738 
0545   08D6           01739                 movf            whichMotors,f
0546   1903           01740                 btfsc           STATUS,Z
0547   2DBE           01741                 goto            doneMoving
                      01742 
0548   1D56           01743                 btfss           whichMotors,2           ; move z axis?
0549   2D4C           01744                 goto            xyMotors
                      01745 
                      01746                 ; set PORTA correctly
                      01747 
054A   082B           01748                 movf            zcoils,w
054B   0085           01749                 movwf           PORTA
                      01750 
054C                  01751 xyMotors
                      01752 
054C   1C56           01753                 btfss           whichMotors,0           ; move x or y axis?
054D   2D54           01754                 goto            pause
                      01755 
054E   0829           01756                 movf            xcoils,w
054F   00BF           01757                 movwf           temp2
0550   0EBF           01758                 swapf           temp2,f                 ; x in high bits
                      01759 
0551   082A           01760                 movf            ycoils,w
0552   043F           01761                 iorwf           temp2,w                 ; y in low bits
                      01762 
0553   0088           01763                 movwf           PORTD
                      01764                 
0554                  01765 pause
0554   08BA           01766         movf    count1,f
0555   1903 2D62      01767                 bz              checkHold
                      01768 
                      01769         ifndef  Debug
0557   255B           01770 loop    call    timer           ;Wait 1msec
0558   0BBA           01771         decfsz  count1,f        ;count - 1 = 0 ?
0559   2D57           01772         goto    loop            ;No. Continue
                      01773         else
                      01774                 nop
                      01775                 nop
                      01776                 nop
                      01777         endif
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 40


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01778 
                      01779 
055A   2D62           01780                 goto    checkHold
                      01781 
                      01782 ; Putting the simple timer subroutine here so it is a short call
                      01783 ;*************  1msec Timer Subroutine  *****************
055B                  01784 timer
                      01785         ifndef Debug
055B   30C8           01786         movlw   d'200'          ;Set loop count
055C   00BB           01787         movwf   count2          ;Save loop count
055D   0000           01788 tmlp    nop                     ;Time adjust
055E   0000           01789         nop                     ;Time adjust
055F   0BBB           01790         decfsz  count2,f        ;count - 1 = 0 ?
0560   2D5D           01791         goto    tmlp            ;No. Continue
                      01792         else
                      01793                 nop     
                      01794                 nop
                      01795                 nop
                      01796                 nop
                      01797                 nop     
                      01798                 nop
                      01799         endif
0561   0008           01800         return                  ;Yes. Count end
                      01801 
                      01802 
                      01803 
0562                  01804 checkHold
                      01805                 ; check the hold flags, if they are 0, turn off that motor
0562   1C28           01806                 btfss           zhold,0
                      01807                 ; z holding current is off, clear PORTA
0563   0185           01808                 clrf            PORTA
                      01809 
0564   1826           01810                 btfsc           xhold,0
0565   2D68           01811                 goto            checkyhold
                      01812         
                      01813                 ; x holding current is off
0566   300F           01814                 movlw           b'00001111'
0567   0588           01815                 andwf           PORTD,f
                      01816 
0568                  01817 checkyhold
0568   1827           01818                 btfsc           yhold,0
0569   2D97           01819                 goto            check_limits
                      01820         
                      01821                 ; y holding current is off
056A   30F0           01822                 movlw           b'11110000'
056B   0588           01823                 andwf           PORTD,f
                      01824 
056C                  01825 check_keypress
056C   1E8C           01826                 btfss           PIR1,RCIF               ; Check for a serial receive
056D   2D97           01827                 goto            check_limits
                      01828 
                      01829                 ; in manual mode, go back to key processing
056E   1857           01830                 btfsc           manualMode,0
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 41


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

056F   2C1E           01831                 goto            manual_keypress
                      01832 
                      01833                 ; any keypress aborts in programmed move mode
                      01834 
                      01835                 ; read and discard the character
0570   081A           01836           movf      RCREG,w
                      01837           ; store the received char 
0571   00C1           01838           movwf         rcvchar
                      01839 
                      01840                 MacroSendTable  abort_table
0572   3005               M                 movlw           HIGH abort_table        
0573   00FB               M                 movwf           tableH
0574   307E               M                 movlw           LOW     abort_table
0575   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0576   118A 120A 200A     M                 lcall           sendTable
0579   3005               M                 movlw           HIGH $          ; restore the proper PCLATH
057A   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
057B   118A 120A 2DBE 01841                 lgoto           doneMoving
                      01842 
057E                  01843 abort_table
057E   340D 340A 3453 01844                 dt                      CR,LF,"SERIAL RECEIVE ABORT",CR,LF
       3445 3452 3449 
       3441 344C 3420 
       3452 3445 3443 
       3445 3449 3456 
       3445 3420 3441 
       3442 344F 3452 
       3454 340D 340A 
0596   3400           01845                 retlw           0
                      01846 
0597                  01847 check_limits
                      01848 
0597   1C07           01849                 btfss           PORTC,0
0598   2DA4           01850                 goto            limit_error
                      01851                 
0599   1C87           01852                 btfss           PORTC,1
059A   2DA4           01853                 goto            limit_error
                      01854         
059B   1D07           01855                 btfss           PORTC,2
059C   2DA4           01856                 goto            limit_error
                      01857 
059D   1E87           01858                 btfss           PORTC,5
059E   2DA4           01859                 goto            limit_error
                      01860 
059F   1E05           01861                 btfss           PORTA,4
05A0   2DA4           01862                 goto            limit_error
                      01863                 
05A1   1E85           01864                 btfss           PORTA,5
05A2   2DA4           01865                 goto            limit_error
                      01866 
05A3   2CCB           01867                 goto            move_the_steppers
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 42


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      01868 
                      01869 
05A4                  01870 limit_error
                      01871         ; if we get here, we have to stop stepping because a limit switch is activated
                      01872 
                      01873                 MacroSendTable  limit_error_table
05A4   3005               M                 movlw           HIGH limit_error_table  
05A5   00FB               M                 movwf           tableH
05A6   30AE               M                 movlw           LOW     limit_error_table
05A7   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
05A8   118A 120A 200A     M                 lcall           sendTable
05AB   3005               M                 movlw           HIGH $          ; restore the proper PCLATH
05AC   008A               M                 movwf           PCLATH
05AD   2DBE           01874                 goto            doneMoving
                      01875 
05AE                  01876 limit_error_table
05AE   340D 340A 344C 01877                 dt                      CR,LF,"LIMIT ERROR",CR,LF
       3449 344D 3449 
       3454 3420 3445 
       3452 3452 344F 
       3452 340D 340A 
05BD   3400           01878                 retlw           0
                      01879 
05BE                  01880 doneMoving
05BE   1857           01881                 btfsc   manualMode,0
05BF   2C18           01882                 goto    manual_nextkey
                      01883 
05C0   2908           01884                 goto    ready
                      01885 
                      01886 
05C1                  01887 save_cmd
                      01888         ; EEPROM Read from power-up config - uses temp as the memory location
                      01889 
05C1   3009           01890         movlw   pwrUpCfgEnd-pwrUpCfg    ; store them number of loops
05C2   00F7           01891         movwf   temp
                      01892 
05C3   1283 1703      01893         BANKSEL EEADR
05C5   3026           01894         movlw   pwrUpCfg-0x2100
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05C6   008D           01895         movwf   EEADR                   ; store the start of EEPROM to write
05C7   3020           01896         movlw   H'20'                   ; store the start of RAM to read
05C8   0084           01897         movwf   FSR
                      01898         
05C9   138B           01899         bcf             INTCON, GIE     ; no interrupts allowed
                      01900 
05CA                  01901 eepromwrite
05CA   1283 1303      01902         BANKSEL H'20'           ; select bank 0 for the ram
05CC   0800           01903         movf    INDF,w          ; indirect load of the data to write
05CD   1283 1703      01904         BANKSEL EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05CF   008C           01905         movwf   EEDATA          
05D0   1283 1303      01906         BANKSEL PIR2
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 43


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05D2   120D           01907         bcf             PIR2,EEIF
05D3   1683 1703      01908         BANKSEL EECON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05D5   138C           01909         bcf             EECON1, EEPGD   ; not program memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05D6   150C           01910         bsf             EECON1, WREN    ; Enable writes
                      01911         ; Required sequence
05D7   3055           01912         movlw   55h
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05D8   008D           01913         movwf   EECON2
05D9   30AA           01914         movlw   0AAh
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05DA   008D           01915         movwf   EECON2
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05DB   148C           01916         bsf             EECON1,WR
                      01917         ; end required sequence
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05DC   110C           01918         bcf             EECON1,WREN
05DD   1283 1303      01919         BANKSEL PIR2
05DF                  01920 pollWR
05DF   1E0D           01921         btfss   PIR2,EEIF       ; loop until the write is complete
05E0   2DDF           01922         goto    pollWR
                      01923 
05E1   0A84           01924         incf    FSR,f           ; address of ram
05E2   1283 1703      01925         BANKSEL EEADR
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
05E4   0A8D           01926         incf    EEADR,f         ; address of rom
05E5   0BF7           01927         decfsz  temp,f  ; loop loopvar times 
05E6   2DCA           01928         goto    eepromwrite
                      01929 
                      01930         ; done writing
                      01931 
05E7   1283 1303      01932         BANKSEL H'20'           ; back to bank 0
                      01933 
05E9   2908           01934         goto    ready
                      01935 
                      01936 
05EA   3042           01937 notdone   movlw         rcvbuffer
05EB   0084           01938           movwf         FSR
Message[307]: Setting page bits.
05EC   118A 120A 207E 01939           lcall                 puts
                      01940           
                      01941                   MacroSendTable        notdone_table
05EF   3005               M                 movlw           HIGH notdone_table      
05F0   00FB               M                 movwf           tableH
05F1   30F9               M                 movlw           LOW     notdone_table
05F2   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
05F3   118A 120A 200A     M                 lcall           sendTable
05F6   3005               M                 movlw           HIGH $          ; restore the proper PCLATH
05F7   008A               M                 movwf           PCLATH
05F8   2E1B           01942                   goto          help_cmd
                      01943 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 44


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

05F9                  01944 notdone_table
05F9   3420 342D 3420 01945          dt                     " - Command not implemented yet!",CR,LF
       3443 346F 346D 
       346D 3461 346E 
       3464 3420 346E 
       346F 3474 3420 
       3469 346D 3470 
       346C 3465 346D 
       3465 346E 3474 
       3465 3464 3420 
       3479 3465 3474 
       3421 340D 340A 
061A   3400           01946              retlw              0
                      01947 
                      01948        
061B                  01949 help_cmd  
                      01950                   MacroSendTable        help_table
061B   3006               M                 movlw           HIGH help_table         
061C   00FB               M                 movwf           tableH
061D   3027               M                 movlw           LOW     help_table
061E   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
061F   118A 120A 200A     M                 lcall           sendTable
0622   3006               M                 movlw           HIGH $          ; restore the proper PCLATH
0623   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
0624   118A 120A 2908 01951           lgoto         ready
                      01952 
0627                  01953 help_table
0627   3443 346F 346D 01954                 dt                      "Commands:",CR,LF
       346D 3461 346E 
       3464 3473 343A 
       340D 340A 
0632   3420 344D 344E 01955                 dt                      " MN<cr> = Manual Control",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 344D 3461 
       346E 3475 3461 
       346C 3420 3443 
       346F 346E 3474 
       3472 346F 346C 
       340D 340A 
064C   3420 344D 3478 01956                 dt                      " Mx+nnn[y+mmm]<cr> = Move axis x +/- nnn steps",CR,LF
       342B 346E 346E 
       346E 345B 3479 
       342B 346D 346D 
       346D 345D 343C 
       3463 3472 343E 
       3420 343D 3420 
       344D 346F 3476 
       3465 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 45


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       342B 342F 342D 
       3420 346E 346E 
       346E 3420 3473 
       3474 3465 3470 
       3473 340D 340A 
067C   3420 3443 3478 01957                 dt                      " Cx<cr> = Calibrate axis x (reset to 0)",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 3443 3461 
       346C 3469 3462 
       3472 3461 3474 
       3465 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       3428 3472 3465 
       3473 3465 3474 
       3420 3474 346F 
       3420 3430 3429 
       340D 340A 
06A5   3420 3453 3444 01958                 dt                      " SDx+nnn<cr> = Set Delay for axis x +/-/= nnn delay",CR,LF
       3478 342B 346E 
       346E 346E 343C 
       3463 3472 343E 
       3420 343D 3420 
       3453 3465 3474 
       3420 3444 3465 
       346C 3461 3479 
       3420 3466 346F 
       3472 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       342B 342F 342D 
       342F 343D 3420 
       346E 346E 346E 
       3420 3464 3465 
       346C 346
06DA   3420 3453 3449 01959                 dt                      " SIx=nnn<cr> = Set Inch size on axis x to nnn steps",CR,LF
       3478 343D 346E 
       346E 346E 343C 
       3463 3472 343E 
       3420 343D 3420 
       3453 3465 3474 
       3420 3449 346E 
       3463 3468 3420 
       3473 3469 347A 
       3465 3420 346F 
       346E 3420 3461 
       3478 3469 3473 
       3420 3478 3420 
       3474 346F 3420 
       346E 346E 346E 
       3420 3473 3474 
       3465 347
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 46


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

070F   3420 344C 343C 01960                 dt                      " L<cr> = Lists current settings and location",CR,LF
       3463 3472 343E 
       3420 343D 3420 
       344C 3469 3473 
       3474 3473 3420 
       3463 3475 3472 
       3472 3465 346E 
       3474 3420 3473 
       3465 3474 3474 
       3469 346E 3467 
       3473 3420 3461 
       346E 3464 3420 
       346C 346F 3463 
       3461 3474 3469 
       346F 346E 340D 
       340A 
073D   3420 3448 3478 01961                 dt                      " Hx0 = Holding current for axis x Off (0) or On (1)",CR,LF
       3430 3420 343D 
       3420 3448 346F 
       346C 3464 3469 
       346E 3467 3420 
       3463 3475 3472 
       3472 3465 346E 
       3474 3420 3466 
       346F 3472 3420 
       3461 3478 3469 
       3473 3420 3478 
       3420 344F 3466 
       3466 3420 3428 
       3430 3429 3420 
       346F 3472 3420 
       344F 346E 3420 
       3428 343
0772   3420 3444 3430 01962                 dt                      " D0<cr> = Drill Off (0) or On (1)",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 3444 3472 
       3469 346C 346C 
       3420 344F 3466 
       3466 3420 3428 
       3430 3429 3420 
       346F 3472 3420 
       344F 346E 3420 
       3428 3431 3429 
       340D 340A 
0795   3420 3456 3430 01963                 dt                      " V0<cr> = Vacuum Off (0) or On (1)",CR,LF
       343C 3463 3472 
       343E 3420 343D 
       3420 3456 3461 
       3463 3475 3475 
       346D 3420 344F 
       3466 3466 3420 
       3428 3430 3429 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 47


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

       3420 346F 3472 
       3420 344F 346E 
       3420 3428 3431 
       3429 340D 340A 
07B9   3420 3442 343C 01964                 dt                      " B<cr> = Backup startup config",CR,LF
       3463 3472 343E 
       3420 343D 3420 
       3442 3461 3463 
       346B 3475 3470 
       3420 3473 3474 
       3461 3472 3474 
       3475 3470 3420 
       3463 346F 346E 
       3466 3469 3467 
       340D 340A 
07D9   3420 343F 343C 01965                 dt                      " ?<cr> = Dump this message",CR,LF
       3463 3472 343E 
       3420 343D 3420 
       3444 3475 346D 
       3470 3420 3474 
       3468 3469 3473 
       3420 346D 3465 
       3473 3473 3461 
       3467 3465 340D 
       340A 
07F5   3400           01966                 retlw           0
                      01967 
                      01968 
                      01969 
                      01970 ;****************  Initial Process  *********************
                      01971 ; Note that this is at the end because page 0 is the best place for subroutines
07F6                  01972 init
07F6   01F6           01973                 clrf            known_zero ; this MUST be zero 
                      01974 
                      01975 ; Initialize Bank 1 registers 
                      01976 
07F7   1683 1303      01977                 BANKSEL         TRISA
07F9   3080           01978                 movlw           b'10000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07FA   0081           01979                 movwf           OPTION_REG
                      01980 
07FB   3030           01981                 movlw           b'110000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07FC   0085           01982                 movwf           TRISA
                      01983 
07FD   30FF           01984                 movlw           b'11111111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
07FE   0086           01985                 movwf           TRISB
                      01986 
07FF   30FF           01987                 movlw           b'11111111'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0800   0087           01988                 movwf           TRISC
                      01989 
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 48


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0801   3000           01990                 movlw           b'00000000'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0802   0088           01991                 movwf           TRISD
                      01992 
0803   3004           01993                 movlw           b'100'
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0804   0089           01994                 movwf           TRISE
                      01995 
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0805   018C           01996                 clrf            PIE1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0806   018D           01997                 clrf            PIE2
                      01998 
0807   3006           01999                 movlw           0x06
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0808   009F           02000                 movwf           ADCON1
                      02001 
                      02002 
                      02003 ;       Bank 0 initialization
                      02004 
0809   1283 1303      02005                 BANKSEL         PORTA           ; back to bank 0
                      02006 
080B   018B           02007                 clrf            INTCON
                      02008 
080C   018C           02009                 clrf            PIR1
080D   018D           02010                 clrf            PIR2
                      02011 
080E   019F           02012                 clrf            ADCON0
                      02013 
                      02014 ; clear Port Registers
                      02015 
080F   0185           02016                 clrf            PORTA
0810   0186           02017                 clrf            PORTB
0811   0187           02018                 clrf            PORTC
0812   0188           02019                 clrf            PORTD
0813   0189           02020                 clrf            PORTE
                      02021 
                      02022 ; clear all of page 0 RAM  X'20' to x'7F'
                      02023 
0814   1283 1303      02024                 BANKSEL         H'20'
0816   307F           02025                 movlw           H'7F'
0817   0084           02026                 movwf           FSR
                      02027                 
0818   3008           02028                 movlw           high $
0819   008A           02029                 movwf           PCLATH
                      02030 
081A                  02031 ramclrloop
081A   0180           02032                 clrf            INDF
081B   0384           02033                 decf            FSR,f
                      02034                 
081C   0804           02035                 movf            FSR,w
081D   3C20           02036                 sublw           H'20'
081E   1D03 281A      02037                 bnz                     ramclrloop
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 49


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02038 
                      02039 ; load config area from EEPROM
                      02040 
0820                  02041 loadConfig
                      02042         ; EEPROM Read from power-up config - uses temp as the memory location
                      02043 
0820   3009           02044         movlw   pwrUpCfgEnd-pwrUpCfg    ; store the number of loops
0821   00F7           02045         movwf   temp
                      02046 
0822   1283 1703      02047         BANKSEL EEADR
0824   3026           02048         movlw   pwrUpCfg-0x2100
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0825   008D           02049         movwf   EEADR                   ; store the start of EEPROM to read
0826   3020           02050         movlw   H'20'                   ; store the start of RAM to write
0827   0084           02051         movwf   FSR
                      02052         
0828                  02053 eepromread
0828   1683 1703      02054         BANKSEL EECON1
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
082A   138C           02055         bcf             EECON1, EEPGD   ; not program memory
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
082B   140C           02056         bsf             EECON1, RD      ; EEPROM Read
082C   1283 1703      02057         BANKSEL EEDATA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
082E   080C           02058         movf    EEDATA, W       ; W = the data read
082F   0080           02059         movwf   INDF            ; store the EEPROM byte to ram
0830   0A84           02060         incf    FSR,f           ; address of ram
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0831   0A8D           02061         incf    EEADR,f         ; address of rom
0832   0BF7           02062         decfsz  temp,f          ; loop temp times 
0833   2828           02063         goto    eepromread
                      02064 
                      02065 
                      02066 ; Serial port setup
                      02067 
0834   1683 1303      02068                 BANKSEL         TXSTA
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0836   0198           02069         clrf            TXSTA          ; 8 bits data ,no,1 stop
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0837   1518           02070                 bsf                     TXSTA,BRGH         ; enable high speed BRG
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
0838   1698           02071         bsf             TXSTA,TXEN     ; Transmit enable
                      02072 
0839   1683 1303      02073                 BANKSEL         SPBRG
083B   300C           02074         movlw           12             ; BAUD rate 19.2k
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
083C   0099           02075         movwf           SPBRG
                      02076 
083D   1283 1303      02077                 BANKSEL         RCSTA
083F   1798           02078                 bsf             RCSTA,SPEN     ; Asynchronous serial port enable
0840   1618           02079         bsf             RCSTA,CREN     ; continuous receive
                      02080 
0841   1283 1303      02081                 BANKSEL         H'20'
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 50


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                      02082 
0843                  02083 greet     
                      02084                 MacroSendTable  greet_table
0843   3008               M                 movlw           HIGH greet_table        
0844   00FB               M                 movwf           tableH
0845   304F               M                 movlw           LOW     greet_table
0846   00FC               M                 movwf           tableL
Message[307]: Setting page bits.
0847   118A 120A 200A     M                 lcall           sendTable
084A   3008               M                 movlw           HIGH $          ; restore the proper PCLATH
084B   008A               M                 movwf           PCLATH
Message[307]: Setting page bits.
084C   118A 120A 2908 02085                 lgoto           ready
                      02086 
084F                  02087 greet_table
084F   340D 340A 3456 02088               dt                CR,LF,"Vince's CNC MILL V1.0",CR,LF
       3469 346E 3463 
       3465 3427 3473 
       3420 3443 344E 
       3443 3420 344D 
       3449 344C 344C 
       3420 3456 3431 
       342E 3430 340D 
       340A 
0868   3400           02089               retlw             0
                      02090 
                      02091 
                      02092 ;********************************************************
                      02093 ;             END of Stepper Motor controller
                      02094 ;********************************************************
                      02095         end
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 51


SYMBOL TABLE
  LABEL                             VALUE 

ACKDT                             00000005
ACKEN                             00000004
ACKSTAT                           00000006
ADCON0                            0000001F
ADCON1                            0000009F
ADCS0                             00000006
ADCS1                             00000007
ADDEN                             00000003
ADFM                              00000007
ADIE                              00000006
ADIF                              00000006
ADON                              00000000
ADRESH                            0000001E
ADRESL                            0000009E
B1                                00000052
BCD                               00000088
BCLIE                             00000003
BCLIF                             00000003
BF                                00000000
BRGH                              00000002
C                                 00000000
CCP1CON                           00000017
CCP1IE                            00000002
CCP1IF                            00000002
CCP1M0                            00000000
CCP1M1                            00000001
CCP1M2                            00000002
CCP1M3                            00000003
CCP1X                             00000005
CCP1Y                             00000004
CCP2CON                           0000001D
CCP2IE                            00000000
CCP2IF                            00000000
CCP2M0                            00000000
CCP2M1                            00000001
CCP2M2                            00000002
CCP2M3                            00000003
CCP2X                             00000005
CCP2Y                             00000004
CCPR1H                            00000016
CCPR1L                            00000015
CCPR2H                            0000001C
CCPR2L                            0000001B
CHS0                              00000003
CHS1                              00000004
CHS2                              00000005
CKE                               00000006
CKP                               00000004
CR                                0x0d
CREN                              00000004
CRFound                           00000073
CSRC                              00000007
D                                 00000005
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 52


SYMBOL TABLE
  LABEL                             VALUE 

DATA_ADDRESS                      00000005
DC                                00000001
D_A                               00000005
EEADR                             0000010D
EEADRH                            0000010F
EECON1                            0000018C
EECON2                            0000018D
EEDATA                            0000010C
EEDATH                            0000010E
EEIE                              00000004
EEIF                              00000004
EEPGD                             00000007
F                                 00000001
FERR                              00000002
FSR                               00000004
GCEN                              00000007
GIE                               00000007
GO                                00000002
GO_DONE                           00000002
HI                                00000078
I2C_DATA                          00000005
I2C_READ                          00000002
I2C_START                         00000003
I2C_STOP                          00000004
IBF                               00000007
IBOV                              00000005
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
ISR_V                             00000004
LF                                0x0a
LO                                00000079
MacroSendTable                    
NOT_A                             00000005
NOT_ADDRESS                       00000005
NOT_BO                            00000000
NOT_BOR                           00000000
NOT_DONE                          00000002
NOT_PD                            00000003
NOT_POR                           00000001
NOT_RBPU                          00000007
NOT_RC8                           00000006
NOT_T1SYNC                        00000002
NOT_TO                            00000004
NOT_TX8                           00000006
NOT_W                             00000002
NOT_WRITE                         00000002
OBF                               00000006
OERR                              00000001
OPTION_REG                        00000081
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 53


SYMBOL TABLE
  LABEL                             VALUE 

OSC_FREQ                          003D0900
P                                 00000004
PCFG0                             00000000
PCFG1                             00000001
PCFG2                             00000002
PCFG3                             00000003
PCL                               00000002
PCLATH                            0000000A
PCON                              0000008E
PEIE                              00000006
PEN                               00000002
PIE1                              0000008C
PIE2                              0000008D
PIR1                              0000000C
PIR2                              0000000D
PORTA                             00000005
PORTB                             00000006
PORTC                             00000007
PORTD                             00000008
PORTE                             00000009
PR2                               00000092
PRIVATEloadTableByte              0000001B
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
PSPIE                             00000007
PSPIF                             00000007
PSPMODE                           00000004
R                                 00000002
RBIE                              00000003
RBIF                              00000000
RC8_9                             00000006
RC9                               00000006
RCD8                              00000000
RCEN                              00000003
RCIE                              00000005
RCIF                              00000005
RCREG                             0000001A
RCSTA                             00000018
RD                                00000000
READ_WRITE                        00000002
RESET_V                           00000000
RP0                               00000005
RP1                               00000006
RSEN                              00000001
RX9                               00000006
RX9D                              00000000
R_W                               00000002
S                                 00000003
SEN                               00000000
SMP                               00000007
SPBRG                             00000099
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 54


SYMBOL TABLE
  LABEL                             VALUE 

SPEN                              00000007
SREN                              00000005
SSPADD                            00000093
SSPBUF                            00000013
SSPCON                            00000014
SSPCON2                           00000091
SSPEN                             00000005
SSPIE                             00000003
SSPIF                             00000003
SSPM0                             00000000
SSPM1                             00000001
SSPM2                             00000002
SSPM3                             00000003
SSPOV                             00000006
SSPSTAT                           00000094
STATUS                            00000003
SYNC                              00000004
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
T1CKPS0                           00000004
T1CKPS1                           00000005
T1CON                             00000010
T1INSYNC                          00000002
T1OSCEN                           00000003
T1SYNC                            00000002
T2CKPS0                           00000000
T2CKPS1                           00000001
T2CON                             00000012
TMR0                              00000001
TMR1CS                            00000001
TMR1H                             0000000F
TMR1IE                            00000000
TMR1IF                            00000000
TMR1L                             0000000E
TMR1ON                            00000000
TMR2                              00000011
TMR2IE                            00000001
TMR2IF                            00000001
TMR2ON                            00000002
TOUTPS0                           00000003
TOUTPS1                           00000004
TOUTPS2                           00000005
TOUTPS3                           00000006
TRISA                             00000085
TRISB                             00000086
TRISC                             00000087
TRISD                             00000088
TRISE                             00000089
TRISE0                            00000000
TRISE1                            00000001
TRISE2                            00000002
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 55


SYMBOL TABLE
  LABEL                             VALUE 

TRMT                              00000001
TX8_9                             00000006
TX9                               00000006
TX9D                              00000000
TXD8                              00000000
TXEN                              00000005
TXIE                              00000004
TXIF                              00000004
TXREG                             00000019
TXSTA                             00000098
UA                                00000001
W                                 00000000
WCOL                              00000007
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_BODEN_OFF                        00003FBF
_BODEN_ON                         00003FFF
_CPD_OFF                          00003FFF
_CPD_ON                           00003EFF
_CP_ALL                           00000FCF
_CP_HALF                          00001FDF
_CP_OFF                           00003FFF
_CP_UPPER_256                     00002FEF
_DEBUG_OFF                        00003FFF
_DEBUG_ON                         000037FF
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_LVP_OFF                          00003F7F
_LVP_ON                           00003FFF
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_WRT_ENABLE_OFF                   00003DFF
_WRT_ENABLE_ON                    00003FFF
_XT_OSC                           00003FFD
__16F877                          00000001
abort_table                       0000057E
add10                             000000C6
add1K                             000000AE
ascii2byte                        00000020
axisOffset                        00000055
bad_cmd                           00000146
bad_input                         00000054
badcmd_table                      00000157
bounceCount                       0000003C
c16b2ascii                        000000A0
calcYaxis                         00000508
calcZaxis                         00000528
calculateStep                     000000D5
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 56


SYMBOL TABLE
  LABEL                             VALUE 

calcx                             000004FF
calcy                             0000051B
calcz                             00000538
calibrate_cmd                     000001A2
checkHold                         00000562
check_keypress                    0000056C
check_limits                      00000597
checkyhold                        00000568
cmdnext                           00000122
count1                            0000003A
count2                            0000003B
debounce                          
decrx                             000004FB
decry                             00000517
decrz                             00000534
delay_table                       00000230
diagonalStep                      000004E4
digits                            00000071
direction_done                    0000048B
direction_done2                   000004B1
doMotors                          00000545
doneMoving                        000005BE
drillRelay                        00000038
drill_cmd                         0000018A
drill_table                       000002B6
drive1                            000000E5
drive2                            000000E7
drive3                            000000EF
drive4                            000000F1
drive5                            000000F9
drive6                            000000FB
drive7                            00000103
drive8                            00000105
drive_end                         00000106
dump_limits                       000002DD
echochar                          00000054
eepromread                        00000828
eepromwrite                       000005CA
efast                             0000005B
errorFactor                       00000058
eslow                             0000005A
getcmdinp                         00000117
gets                              00000057
greet                             00000843
greet_table                       0000084F
help_cmd                          0000061B
help_table                        00000627
hold_checky                       00000185
hold_end                          00000189
holdcurrent_cmd                   0000016D
holding_table                     00000283
inch_table                        00000255
init                              000007F6
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 57


SYMBOL TABLE
  LABEL                             VALUE 

initErrorFactor                   000004C6
initXYMovement                    000004B6
init_V                            00000007
interrupt                         00000005
known_zero                        00000076
limit_error                       000005A4
limit_error_table                 000005AE
limit_table                       000002E9
list_axis_done                    000002AC
list_cmd                          000001E7
list_next_axis                    000001E8
list_part10                       0000032D
list_part2                        00000211
list_part3                        0000023A
list_part4                        00000268
list_part5                        00000297
list_part6                        000002BD
list_part7                        000002D8
list_part8                        000002FA
list_part9                        00000315
loadConfig                        00000820
location_table                    000001FF
loop                              00000557
manualMode                        00000057
manual_cmd                        0000038C
manual_keypress                   0000041E
manual_nextkey                    00000418
manual_readkey                    0000041C
manual_table                      00000399
manual_xminus                     0000045D
manual_xplus                      00000458
manual_yminus                     00000453
manual_yplus                      0000044E
manual_zminus                     00000449
manual_zplus                      00000444
max_table                         00000327
min_table                         0000030A
move_cmd                          00000462
move_not_plus                     00000485
move_not_plus2                    000004AB
move_the_steppers                 000004CB
nextchar                          00000080
not_an_I                          000001C8
notdone                           000005EA
notdone_table                     000005F9
numparm                           0000003D
offset                            0000003E
parallelStep                      000004DF
pause                             00000554
pollWR                            000005DF
positive                          0000009E
processSteps                      000004EC
puts                              0000007E
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 58


SYMBOL TABLE
  LABEL                             VALUE 

pwrUpCfg                          00002126
pwrUpCfgEnd                       0000212F
ramclrloop                        0000081A
rcvbuffer                         00000042
rcvbuffer_size                    14
rcvbufoff                         00000040
rcvchar                           00000041
ready                             00000108
ready_prompt_table                00000112
s16b2ascii                        00000093
saveW                             0000007A
save_cmd                          000005C1
sendTable                         0000000A
serout                            00000078
set_cmd                           000001B2
set_not_a_plus                    000001E0
set_not_an_equal                  000001D9
set_value                         000001CE
sign                              00000070
stepx                             0000005D
stepy                             0000005E
sub100                            000000BB
sub10k                            000000A2
tableH                            0000007B
tableL                            0000007C
tabofs                            00000053
temp                              00000077
temp2                             0000003F
timer                             0000055B
tmlp                              0000055D
txwait                            00000015
vacuumRelay                       00000039
vacuum_cmd                        00000196
vacuum_table                      000002CE
wait1                             0000007B
wait2                             00000058
whichMotors                       00000056
whichXYStep                       000004D5
xcoils                            00000029
xdelay                            00000020
xdirection                        00000035
xfast                             0000005C
xhold                             00000026
xinch                             00000023
xisfast                           000004BA
xlocation                         0000002C
xstepstogo                        00000032
xyMotors                          0000054C
ycoils                            0000002A
ydelay                            00000021
ydirection                        00000036
yhold                             00000027
yinch                             00000024
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 59


SYMBOL TABLE
  LABEL                             VALUE 

yisfast                           000004C1
ylocation                         0000002E
ystepstogo                        00000033
zcoils                            0000002B
zdelay                            00000022
zdirection                        00000037
zhold                             00000028
zinch                             00000025
zlocation                         00000030
zstepstogo                        00000034


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0180 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
01C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0200 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0240 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0280 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
02C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0300 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0340 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0380 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
03C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0400 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0440 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0480 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
04C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0500 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0540 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0580 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
05C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0600 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0640 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0680 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
06C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0700 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0740 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0780 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
07C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
MPASM  5.11                       STEPPER.ASM   3-2-2008  22:43:24         PAGE 60


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)


0800 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0840 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXX------- ----------------
2000 : -------X-------- ---------------- ---------------- ----------------
2100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXX- ----------------

All other memory blocks unused.

Program Memory Words Used:  2150
Program Memory Words Free:  6042


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :    97 reported,     0 suppressed

